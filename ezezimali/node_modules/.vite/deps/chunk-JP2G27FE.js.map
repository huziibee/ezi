{
  "version": 3,
  "sources": ["../../@azure/msal-browser/src/error/BrowserConfigurationAuthErrorCodes.ts", "../../@azure/msal-browser/src/error/BrowserConfigurationAuthError.ts", "../../@azure/msal-browser/src/cache/BrowserStorage.ts", "../../@azure/msal-browser/src/utils/BrowserProtocolUtils.ts", "../../@azure/msal-browser/src/cache/BrowserCacheManager.ts", "../../@azure/msal-browser/src/utils/BrowserUtils.ts", "../../@azure/msal-browser/src/packageMetadata.ts", "../../@azure/msal-browser/src/interaction_client/BaseInteractionClient.ts", "../../@azure/msal-browser/src/crypto/PkceGenerator.ts", "../../@azure/msal-browser/src/request/RequestHelpers.ts", "../../@azure/msal-browser/src/interaction_client/StandardInteractionClient.ts", "../../@azure/msal-browser/src/error/NativeAuthErrorCodes.ts", "../../@azure/msal-browser/src/broker/nativeBroker/NativeStatusCodes.ts", "../../@azure/msal-browser/src/error/NativeAuthError.ts", "../../@azure/msal-browser/src/interaction_client/SilentCacheClient.ts", "../../@azure/msal-browser/src/interaction_client/NativeInteractionClient.ts", "../../@azure/msal-browser/src/broker/nativeBroker/NativeMessageHandler.ts", "../../@azure/msal-browser/src/interaction_handler/InteractionHandler.ts", "../../@azure/msal-browser/src/response/ResponseHandler.ts", "../../@azure/msal-browser/src/interaction_client/PopupClient.ts", "../../@azure/msal-browser/src/interaction_handler/RedirectHandler.ts", "../../@azure/msal-browser/src/interaction_client/RedirectClient.ts", "../../@azure/msal-browser/src/navigation/NavigationClient.ts", "../../@azure/msal-browser/src/network/FetchClient.ts", "../../@azure/msal-browser/src/config/Configuration.ts", "../../@azure/msal-browser/src/interaction_handler/SilentHandler.ts", "../../@azure/msal-browser/src/interaction_client/SilentIframeClient.ts", "../../@azure/msal-browser/src/interaction_client/SilentRefreshClient.ts", "../../@azure/msal-browser/src/cache/TokenCache.ts", "../../@azure/msal-browser/src/interaction_client/HybridSpaAuthorizationCodeClient.ts", "../../@azure/msal-browser/src/interaction_client/SilentAuthCodeClient.ts", "../../@azure/msal-browser/src/controllers/StandardController.ts"],
  "sourcesContent": ["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const storageNotSupported = \"storage_not_supported\";\nexport const stubbedPublicClientApplicationCalled =\n    \"stubbed_public_client_application_called\";\nexport const inMemRedirectUnavailable = \"in_mem_redirect_unavailable\";\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"@azure/msal-common\";\nimport * as BrowserConfigurationAuthErrorCodes from \"./BrowserConfigurationAuthErrorCodes\";\nexport { BrowserConfigurationAuthErrorCodes };\n\nexport const BrowserConfigurationAuthErrorMessages = {\n    [BrowserConfigurationAuthErrorCodes.storageNotSupported]:\n        \"Given storage configuration option was not supported.\",\n    [BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled]:\n        \"Stub instance of Public Client Application was called. If using msal-react, please ensure context is not used without a provider. For more visit: aka.ms/msaljs/browser-errors\",\n    [BrowserConfigurationAuthErrorCodes.inMemRedirectUnavailable]:\n        \"Redirect cannot be supported. In-memory storage was selected and storeAuthStateInCookie=false, which would cause the library to be unable to handle the incoming hash. If you would like to use the redirect API, please use session/localStorage or set storeAuthStateInCookie=true.\",\n};\n\n/**\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\n * @deprecated Use BrowserAuthErrorCodes instead\n */\nexport const BrowserConfigurationAuthErrorMessage = {\n    storageNotSupportedError: {\n        code: BrowserConfigurationAuthErrorCodes.storageNotSupported,\n        desc: BrowserConfigurationAuthErrorMessages[\n            BrowserConfigurationAuthErrorCodes.storageNotSupported\n        ],\n    },\n    stubPcaInstanceCalled: {\n        code: BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled,\n        desc: BrowserConfigurationAuthErrorMessages[\n            BrowserConfigurationAuthErrorCodes\n                .stubbedPublicClientApplicationCalled\n        ],\n    },\n    inMemRedirectUnavailable: {\n        code: BrowserConfigurationAuthErrorCodes.inMemRedirectUnavailable,\n        desc: BrowserConfigurationAuthErrorMessages[\n            BrowserConfigurationAuthErrorCodes.inMemRedirectUnavailable\n        ],\n    },\n};\n\n/**\n * Browser library error class thrown by the MSAL.js library for SPAs\n */\nexport class BrowserConfigurationAuthError extends AuthError {\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n        this.name = \"BrowserConfigurationAuthError\";\n\n        Object.setPrototypeOf(this, BrowserConfigurationAuthError.prototype);\n    }\n}\n\nexport function createBrowserConfigurationAuthError(\n    errorCode: string\n): BrowserConfigurationAuthError {\n    return new BrowserConfigurationAuthError(\n        errorCode,\n        BrowserConfigurationAuthErrorMessages[errorCode]\n    );\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    BrowserConfigurationAuthErrorCodes,\n    createBrowserConfigurationAuthError,\n} from \"../error/BrowserConfigurationAuthError\";\nimport { BrowserCacheLocation } from \"../utils/BrowserConstants\";\nimport { IWindowStorage } from \"./IWindowStorage\";\n\nexport class BrowserStorage implements IWindowStorage<string> {\n    private windowStorage: Storage;\n\n    constructor(cacheLocation: string) {\n        this.validateWindowStorage(cacheLocation);\n        this.windowStorage = window[cacheLocation];\n    }\n\n    private validateWindowStorage(cacheLocation: string): void {\n        if (\n            (cacheLocation !== BrowserCacheLocation.LocalStorage &&\n                cacheLocation !== BrowserCacheLocation.SessionStorage) ||\n            !window[cacheLocation]\n        ) {\n            throw createBrowserConfigurationAuthError(\n                BrowserConfigurationAuthErrorCodes.storageNotSupported\n            );\n        }\n    }\n\n    getItem(key: string): string | null {\n        return this.windowStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        this.windowStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        this.windowStorage.removeItem(key);\n    }\n\n    getKeys(): string[] {\n        return Object.keys(this.windowStorage);\n    }\n\n    containsKey(key: string): boolean {\n        return this.windowStorage.hasOwnProperty(key);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { InteractionType } from \"./BrowserConstants\";\nimport {\n    ICrypto,\n    RequestStateObject,\n    ProtocolUtils,\n    createClientAuthError,\n    ClientAuthErrorCodes,\n} from \"@azure/msal-common\";\n\nexport type BrowserStateObject = {\n    interactionType: InteractionType;\n};\n\n/**\n * Extracts the BrowserStateObject from the state string.\n * @param browserCrypto\n * @param state\n */\nexport function extractBrowserRequestState(\n    browserCrypto: ICrypto,\n    state: string\n): BrowserStateObject | null {\n    if (!state) {\n        return null;\n    }\n\n    try {\n        const requestStateObj: RequestStateObject =\n            ProtocolUtils.parseRequestState(browserCrypto, state);\n        return requestStateObj.libraryState.meta as BrowserStateObject;\n    } catch (e) {\n        throw createClientAuthError(ClientAuthErrorCodes.invalidState);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Constants,\n    PersistentCacheKeys,\n    StringUtils,\n    CommonAuthorizationCodeRequest,\n    ICrypto,\n    AccountEntity,\n    IdTokenEntity,\n    AccessTokenEntity,\n    RefreshTokenEntity,\n    AppMetadataEntity,\n    CacheManager,\n    ServerTelemetryEntity,\n    ThrottlingEntity,\n    ProtocolUtils,\n    Logger,\n    AuthorityMetadataEntity,\n    DEFAULT_CRYPTO_IMPLEMENTATION,\n    AccountInfo,\n    ActiveAccountFilters,\n    CcsCredential,\n    CcsCredentialType,\n    AuthToken,\n    ValidCredentialType,\n    TokenKeys,\n    CredentialType,\n    CacheRecord,\n    AuthenticationScheme,\n    createClientAuthError,\n    ClientAuthErrorCodes,\n    PerformanceEvents,\n    IPerformanceClient,\n    StaticAuthorityOptions,\n    CacheHelpers,\n    StoreInCache,\n    CacheError,\n} from \"@azure/msal-common\";\nimport { CacheOptions } from \"../config/Configuration\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport {\n    BrowserCacheLocation,\n    InteractionType,\n    TemporaryCacheKeys,\n    InMemoryCacheKeys,\n    StaticCacheKeys,\n} from \"../utils/BrowserConstants\";\nimport { BrowserStorage } from \"./BrowserStorage\";\nimport { MemoryStorage } from \"./MemoryStorage\";\nimport { IWindowStorage } from \"./IWindowStorage\";\nimport { extractBrowserRequestState } from \"../utils/BrowserProtocolUtils\";\nimport { NativeTokenRequest } from \"../broker/nativeBroker/NativeRequest\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { base64Decode } from \"../encode/Base64Decode\";\nimport { base64Encode } from \"../encode/Base64Encode\";\n\n/**\n * This class implements the cache storage interface for MSAL through browser local or session storage.\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\n * parameters such as state and nonce, generally.\n */\nexport class BrowserCacheManager extends CacheManager {\n    // Cache configuration, either set by user or default values.\n    protected cacheConfig: Required<CacheOptions>;\n    // Window storage object (either local or sessionStorage)\n    protected browserStorage: IWindowStorage<string>;\n    // Internal in-memory storage object used for data used by msal that does not need to persist across page loads\n    protected internalStorage: MemoryStorage<string>;\n    // Temporary cache\n    protected temporaryCacheStorage: IWindowStorage<string>;\n    // Logger instance\n    protected logger: Logger;\n    // Telemetry perf client\n    protected performanceClient?: IPerformanceClient;\n\n    // Cookie life calculation (hours * minutes * seconds * ms)\n    protected readonly COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\n\n    constructor(\n        clientId: string,\n        cacheConfig: Required<CacheOptions>,\n        cryptoImpl: ICrypto,\n        logger: Logger,\n        staticAuthorityOptions?: StaticAuthorityOptions,\n        performanceClient?: IPerformanceClient\n    ) {\n        super(clientId, cryptoImpl, logger, staticAuthorityOptions);\n        this.cacheConfig = cacheConfig;\n        this.logger = logger;\n        this.internalStorage = new MemoryStorage();\n        this.browserStorage = this.setupBrowserStorage(\n            this.cacheConfig.cacheLocation\n        );\n        this.temporaryCacheStorage = this.setupTemporaryCacheStorage(\n            this.cacheConfig.temporaryCacheLocation,\n            this.cacheConfig.cacheLocation\n        );\n\n        // Migrate cache entries from older versions of MSAL.\n        if (cacheConfig.cacheMigrationEnabled) {\n            this.migrateCacheEntries();\n            this.createKeyMaps();\n        }\n\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\n     * @param cacheLocation\n     */\n    protected setupBrowserStorage(\n        cacheLocation: BrowserCacheLocation | string\n    ): IWindowStorage<string> {\n        switch (cacheLocation) {\n            case BrowserCacheLocation.LocalStorage:\n            case BrowserCacheLocation.SessionStorage:\n                try {\n                    return new BrowserStorage(cacheLocation);\n                } catch (e) {\n                    this.logger.verbose(e as string);\n                    break;\n                }\n            case BrowserCacheLocation.MemoryStorage:\n            default:\n                break;\n        }\n        this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;\n        return new MemoryStorage();\n    }\n\n    /**\n     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured temporaryCacheLocation.\n     * @param temporaryCacheLocation\n     * @param cacheLocation\n     */\n    protected setupTemporaryCacheStorage(\n        temporaryCacheLocation: BrowserCacheLocation | string,\n        cacheLocation: BrowserCacheLocation | string\n    ): IWindowStorage<string> {\n        switch (cacheLocation) {\n            case BrowserCacheLocation.LocalStorage:\n            case BrowserCacheLocation.SessionStorage:\n                try {\n                    // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\n                    return new BrowserStorage(\n                        temporaryCacheLocation ||\n                            BrowserCacheLocation.SessionStorage\n                    );\n                } catch (e) {\n                    this.logger.verbose(e as string);\n                    return this.internalStorage;\n                }\n            case BrowserCacheLocation.MemoryStorage:\n            default:\n                return this.internalStorage;\n        }\n    }\n\n    /**\n     * Migrate all old cache entries to new schema. No rollback supported.\n     * @param storeAuthStateInCookie\n     */\n    protected migrateCacheEntries(): void {\n        const idTokenKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ID_TOKEN}`;\n        const clientInfoKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.CLIENT_INFO}`;\n        const errorKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR}`;\n        const errorDescKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR_DESC}`;\n\n        const idTokenValue = this.browserStorage.getItem(idTokenKey);\n        const clientInfoValue = this.browserStorage.getItem(clientInfoKey);\n        const errorValue = this.browserStorage.getItem(errorKey);\n        const errorDescValue = this.browserStorage.getItem(errorDescKey);\n\n        const values = [\n            idTokenValue,\n            clientInfoValue,\n            errorValue,\n            errorDescValue,\n        ];\n        const keysToMigrate = [\n            PersistentCacheKeys.ID_TOKEN,\n            PersistentCacheKeys.CLIENT_INFO,\n            PersistentCacheKeys.ERROR,\n            PersistentCacheKeys.ERROR_DESC,\n        ];\n\n        keysToMigrate.forEach((cacheKey: string, index: number) => {\n            const value = values[index];\n            if (value) {\n                this.setTemporaryCache(cacheKey, value, true);\n            }\n        });\n    }\n\n    /**\n     * Searches all cache entries for MSAL accounts and creates the account key map\n     * This is used to migrate users from older versions of MSAL which did not create the map.\n     * @returns\n     */\n    private createKeyMaps(): void {\n        this.logger.trace(\"BrowserCacheManager - createKeyMaps called.\");\n        const accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n        const tokenKeys = this.getItem(\n            `${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`\n        );\n        if (accountKeys && tokenKeys) {\n            this.logger.verbose(\n                \"BrowserCacheManager:createKeyMaps - account and token key maps already exist, skipping migration.\"\n            );\n            // Key maps already exist, no need to iterate through cache\n            return;\n        }\n\n        const allKeys = this.browserStorage.getKeys();\n        allKeys.forEach((key) => {\n            if (this.isCredentialKey(key)) {\n                // Get item, parse, validate and write key to map\n                const value = this.getItem(key);\n                if (value) {\n                    const credObj = this.validateAndParseJson(value);\n                    if (credObj && credObj.hasOwnProperty(\"credentialType\")) {\n                        switch (credObj[\"credentialType\"]) {\n                            case CredentialType.ID_TOKEN:\n                                if (CacheHelpers.isIdTokenEntity(credObj)) {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - idToken found, saving key to token key map\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - idToken with key: ${key} found, saving key to token key map`\n                                    );\n                                    const idTokenEntity =\n                                        credObj as IdTokenEntity;\n                                    const newKey =\n                                        this.updateCredentialCacheKey(\n                                            key,\n                                            idTokenEntity\n                                        );\n                                    this.addTokenKey(\n                                        newKey,\n                                        CredentialType.ID_TOKEN\n                                    );\n                                    return;\n                                } else {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - key found matching idToken schema with value containing idToken credentialType field but value failed IdTokenEntity validation, skipping.\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - failed idToken validation on key: ${key}`\n                                    );\n                                }\n                                break;\n                            case CredentialType.ACCESS_TOKEN:\n                            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n                                if (CacheHelpers.isAccessTokenEntity(credObj)) {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - accessToken found, saving key to token key map\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - accessToken with key: ${key} found, saving key to token key map`\n                                    );\n                                    const accessTokenEntity =\n                                        credObj as AccessTokenEntity;\n                                    const newKey =\n                                        this.updateCredentialCacheKey(\n                                            key,\n                                            accessTokenEntity\n                                        );\n                                    this.addTokenKey(\n                                        newKey,\n                                        CredentialType.ACCESS_TOKEN\n                                    );\n                                    return;\n                                } else {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - key found matching accessToken schema with value containing accessToken credentialType field but value failed AccessTokenEntity validation, skipping.\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - failed accessToken validation on key: ${key}`\n                                    );\n                                }\n                                break;\n                            case CredentialType.REFRESH_TOKEN:\n                                if (\n                                    CacheHelpers.isRefreshTokenEntity(credObj)\n                                ) {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - refreshToken found, saving key to token key map\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - refreshToken with key: ${key} found, saving key to token key map`\n                                    );\n                                    const refreshTokenEntity =\n                                        credObj as RefreshTokenEntity;\n                                    const newKey =\n                                        this.updateCredentialCacheKey(\n                                            key,\n                                            refreshTokenEntity\n                                        );\n                                    this.addTokenKey(\n                                        newKey,\n                                        CredentialType.REFRESH_TOKEN\n                                    );\n                                    return;\n                                } else {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - key found matching refreshToken schema with value containing refreshToken credentialType field but value failed RefreshTokenEntity validation, skipping.\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - failed refreshToken validation on key: ${key}`\n                                    );\n                                }\n                                break;\n                            default:\n                            // If credentialType isn't one of our predefined ones, it may not be an MSAL cache value. Ignore.\n                        }\n                    }\n                }\n            }\n\n            if (this.isAccountKey(key)) {\n                const value = this.getItem(key);\n                if (value) {\n                    const accountObj = this.validateAndParseJson(value);\n                    if (\n                        accountObj &&\n                        AccountEntity.isAccountEntity(accountObj)\n                    ) {\n                        this.logger.trace(\n                            \"BrowserCacheManager:createKeyMaps - account found, saving key to account key map\"\n                        );\n                        this.logger.tracePii(\n                            `BrowserCacheManager:createKeyMaps - account with key: ${key} found, saving key to account key map`\n                        );\n                        this.addAccountKeyToMap(key);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Parses passed value as JSON object, JSON.parse() will throw an error.\n     * @param input\n     */\n    protected validateAndParseJson(jsonValue: string): object | null {\n        try {\n            const parsedJson = JSON.parse(jsonValue);\n            /**\n             * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\n             * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\n             * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\n             *\n             */\n            return parsedJson && typeof parsedJson === \"object\"\n                ? parsedJson\n                : null;\n        } catch (error) {\n            return null;\n        }\n    }\n\n    /**\n     * fetches the entry from the browser storage based off the key\n     * @param key\n     */\n    getItem(key: string): string | null {\n        return this.browserStorage.getItem(key);\n    }\n\n    /**\n     * sets the entry in the browser storage\n     * @param key\n     * @param value\n     */\n    setItem(key: string, value: string): void {\n        this.browserStorage.setItem(key, value);\n    }\n\n    /**\n     * fetch the account entity from the platform cache\n     * @param accountKey\n     */\n    getAccount(accountKey: string, logger?: Logger): AccountEntity | null {\n        this.logger.trace(\"BrowserCacheManager.getAccount called\");\n        const accountEntity = this.getCachedAccountEntity(accountKey);\n\n        return this.updateOutdatedCachedAccount(\n            accountKey,\n            accountEntity,\n            logger\n        );\n    }\n\n    /**\n     * Reads account from cache, deserializes it into an account entity and returns it.\n     * If account is not found from the key, returns null and removes key from map.\n     * @param accountKey\n     * @returns\n     */\n    getCachedAccountEntity(accountKey: string): AccountEntity | null {\n        const serializedAccount = this.getItem(accountKey);\n        if (!serializedAccount) {\n            this.removeAccountKeyFromMap(accountKey);\n            return null;\n        }\n\n        const parsedAccount = this.validateAndParseJson(serializedAccount);\n        if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {\n            this.removeAccountKeyFromMap(accountKey);\n            return null;\n        }\n\n        return CacheManager.toObject<AccountEntity>(\n            new AccountEntity(),\n            parsedAccount\n        );\n    }\n\n    /**\n     * set account entity in the platform cache\n     * @param account\n     */\n    setAccount(account: AccountEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAccount called\");\n        const key = account.generateAccountKey();\n        this.setItem(key, JSON.stringify(account));\n        this.addAccountKeyToMap(key);\n    }\n\n    /**\n     * Returns the array of account keys currently cached\n     * @returns\n     */\n    getAccountKeys(): Array<string> {\n        this.logger.trace(\"BrowserCacheManager.getAccountKeys called\");\n        const accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n        if (accountKeys) {\n            return JSON.parse(accountKeys);\n        }\n\n        this.logger.verbose(\n            \"BrowserCacheManager.getAccountKeys - No account keys found\"\n        );\n        return [];\n    }\n\n    /**\n     * Add a new account to the key map\n     * @param key\n     */\n    addAccountKeyToMap(key: string): void {\n        this.logger.trace(\"BrowserCacheManager.addAccountKeyToMap called\");\n        this.logger.tracePii(\n            `BrowserCacheManager.addAccountKeyToMap called with key: ${key}`\n        );\n        const accountKeys = this.getAccountKeys();\n        if (accountKeys.indexOf(key) === -1) {\n            // Only add key if it does not already exist in the map\n            accountKeys.push(key);\n            this.setItem(\n                StaticCacheKeys.ACCOUNT_KEYS,\n                JSON.stringify(accountKeys)\n            );\n            this.logger.verbose(\n                \"BrowserCacheManager.addAccountKeyToMap account key added\"\n            );\n        } else {\n            this.logger.verbose(\n                \"BrowserCacheManager.addAccountKeyToMap account key already exists in map\"\n            );\n        }\n    }\n\n    /**\n     * Remove an account from the key map\n     * @param key\n     */\n    removeAccountKeyFromMap(key: string): void {\n        this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap called\");\n        this.logger.tracePii(\n            `BrowserCacheManager.removeAccountKeyFromMap called with key: ${key}`\n        );\n        const accountKeys = this.getAccountKeys();\n        const removalIndex = accountKeys.indexOf(key);\n        if (removalIndex > -1) {\n            accountKeys.splice(removalIndex, 1);\n            this.setItem(\n                StaticCacheKeys.ACCOUNT_KEYS,\n                JSON.stringify(accountKeys)\n            );\n            this.logger.trace(\n                \"BrowserCacheManager.removeAccountKeyFromMap account key removed\"\n            );\n        } else {\n            this.logger.trace(\n                \"BrowserCacheManager.removeAccountKeyFromMap key not found in existing map\"\n            );\n        }\n    }\n\n    /**\n     * Extends inherited removeAccount function to include removal of the account key from the map\n     * @param key\n     */\n    async removeAccount(key: string): Promise<void> {\n        void super.removeAccount(key);\n        this.removeAccountKeyFromMap(key);\n    }\n\n    /**\n     * Remove account entity from the platform cache if it's outdated\n     * @param accountKey\n     */\n    removeOutdatedAccount(accountKey: string): void {\n        this.removeItem(accountKey);\n        this.removeAccountKeyFromMap(accountKey);\n    }\n\n    /**\n     * Removes given idToken from the cache and from the key map\n     * @param key\n     */\n    removeIdToken(key: string): void {\n        super.removeIdToken(key);\n        this.removeTokenKey(key, CredentialType.ID_TOKEN);\n    }\n\n    /**\n     * Removes given accessToken from the cache and from the key map\n     * @param key\n     */\n    async removeAccessToken(key: string): Promise<void> {\n        void super.removeAccessToken(key);\n        this.removeTokenKey(key, CredentialType.ACCESS_TOKEN);\n    }\n\n    /**\n     * Removes given refreshToken from the cache and from the key map\n     * @param key\n     */\n    removeRefreshToken(key: string): void {\n        super.removeRefreshToken(key);\n        this.removeTokenKey(key, CredentialType.REFRESH_TOKEN);\n    }\n\n    /**\n     * Gets the keys for the cached tokens associated with this clientId\n     * @returns\n     */\n    getTokenKeys(): TokenKeys {\n        this.logger.trace(\"BrowserCacheManager.getTokenKeys called\");\n        const item = this.getItem(\n            `${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`\n        );\n        if (item) {\n            const tokenKeys = this.validateAndParseJson(item);\n            if (\n                tokenKeys &&\n                tokenKeys.hasOwnProperty(\"idToken\") &&\n                tokenKeys.hasOwnProperty(\"accessToken\") &&\n                tokenKeys.hasOwnProperty(\"refreshToken\")\n            ) {\n                return tokenKeys as TokenKeys;\n            } else {\n                this.logger.error(\n                    \"BrowserCacheManager.getTokenKeys - Token keys found but in an unknown format. Returning empty key map.\"\n                );\n            }\n        } else {\n            this.logger.verbose(\n                \"BrowserCacheManager.getTokenKeys - No token keys found\"\n            );\n        }\n\n        return {\n            idToken: [],\n            accessToken: [],\n            refreshToken: [],\n        };\n    }\n\n    /**\n     * Adds the given key to the token key map\n     * @param key\n     * @param type\n     */\n    addTokenKey(key: string, type: CredentialType): void {\n        this.logger.trace(\"BrowserCacheManager addTokenKey called\");\n        const tokenKeys = this.getTokenKeys();\n\n        switch (type) {\n            case CredentialType.ID_TOKEN:\n                if (tokenKeys.idToken.indexOf(key) === -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: addTokenKey - idToken added to map\"\n                    );\n                    tokenKeys.idToken.push(key);\n                }\n                break;\n            case CredentialType.ACCESS_TOKEN:\n                if (tokenKeys.accessToken.indexOf(key) === -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: addTokenKey - accessToken added to map\"\n                    );\n                    tokenKeys.accessToken.push(key);\n                }\n                break;\n            case CredentialType.REFRESH_TOKEN:\n                if (tokenKeys.refreshToken.indexOf(key) === -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: addTokenKey - refreshToken added to map\"\n                    );\n                    tokenKeys.refreshToken.push(key);\n                }\n                break;\n            default:\n                this.logger.error(\n                    `BrowserCacheManager:addTokenKey - CredentialType provided invalid. CredentialType: ${type}`\n                );\n                throw createClientAuthError(\n                    ClientAuthErrorCodes.unexpectedCredentialType\n                );\n        }\n\n        this.setItem(\n            `${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`,\n            JSON.stringify(tokenKeys)\n        );\n    }\n\n    /**\n     * Removes the given key from the token key map\n     * @param key\n     * @param type\n     */\n    removeTokenKey(key: string, type: CredentialType): void {\n        this.logger.trace(\"BrowserCacheManager removeTokenKey called\");\n        const tokenKeys = this.getTokenKeys();\n\n        switch (type) {\n            case CredentialType.ID_TOKEN:\n                this.logger.infoPii(\n                    `BrowserCacheManager: removeTokenKey - attempting to remove idToken with key: ${key} from map`\n                );\n                const idRemoval = tokenKeys.idToken.indexOf(key);\n                if (idRemoval > -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - idToken removed from map\"\n                    );\n                    tokenKeys.idToken.splice(idRemoval, 1);\n                } else {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - idToken does not exist in map. Either it was previously removed or it was never added.\"\n                    );\n                }\n                break;\n            case CredentialType.ACCESS_TOKEN:\n                this.logger.infoPii(\n                    `BrowserCacheManager: removeTokenKey - attempting to remove accessToken with key: ${key} from map`\n                );\n                const accessRemoval = tokenKeys.accessToken.indexOf(key);\n                if (accessRemoval > -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - accessToken removed from map\"\n                    );\n                    tokenKeys.accessToken.splice(accessRemoval, 1);\n                } else {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - accessToken does not exist in map. Either it was previously removed or it was never added.\"\n                    );\n                }\n                break;\n            case CredentialType.REFRESH_TOKEN:\n                this.logger.infoPii(\n                    `BrowserCacheManager: removeTokenKey - attempting to remove refreshToken with key: ${key} from map`\n                );\n                const refreshRemoval = tokenKeys.refreshToken.indexOf(key);\n                if (refreshRemoval > -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - refreshToken removed from map\"\n                    );\n                    tokenKeys.refreshToken.splice(refreshRemoval, 1);\n                } else {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - refreshToken does not exist in map. Either it was previously removed or it was never added.\"\n                    );\n                }\n                break;\n            default:\n                this.logger.error(\n                    `BrowserCacheManager:removeTokenKey - CredentialType provided invalid. CredentialType: ${type}`\n                );\n                throw createClientAuthError(\n                    ClientAuthErrorCodes.unexpectedCredentialType\n                );\n        }\n\n        this.setItem(\n            `${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`,\n            JSON.stringify(tokenKeys)\n        );\n    }\n\n    /**\n     * generates idToken entity from a string\n     * @param idTokenKey\n     */\n    getIdTokenCredential(idTokenKey: string): IdTokenEntity | null {\n        const value = this.getItem(idTokenKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getIdTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n            return null;\n        }\n\n        const parsedIdToken = this.validateAndParseJson(value);\n        if (!parsedIdToken || !CacheHelpers.isIdTokenEntity(parsedIdToken)) {\n            this.logger.trace(\n                \"BrowserCacheManager.getIdTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n            return null;\n        }\n\n        this.logger.trace(\n            \"BrowserCacheManager.getIdTokenCredential: cache hit\"\n        );\n        return parsedIdToken as IdTokenEntity;\n    }\n\n    /**\n     * set IdToken credential to the platform cache\n     * @param idToken\n     */\n    setIdTokenCredential(idToken: IdTokenEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\n        const idTokenKey = CacheHelpers.generateCredentialKey(idToken);\n\n        this.setItem(idTokenKey, JSON.stringify(idToken));\n\n        this.addTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n    }\n\n    /**\n     * generates accessToken entity from a string\n     * @param key\n     */\n    getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null {\n        const value = this.getItem(accessTokenKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n            return null;\n        }\n        const parsedAccessToken = this.validateAndParseJson(value);\n        if (\n            !parsedAccessToken ||\n            !CacheHelpers.isAccessTokenEntity(parsedAccessToken)\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n            return null;\n        }\n\n        this.logger.trace(\n            \"BrowserCacheManager.getAccessTokenCredential: cache hit\"\n        );\n        return parsedAccessToken as AccessTokenEntity;\n    }\n\n    /**\n     * set accessToken credential to the platform cache\n     * @param accessToken\n     */\n    setAccessTokenCredential(accessToken: AccessTokenEntity): void {\n        this.logger.trace(\n            \"BrowserCacheManager.setAccessTokenCredential called\"\n        );\n        const accessTokenKey = CacheHelpers.generateCredentialKey(accessToken);\n        this.setItem(accessTokenKey, JSON.stringify(accessToken));\n\n        this.addTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n    }\n\n    /**\n     * generates refreshToken entity from a string\n     * @param refreshTokenKey\n     */\n    getRefreshTokenCredential(\n        refreshTokenKey: string\n    ): RefreshTokenEntity | null {\n        const value = this.getItem(refreshTokenKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n            return null;\n        }\n        const parsedRefreshToken = this.validateAndParseJson(value);\n        if (\n            !parsedRefreshToken ||\n            !CacheHelpers.isRefreshTokenEntity(parsedRefreshToken)\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n            return null;\n        }\n\n        this.logger.trace(\n            \"BrowserCacheManager.getRefreshTokenCredential: cache hit\"\n        );\n        return parsedRefreshToken as RefreshTokenEntity;\n    }\n\n    /**\n     * set refreshToken credential to the platform cache\n     * @param refreshToken\n     */\n    setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void {\n        this.logger.trace(\n            \"BrowserCacheManager.setRefreshTokenCredential called\"\n        );\n        const refreshTokenKey =\n            CacheHelpers.generateCredentialKey(refreshToken);\n        this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\n\n        this.addTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n    }\n\n    /**\n     * fetch appMetadata entity from the platform cache\n     * @param appMetadataKey\n     */\n    getAppMetadata(appMetadataKey: string): AppMetadataEntity | null {\n        const value = this.getItem(appMetadataKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAppMetadata: called, no cache hit\"\n            );\n            return null;\n        }\n\n        const parsedMetadata = this.validateAndParseJson(value);\n        if (\n            !parsedMetadata ||\n            !CacheHelpers.isAppMetadataEntity(appMetadataKey, parsedMetadata)\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAppMetadata: called, no cache hit\"\n            );\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\n        return parsedMetadata as AppMetadataEntity;\n    }\n\n    /**\n     * set appMetadata entity to the platform cache\n     * @param appMetadata\n     */\n    setAppMetadata(appMetadata: AppMetadataEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\n        const appMetadataKey = CacheHelpers.generateAppMetadataKey(appMetadata);\n        this.setItem(appMetadataKey, JSON.stringify(appMetadata));\n    }\n\n    /**\n     * fetch server telemetry entity from the platform cache\n     * @param serverTelemetryKey\n     */\n    getServerTelemetry(\n        serverTelemetryKey: string\n    ): ServerTelemetryEntity | null {\n        const value = this.getItem(serverTelemetryKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getServerTelemetry: called, no cache hit\"\n            );\n            return null;\n        }\n        const parsedEntity = this.validateAndParseJson(value);\n        if (\n            !parsedEntity ||\n            !CacheHelpers.isServerTelemetryEntity(\n                serverTelemetryKey,\n                parsedEntity\n            )\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getServerTelemetry: called, no cache hit\"\n            );\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\n        return parsedEntity as ServerTelemetryEntity;\n    }\n\n    /**\n     * set server telemetry entity to the platform cache\n     * @param serverTelemetryKey\n     * @param serverTelemetry\n     */\n    setServerTelemetry(\n        serverTelemetryKey: string,\n        serverTelemetry: ServerTelemetryEntity\n    ): void {\n        this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\n        this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\n    }\n\n    /**\n     *\n     */\n    getAuthorityMetadata(key: string): AuthorityMetadataEntity | null {\n        const value = this.internalStorage.getItem(key);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\"\n            );\n            return null;\n        }\n        const parsedMetadata = this.validateAndParseJson(value);\n        if (\n            parsedMetadata &&\n            CacheHelpers.isAuthorityMetadataEntity(key, parsedMetadata)\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAuthorityMetadata: cache hit\"\n            );\n            return parsedMetadata as AuthorityMetadataEntity;\n        }\n        return null;\n    }\n\n    /**\n     *\n     */\n    getAuthorityMetadataKeys(): Array<string> {\n        const allKeys = this.internalStorage.getKeys();\n        return allKeys.filter((key) => {\n            return this.isAuthorityMetadata(key);\n        });\n    }\n\n    /**\n     * Sets wrapper metadata in memory\n     * @param wrapperSKU\n     * @param wrapperVersion\n     */\n    setWrapperMetadata(wrapperSKU: string, wrapperVersion: string): void {\n        this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);\n        this.internalStorage.setItem(\n            InMemoryCacheKeys.WRAPPER_VER,\n            wrapperVersion\n        );\n    }\n\n    /**\n     * Returns wrapper metadata from in-memory storage\n     */\n    getWrapperMetadata(): [string, string] {\n        const sku =\n            this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_SKU) ||\n            Constants.EMPTY_STRING;\n        const version =\n            this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_VER) ||\n            Constants.EMPTY_STRING;\n        return [sku, version];\n    }\n\n    /**\n     *\n     * @param entity\n     */\n    setAuthorityMetadata(key: string, entity: AuthorityMetadataEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\n        this.internalStorage.setItem(key, JSON.stringify(entity));\n    }\n\n    /**\n     * Gets the active account\n     */\n    getActiveAccount(): AccountInfo | null {\n        const activeAccountKeyFilters = this.generateCacheKey(\n            PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS\n        );\n        const activeAccountValueFilters = this.getItem(activeAccountKeyFilters);\n        if (!activeAccountValueFilters) {\n            // if new active account cache type isn't found, it's an old version, so look for that instead\n            this.logger.trace(\n                \"BrowserCacheManager.getActiveAccount: No active account filters cache schema found, looking for legacy schema\"\n            );\n            const activeAccountKeyLocal = this.generateCacheKey(\n                PersistentCacheKeys.ACTIVE_ACCOUNT\n            );\n            const activeAccountValueLocal = this.getItem(activeAccountKeyLocal);\n            if (!activeAccountValueLocal) {\n                this.logger.trace(\n                    \"BrowserCacheManager.getActiveAccount: No active account found\"\n                );\n                return null;\n            }\n            const activeAccount = this.getAccountInfoFilteredBy({\n                localAccountId: activeAccountValueLocal,\n            });\n            if (activeAccount) {\n                this.logger.trace(\n                    \"BrowserCacheManager.getActiveAccount: Legacy active account cache schema found\"\n                );\n                this.logger.trace(\n                    \"BrowserCacheManager.getActiveAccount: Adding active account filters cache schema\"\n                );\n                this.setActiveAccount(activeAccount);\n                return activeAccount;\n            }\n            return null;\n        }\n        const activeAccountValueObj = this.validateAndParseJson(\n            activeAccountValueFilters\n        ) as AccountInfo;\n        if (activeAccountValueObj) {\n            this.logger.trace(\n                \"BrowserCacheManager.getActiveAccount: Active account filters schema found\"\n            );\n            return this.getAccountInfoFilteredBy({\n                homeAccountId: activeAccountValueObj.homeAccountId,\n                localAccountId: activeAccountValueObj.localAccountId,\n                tenantId: activeAccountValueObj.tenantId,\n            });\n        }\n        this.logger.trace(\n            \"BrowserCacheManager.getActiveAccount: No active account found\"\n        );\n        return null;\n    }\n\n    /**\n     * Sets the active account's localAccountId in cache\n     * @param account\n     */\n    setActiveAccount(account: AccountInfo | null): void {\n        const activeAccountKey = this.generateCacheKey(\n            PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS\n        );\n        const activeAccountKeyLocal = this.generateCacheKey(\n            PersistentCacheKeys.ACTIVE_ACCOUNT\n        );\n        if (account) {\n            this.logger.verbose(\"setActiveAccount: Active account set\");\n            const activeAccountValue: ActiveAccountFilters = {\n                homeAccountId: account.homeAccountId,\n                localAccountId: account.localAccountId,\n                tenantId: account.tenantId,\n            };\n            this.browserStorage.setItem(\n                activeAccountKey,\n                JSON.stringify(activeAccountValue)\n            );\n            this.browserStorage.setItem(\n                activeAccountKeyLocal,\n                account.localAccountId\n            );\n        } else {\n            this.logger.verbose(\n                \"setActiveAccount: No account passed, active account not set\"\n            );\n            this.browserStorage.removeItem(activeAccountKey);\n            this.browserStorage.removeItem(activeAccountKeyLocal);\n        }\n    }\n\n    /**\n     * fetch throttling entity from the platform cache\n     * @param throttlingCacheKey\n     */\n    getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null {\n        const value = this.getItem(throttlingCacheKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getThrottlingCache: called, no cache hit\"\n            );\n            return null;\n        }\n\n        const parsedThrottlingCache = this.validateAndParseJson(value);\n        if (\n            !parsedThrottlingCache ||\n            !CacheHelpers.isThrottlingEntity(\n                throttlingCacheKey,\n                parsedThrottlingCache\n            )\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getThrottlingCache: called, no cache hit\"\n            );\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\n        return parsedThrottlingCache as ThrottlingEntity;\n    }\n\n    /**\n     * set throttling entity to the platform cache\n     * @param throttlingCacheKey\n     * @param throttlingCache\n     */\n    setThrottlingCache(\n        throttlingCacheKey: string,\n        throttlingCache: ThrottlingEntity\n    ): void {\n        this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\n        this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\n    }\n\n    /**\n     * Gets cache item with given key.\n     * Will retrieve from cookies if storeAuthStateInCookie is set to true.\n     * @param key\n     */\n    getTemporaryCache(cacheKey: string, generateKey?: boolean): string | null {\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            const itemCookie = this.getItemCookie(key);\n            if (itemCookie) {\n                this.logger.trace(\n                    \"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\"\n                );\n                return itemCookie;\n            }\n        }\n\n        const value = this.temporaryCacheStorage.getItem(key);\n        if (!value) {\n            // If temp cache item not found in session/memory, check local storage for items set by old versions\n            if (\n                this.cacheConfig.cacheLocation ===\n                BrowserCacheLocation.LocalStorage\n            ) {\n                const item = this.browserStorage.getItem(key);\n                if (item) {\n                    this.logger.trace(\n                        \"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\"\n                    );\n                    return item;\n                }\n            }\n            this.logger.trace(\n                \"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\"\n            );\n            return null;\n        }\n        this.logger.trace(\n            \"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\"\n        );\n        return value;\n    }\n\n    /**\n     * Sets the cache item with the key and value given.\n     * Stores in cookie if storeAuthStateInCookie is set to true.\n     * This can cause cookie overflow if used incorrectly.\n     * @param key\n     * @param value\n     */\n    setTemporaryCache(\n        cacheKey: string,\n        value: string,\n        generateKey?: boolean\n    ): void {\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n\n        this.temporaryCacheStorage.setItem(key, value);\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            this.logger.trace(\n                \"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\"\n            );\n            this.setItemCookie(key, value);\n        }\n    }\n\n    /**\n     * Removes the cache item with the given key.\n     * @param key\n     */\n    removeItem(key: string): void {\n        this.browserStorage.removeItem(key);\n    }\n\n    /**\n     * Removes the temporary cache item with the given key.\n     * Will also clear the cookie item if storeAuthStateInCookie is set to true.\n     * @param key\n     */\n    removeTemporaryItem(key: string): void {\n        this.temporaryCacheStorage.removeItem(key);\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            this.logger.trace(\n                \"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\"\n            );\n            this.clearItemCookie(key);\n        }\n    }\n\n    /**\n     * Gets all keys in window.\n     */\n    getKeys(): string[] {\n        return this.browserStorage.getKeys();\n    }\n\n    /**\n     * Clears all cache entries created by MSAL.\n     */\n    async clear(): Promise<void> {\n        // Removes all accounts and their credentials\n        await this.removeAllAccounts();\n        this.removeAppMetadata();\n\n        // Remove temp storage first to make sure any cookies are cleared\n        this.temporaryCacheStorage.getKeys().forEach((cacheKey: string) => {\n            if (\n                cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1 ||\n                cacheKey.indexOf(this.clientId) !== -1\n            ) {\n                this.removeTemporaryItem(cacheKey);\n            }\n        });\n\n        // Removes all remaining MSAL cache items\n        this.browserStorage.getKeys().forEach((cacheKey: string) => {\n            if (\n                cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1 ||\n                cacheKey.indexOf(this.clientId) !== -1\n            ) {\n                this.browserStorage.removeItem(cacheKey);\n            }\n        });\n\n        this.internalStorage.clear();\n    }\n\n    /**\n     * Clears all access tokes that have claims prior to saving the current one\n     * @param performanceClient {IPerformanceClient}\n     * @returns\n     */\n    async clearTokensAndKeysWithClaims(\n        performanceClient: IPerformanceClient\n    ): Promise<void> {\n        performanceClient.addQueueMeasurement(\n            PerformanceEvents.ClearTokensAndKeysWithClaims\n        );\n\n        const tokenKeys = this.getTokenKeys();\n\n        const removedAccessTokens: Array<Promise<void>> = [];\n        tokenKeys.accessToken.forEach((key: string) => {\n            // if the access token has claims in its key, remove the token key and the token\n            const credential = this.getAccessTokenCredential(key);\n            if (\n                credential?.requestedClaimsHash &&\n                key.includes(credential.requestedClaimsHash.toLowerCase())\n            ) {\n                removedAccessTokens.push(this.removeAccessToken(key));\n            }\n        });\n        await Promise.all(removedAccessTokens);\n\n        // warn if any access tokens are removed\n        if (removedAccessTokens.length > 0) {\n            this.logger.warning(\n                `${removedAccessTokens.length} access tokens with claims in the cache keys have been removed from the cache.`\n            );\n        }\n    }\n\n    /**\n     * Add value to cookies\n     * @param cookieName\n     * @param cookieValue\n     * @param expires\n     * @deprecated\n     */\n    setItemCookie(\n        cookieName: string,\n        cookieValue: string,\n        expires?: number\n    ): void {\n        let cookieStr = `${encodeURIComponent(cookieName)}=${encodeURIComponent(\n            cookieValue\n        )};path=/;SameSite=Lax;`;\n        if (expires) {\n            const expireTime = this.getCookieExpirationTime(expires);\n            cookieStr += `expires=${expireTime};`;\n        }\n\n        if (this.cacheConfig.secureCookies) {\n            cookieStr += \"Secure;\";\n        }\n\n        document.cookie = cookieStr;\n    }\n\n    /**\n     * Get one item by key from cookies\n     * @param cookieName\n     * @deprecated\n     */\n    getItemCookie(cookieName: string): string {\n        const name = `${encodeURIComponent(cookieName)}=`;\n        const cookieList = document.cookie.split(\";\");\n        for (let i: number = 0; i < cookieList.length; i++) {\n            let cookie = cookieList[i];\n            while (cookie.charAt(0) === \" \") {\n                cookie = cookie.substring(1);\n            }\n            if (cookie.indexOf(name) === 0) {\n                return decodeURIComponent(\n                    cookie.substring(name.length, cookie.length)\n                );\n            }\n        }\n        return Constants.EMPTY_STRING;\n    }\n\n    /**\n     * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.\n     * @deprecated\n     */\n    clearMsalCookies(): void {\n        const cookiePrefix = `${Constants.CACHE_PREFIX}.${this.clientId}`;\n        const cookieList = document.cookie.split(\";\");\n        cookieList.forEach((cookie: string): void => {\n            while (cookie.charAt(0) === \" \") {\n                // eslint-disable-next-line no-param-reassign\n                cookie = cookie.substring(1);\n            }\n            if (cookie.indexOf(cookiePrefix) === 0) {\n                const cookieKey = cookie.split(\"=\")[0];\n                this.clearItemCookie(cookieKey);\n            }\n        });\n    }\n\n    /**\n     * Clear an item in the cookies by key\n     * @param cookieName\n     * @deprecated\n     */\n    clearItemCookie(cookieName: string): void {\n        this.setItemCookie(cookieName, Constants.EMPTY_STRING, -1);\n    }\n\n    /**\n     * Get cookie expiration time\n     * @param cookieLifeDays\n     * @deprecated\n     */\n    getCookieExpirationTime(cookieLifeDays: number): string {\n        const today = new Date();\n        const expr = new Date(\n            today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER\n        );\n        return expr.toUTCString();\n    }\n\n    /**\n     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\n     * @param key\n     * @param addInstanceId\n     */\n    generateCacheKey(key: string): string {\n        const generatedKey = this.validateAndParseJson(key);\n        if (!generatedKey) {\n            if (\n                StringUtils.startsWith(key, Constants.CACHE_PREFIX) ||\n                StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)\n            ) {\n                return key;\n            }\n            return `${Constants.CACHE_PREFIX}.${this.clientId}.${key}`;\n        }\n\n        return JSON.stringify(key);\n    }\n\n    /**\n     * Create authorityKey to cache authority\n     * @param state\n     */\n    generateAuthorityKey(stateString: string): string {\n        const {\n            libraryState: { id: stateId },\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n\n        return this.generateCacheKey(\n            `${TemporaryCacheKeys.AUTHORITY}.${stateId}`\n        );\n    }\n\n    /**\n     * Create Nonce key to cache nonce\n     * @param state\n     */\n    generateNonceKey(stateString: string): string {\n        const {\n            libraryState: { id: stateId },\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n\n        return this.generateCacheKey(\n            `${TemporaryCacheKeys.NONCE_IDTOKEN}.${stateId}`\n        );\n    }\n\n    /**\n     * Creates full cache key for the request state\n     * @param stateString State string for the request\n     */\n    generateStateKey(stateString: string): string {\n        // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\n        const {\n            libraryState: { id: stateId },\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n        return this.generateCacheKey(\n            `${TemporaryCacheKeys.REQUEST_STATE}.${stateId}`\n        );\n    }\n\n    /**\n     * Gets the cached authority based on the cached state. Returns empty if no cached state found.\n     */\n    getCachedAuthority(cachedState: string): string | null {\n        const stateCacheKey = this.generateStateKey(cachedState);\n        const state = this.getTemporaryCache(stateCacheKey);\n        if (!state) {\n            return null;\n        }\n\n        const authorityCacheKey = this.generateAuthorityKey(state);\n        return this.getTemporaryCache(authorityCacheKey);\n    }\n\n    /**\n     * Updates account, authority, and state in cache\n     * @param serverAuthenticationRequest\n     * @param account\n     */\n    updateCacheEntries(\n        state: string,\n        nonce: string,\n        authorityInstance: string,\n        loginHint: string,\n        account: AccountInfo | null\n    ): void {\n        this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\");\n        // Cache the request state\n        const stateCacheKey = this.generateStateKey(state);\n        this.setTemporaryCache(stateCacheKey, state, false);\n\n        // Cache the nonce\n        const nonceCacheKey = this.generateNonceKey(state);\n        this.setTemporaryCache(nonceCacheKey, nonce, false);\n\n        // Cache authorityKey\n        const authorityCacheKey = this.generateAuthorityKey(state);\n        this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\n\n        if (account) {\n            const ccsCredential: CcsCredential = {\n                credential: account.homeAccountId,\n                type: CcsCredentialType.HOME_ACCOUNT_ID,\n            };\n            this.setTemporaryCache(\n                TemporaryCacheKeys.CCS_CREDENTIAL,\n                JSON.stringify(ccsCredential),\n                true\n            );\n        } else if (loginHint) {\n            const ccsCredential: CcsCredential = {\n                credential: loginHint,\n                type: CcsCredentialType.UPN,\n            };\n            this.setTemporaryCache(\n                TemporaryCacheKeys.CCS_CREDENTIAL,\n                JSON.stringify(ccsCredential),\n                true\n            );\n        }\n    }\n\n    /**\n     * Reset all temporary cache items\n     * @param state\n     */\n    resetRequestCache(state: string): void {\n        this.logger.trace(\"BrowserCacheManager.resetRequestCache called\");\n        // check state and remove associated cache items\n        if (state) {\n            this.temporaryCacheStorage.getKeys().forEach((key) => {\n                if (key.indexOf(state) !== -1) {\n                    this.removeTemporaryItem(key);\n                }\n            });\n\n            // delete generic interactive request parameters\n            this.removeTemporaryItem(this.generateStateKey(state));\n            this.removeTemporaryItem(this.generateNonceKey(state));\n            this.removeTemporaryItem(this.generateAuthorityKey(state));\n        }\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS)\n        );\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI)\n        );\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.URL_HASH)\n        );\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.CORRELATION_ID)\n        );\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL)\n        );\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.NATIVE_REQUEST)\n        );\n        this.setInteractionInProgress(false);\n    }\n\n    /**\n     * Removes temporary cache for the provided state\n     * @param stateString\n     */\n    cleanRequestByState(stateString: string): void {\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\");\n        // Interaction is completed - remove interaction status.\n        if (stateString) {\n            const stateKey = this.generateStateKey(stateString);\n            const cachedState = this.temporaryCacheStorage.getItem(stateKey);\n            this.logger.infoPii(\n                `BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: ${cachedState}`\n            );\n            this.resetRequestCache(cachedState || Constants.EMPTY_STRING);\n        }\n        this.clearMsalCookies();\n    }\n\n    /**\n     * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\n     * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\n     * @param interactionType\n     */\n    cleanRequestByInteractionType(interactionType: InteractionType): void {\n        this.logger.trace(\n            \"BrowserCacheManager.cleanRequestByInteractionType called\"\n        );\n        // Loop through all keys to find state key\n        this.temporaryCacheStorage.getKeys().forEach((key) => {\n            // If this key is not the state key, move on\n            if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {\n                return;\n            }\n\n            // Retrieve state value, return if not a valid value\n            const stateValue = this.temporaryCacheStorage.getItem(key);\n            if (!stateValue) {\n                return;\n            }\n            // Extract state and ensure it matches given InteractionType, then clean request cache\n            const parsedState = extractBrowserRequestState(\n                this.cryptoImpl,\n                stateValue\n            );\n            if (\n                parsedState &&\n                parsedState.interactionType === interactionType\n            ) {\n                this.logger.infoPii(\n                    `BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: ${stateValue}`\n                );\n                this.resetRequestCache(stateValue);\n            }\n        });\n        this.clearMsalCookies();\n        this.setInteractionInProgress(false);\n    }\n\n    cacheCodeRequest(authCodeRequest: CommonAuthorizationCodeRequest): void {\n        this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\n\n        const encodedValue = base64Encode(JSON.stringify(authCodeRequest));\n        this.setTemporaryCache(\n            TemporaryCacheKeys.REQUEST_PARAMS,\n            encodedValue,\n            true\n        );\n    }\n\n    /**\n     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\n     */\n    getCachedRequest(state: string): CommonAuthorizationCodeRequest {\n        this.logger.trace(\"BrowserCacheManager.getCachedRequest called\");\n        // Get token request from cache and parse as TokenExchangeParameters.\n        const encodedTokenRequest = this.getTemporaryCache(\n            TemporaryCacheKeys.REQUEST_PARAMS,\n            true\n        );\n        if (!encodedTokenRequest) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.noTokenRequestCacheError\n            );\n        }\n\n        let parsedRequest: CommonAuthorizationCodeRequest;\n        try {\n            parsedRequest = JSON.parse(base64Decode(encodedTokenRequest));\n        } catch (e) {\n            this.logger.errorPii(`Attempted to parse: ${encodedTokenRequest}`);\n            this.logger.error(\n                `Parsing cached token request threw with error: ${e}`\n            );\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.unableToParseTokenRequestCacheError\n            );\n        }\n        this.removeTemporaryItem(\n            this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS)\n        );\n\n        // Get cached authority and use if no authority is cached with request.\n        if (!parsedRequest.authority) {\n            const authorityCacheKey: string = this.generateAuthorityKey(state);\n            const cachedAuthority = this.getTemporaryCache(authorityCacheKey);\n            if (!cachedAuthority) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.noCachedAuthorityError\n                );\n            }\n            parsedRequest.authority = cachedAuthority;\n        }\n\n        return parsedRequest;\n    }\n\n    /**\n     * Gets cached native request for redirect flows\n     */\n    getCachedNativeRequest(): NativeTokenRequest | null {\n        this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest called\");\n        const cachedRequest = this.getTemporaryCache(\n            TemporaryCacheKeys.NATIVE_REQUEST,\n            true\n        );\n        if (!cachedRequest) {\n            this.logger.trace(\n                \"BrowserCacheManager.getCachedNativeRequest: No cached native request found\"\n            );\n            return null;\n        }\n\n        const parsedRequest = this.validateAndParseJson(\n            cachedRequest\n        ) as NativeTokenRequest;\n        if (!parsedRequest) {\n            this.logger.error(\n                \"BrowserCacheManager.getCachedNativeRequest: Unable to parse native request\"\n            );\n            return null;\n        }\n\n        return parsedRequest;\n    }\n\n    isInteractionInProgress(matchClientId?: boolean): boolean {\n        const clientId = this.getInteractionInProgress();\n\n        if (matchClientId) {\n            return clientId === this.clientId;\n        } else {\n            return !!clientId;\n        }\n    }\n\n    getInteractionInProgress(): string | null {\n        const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n        return this.getTemporaryCache(key, false);\n    }\n\n    setInteractionInProgress(inProgress: boolean): void {\n        // Ensure we don't overwrite interaction in progress for a different clientId\n        const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n        if (inProgress) {\n            if (this.getInteractionInProgress()) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.interactionInProgress\n                );\n            } else {\n                // No interaction is in progress\n                this.setTemporaryCache(key, this.clientId, false);\n            }\n        } else if (\n            !inProgress &&\n            this.getInteractionInProgress() === this.clientId\n        ) {\n            this.removeTemporaryItem(key);\n        }\n    }\n\n    /**\n     * Returns username retrieved from ADAL or MSAL v1 idToken\n     * @deprecated\n     */\n    getLegacyLoginHint(): string | null {\n        // Only check for adal/msal token if no SSO params are being used\n        const adalIdTokenString = this.getTemporaryCache(\n            PersistentCacheKeys.ADAL_ID_TOKEN\n        );\n        if (adalIdTokenString) {\n            this.browserStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN);\n            this.logger.verbose(\"Cached ADAL id token retrieved.\");\n        }\n\n        // Check for cached MSAL v1 id token\n        const msalIdTokenString = this.getTemporaryCache(\n            PersistentCacheKeys.ID_TOKEN,\n            true\n        );\n        if (msalIdTokenString) {\n            this.browserStorage.removeItem(\n                this.generateCacheKey(PersistentCacheKeys.ID_TOKEN)\n            );\n            this.logger.verbose(\"Cached MSAL.js v1 id token retrieved\");\n        }\n\n        const cachedIdTokenString = msalIdTokenString || adalIdTokenString;\n        if (cachedIdTokenString) {\n            const idTokenClaims = AuthToken.extractTokenClaims(\n                cachedIdTokenString,\n                base64Decode\n            );\n            if (idTokenClaims.preferred_username) {\n                this.logger.verbose(\n                    \"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint\"\n                );\n                return idTokenClaims.preferred_username;\n            } else if (idTokenClaims.upn) {\n                this.logger.verbose(\n                    \"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint\"\n                );\n                return idTokenClaims.upn;\n            } else {\n                this.logger.verbose(\n                    \"No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.\"\n                );\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Updates a credential's cache key if the current cache key is outdated\n     */\n    updateCredentialCacheKey(\n        currentCacheKey: string,\n        credential: ValidCredentialType\n    ): string {\n        const updatedCacheKey = CacheHelpers.generateCredentialKey(credential);\n\n        if (currentCacheKey !== updatedCacheKey) {\n            const cacheItem = this.getItem(currentCacheKey);\n            if (cacheItem) {\n                this.browserStorage.removeItem(currentCacheKey);\n                this.setItem(updatedCacheKey, cacheItem);\n                this.logger.verbose(\n                    `Updated an outdated ${credential.credentialType} cache key`\n                );\n                return updatedCacheKey;\n            } else {\n                this.logger.error(\n                    `Attempted to update an outdated ${credential.credentialType} cache key but no item matching the outdated key was found in storage`\n                );\n            }\n        }\n\n        return currentCacheKey;\n    }\n\n    /**\n     * Builds credential entities from AuthenticationResult object and saves the resulting credentials to the cache\n     * @param result\n     * @param request\n     */\n    async hydrateCache(\n        result: AuthenticationResult,\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void> {\n        const idTokenEntity = CacheHelpers.createIdTokenEntity(\n            result.account?.homeAccountId,\n            result.account?.environment,\n            result.idToken,\n            this.clientId,\n            result.tenantId\n        );\n\n        let claimsHash;\n        if (request.claims) {\n            claimsHash = await this.cryptoImpl.hashString(request.claims);\n        }\n        const accessTokenEntity = CacheHelpers.createAccessTokenEntity(\n            result.account?.homeAccountId,\n            result.account.environment,\n            result.accessToken,\n            this.clientId,\n            result.tenantId,\n            result.scopes.join(\" \"),\n            result.expiresOn?.getTime() || 0,\n            result.extExpiresOn?.getTime() || 0,\n            base64Decode,\n            undefined, // refreshOn\n            result.tokenType as AuthenticationScheme,\n            undefined, // userAssertionHash\n            request.sshKid,\n            request.claims,\n            claimsHash\n        );\n\n        const cacheRecord = new CacheRecord(\n            undefined,\n            idTokenEntity,\n            accessTokenEntity\n        );\n        return this.saveCacheRecord(cacheRecord);\n    }\n\n    /**\n     * saves a cache record\n     * @param cacheRecord {CacheRecord}\n     * @param storeInCache {?StoreInCache}\n     * @param correlationId {?string} correlation id\n     */\n    async saveCacheRecord(\n        cacheRecord: CacheRecord,\n        storeInCache?: StoreInCache,\n        correlationId?: string\n    ): Promise<void> {\n        try {\n            await super.saveCacheRecord(\n                cacheRecord,\n                storeInCache,\n                correlationId\n            );\n        } catch (e) {\n            if (\n                e instanceof CacheError &&\n                this.performanceClient &&\n                correlationId\n            ) {\n                try {\n                    const tokenKeys = this.getTokenKeys();\n\n                    this.performanceClient.addFields(\n                        {\n                            cacheRtCount: tokenKeys.refreshToken.length,\n                            cacheIdCount: tokenKeys.idToken.length,\n                            cacheAtCount: tokenKeys.accessToken.length,\n                        },\n                        correlationId\n                    );\n                } catch (e) {}\n            }\n\n            throw e;\n        }\n    }\n}\n\nexport const DEFAULT_BROWSER_CACHE_MANAGER = (\n    clientId: string,\n    logger: Logger\n): BrowserCacheManager => {\n    const cacheOptions: Required<CacheOptions> = {\n        cacheLocation: BrowserCacheLocation.MemoryStorage,\n        temporaryCacheLocation: BrowserCacheLocation.MemoryStorage,\n        storeAuthStateInCookie: false,\n        secureCookies: false,\n        cacheMigrationEnabled: false,\n        claimsBasedCachingEnabled: false,\n    };\n    return new BrowserCacheManager(\n        clientId,\n        cacheOptions,\n        DEFAULT_CRYPTO_IMPLEMENTATION,\n        logger\n    );\n};\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { UrlString } from \"@azure/msal-common\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { BrowserConstants, BrowserCacheLocation } from \"./BrowserConstants\";\nimport * as BrowserCrypto from \"../crypto/BrowserCrypto\";\nimport {\n    BrowserConfigurationAuthErrorCodes,\n    createBrowserConfigurationAuthError,\n} from \"../error/BrowserConfigurationAuthError\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\n\n/**\n * Clears hash from window url.\n */\nexport function clearHash(contentWindow: Window): void {\n    // Office.js sets history.replaceState to null\n    contentWindow.location.hash = \"\";\n    if (typeof contentWindow.history.replaceState === \"function\") {\n        // Full removes \"#\" from url\n        contentWindow.history.replaceState(\n            null,\n            \"\",\n            `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`\n        );\n    }\n}\n\n/**\n * Replaces current hash with hash from provided url\n */\nexport function replaceHash(url: string): void {\n    const urlParts = url.split(\"#\");\n    urlParts.shift(); // Remove part before the hash\n    window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : \"\";\n}\n\n/**\n * Returns boolean of whether the current window is in an iframe or not.\n */\nexport function isInIframe(): boolean {\n    return window.parent !== window;\n}\n\n/**\n * Returns boolean of whether or not the current window is a popup opened by msal\n */\nexport function isInPopup(): boolean {\n    return (\n        typeof window !== \"undefined\" &&\n        !!window.opener &&\n        window.opener !== window &&\n        typeof window.name === \"string\" &&\n        window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0\n    );\n}\n\n// #endregion\n\n/**\n * Returns current window URL as redirect uri\n */\nexport function getCurrentUri(): string {\n    return window.location.href.split(\"?\")[0].split(\"#\")[0];\n}\n\n/**\n * Gets the homepage url for the current window location.\n */\nexport function getHomepage(): string {\n    const currentUrl = new UrlString(window.location.href);\n    const urlComponents = currentUrl.getUrlComponents();\n    return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\n}\n\n/**\n * Throws error if we have completed an auth and are\n * attempting another auth request inside an iframe.\n */\nexport function blockReloadInHiddenIframes(): void {\n    const isResponseHash = UrlString.hashContainsKnownProperties(\n        window.location.hash\n    );\n    // return an error if called from the hidden iframe created by the msal js silent calls\n    if (isResponseHash && isInIframe()) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.blockIframeReload);\n    }\n}\n\n/**\n * Block redirect operations in iframes unless explicitly allowed\n * @param interactionType Interaction type for the request\n * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\n */\nexport function blockRedirectInIframe(allowRedirectInIframe: boolean): void {\n    if (isInIframe() && !allowRedirectInIframe) {\n        // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n        throw createBrowserAuthError(BrowserAuthErrorCodes.redirectInIframe);\n    }\n}\n\n/**\n * Block redirectUri loaded in popup from calling AcquireToken APIs\n */\nexport function blockAcquireTokenInPopups(): void {\n    // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n    if (isInPopup()) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.blockNestedPopups);\n    }\n}\n\n/**\n * Throws error if token requests are made in non-browser environment\n * @param isBrowserEnvironment Flag indicating if environment is a browser.\n */\nexport function blockNonBrowserEnvironment(): void {\n    if (typeof window === \"undefined\") {\n        throw createBrowserAuthError(\n            BrowserAuthErrorCodes.nonBrowserEnvironment\n        );\n    }\n}\n\n/**\n * Throws error if initialize hasn't been called\n * @param initialized\n */\nexport function blockAPICallsBeforeInitialize(initialized: boolean): void {\n    if (!initialized) {\n        throw createBrowserAuthError(\n            BrowserAuthErrorCodes.uninitializedPublicClientApplication\n        );\n    }\n}\n\n/**\n * Helper to validate app environment before making an auth request\n * @param initialized\n */\nexport function preflightCheck(initialized: boolean): void {\n    // Block request if not in browser environment\n    blockNonBrowserEnvironment();\n\n    // Block auth requests inside a hidden iframe\n    blockReloadInHiddenIframes();\n\n    // Block redirectUri opened in a popup from calling MSAL APIs\n    blockAcquireTokenInPopups();\n\n    // Block token acquisition before initialize has been called\n    blockAPICallsBeforeInitialize(initialized);\n}\n\n/**\n * Helper to validate app enviornment before making redirect request\n * @param initialized\n * @param config\n */\nexport function redirectPreflightCheck(\n    initialized: boolean,\n    config: BrowserConfiguration\n): void {\n    preflightCheck(initialized);\n    blockRedirectInIframe(config.system.allowRedirectInIframe);\n    // Block redirects if memory storage is enabled but storeAuthStateInCookie is not\n    if (\n        config.cache.cacheLocation === BrowserCacheLocation.MemoryStorage &&\n        !config.cache.storeAuthStateInCookie\n    ) {\n        throw createBrowserConfigurationAuthError(\n            BrowserConfigurationAuthErrorCodes.inMemRedirectUnavailable\n        );\n    }\n}\n\n/**\n * Adds a preconnect link element to the header which begins DNS resolution and SSL connection in anticipation of the /token request\n * @param loginDomain Authority domain, including https protocol e.g. https://login.microsoftonline.com\n * @returns\n */\nexport function preconnect(authority: string): void {\n    const link = document.createElement(\"link\");\n    link.rel = \"preconnect\";\n    link.href = new URL(authority).origin;\n    link.crossOrigin = \"anonymous\";\n    document.head.appendChild(link);\n\n    // The browser will close connection if not used within a few seconds, remove element from the header after 10s\n    window.setTimeout(() => {\n        try {\n            document.head.removeChild(link);\n        } catch {}\n    }, 10000); // 10s Timeout\n}\n\n/**\n * Wrapper function that creates a UUID v7 from the current timestamp.\n * @returns {string}\n */\nexport function createGuid(): string {\n    return BrowserCrypto.createNewGuid();\n}\n", "/* eslint-disable header/header */\nexport const name = \"@azure/msal-browser\";\nexport const version = \"3.13.0\";\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ICrypto,\n    INetworkModule,\n    Logger,\n    AccountInfo,\n    AccountEntity,\n    UrlString,\n    ServerTelemetryManager,\n    ServerTelemetryRequest,\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n    Authority,\n    AuthorityOptions,\n    AuthorityFactory,\n    IPerformanceClient,\n    PerformanceEvents,\n    AzureCloudOptions,\n    invokeAsync,\n} from \"@azure/msal-common\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { version } from \"../packageMetadata\";\nimport { BrowserConstants } from \"../utils/BrowserConstants\";\nimport * as BrowserUtils from \"../utils/BrowserUtils\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\nimport { createNewGuid } from \"../crypto/BrowserCrypto\";\n\nexport abstract class BaseInteractionClient {\n    protected config: BrowserConfiguration;\n    protected browserStorage: BrowserCacheManager;\n    protected browserCrypto: ICrypto;\n    protected networkClient: INetworkModule;\n    protected logger: Logger;\n    protected eventHandler: EventHandler;\n    protected navigationClient: INavigationClient;\n    protected nativeMessageHandler: NativeMessageHandler | undefined;\n    protected correlationId: string;\n    protected performanceClient: IPerformanceClient;\n\n    constructor(\n        config: BrowserConfiguration,\n        storageImpl: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        performanceClient: IPerformanceClient,\n        nativeMessageHandler?: NativeMessageHandler,\n        correlationId?: string\n    ) {\n        this.config = config;\n        this.browserStorage = storageImpl;\n        this.browserCrypto = browserCrypto;\n        this.networkClient = this.config.system.networkClient;\n        this.eventHandler = eventHandler;\n        this.navigationClient = navigationClient;\n        this.nativeMessageHandler = nativeMessageHandler;\n        this.correlationId = correlationId || createNewGuid();\n        this.logger = logger.clone(\n            BrowserConstants.MSAL_SKU,\n            version,\n            this.correlationId\n        );\n        this.performanceClient = performanceClient;\n    }\n\n    abstract acquireToken(\n        request: RedirectRequest | PopupRequest | SsoSilentRequest\n    ): Promise<AuthenticationResult | void>;\n\n    abstract logout(\n        request: EndSessionRequest | ClearCacheRequest | undefined\n    ): Promise<void>;\n\n    protected async clearCacheOnLogout(\n        account?: AccountInfo | null\n    ): Promise<void> {\n        if (account) {\n            if (\n                AccountEntity.accountInfoIsEqual(\n                    account,\n                    this.browserStorage.getActiveAccount(),\n                    false\n                )\n            ) {\n                this.logger.verbose(\"Setting active account to null\");\n                this.browserStorage.setActiveAccount(null);\n            }\n            // Clear given account.\n            try {\n                await this.browserStorage.removeAccount(\n                    AccountEntity.generateAccountCacheKey(account)\n                );\n                this.logger.verbose(\n                    \"Cleared cache items belonging to the account provided in the logout request.\"\n                );\n            } catch (error) {\n                this.logger.error(\n                    \"Account provided in logout request was not found. Local cache unchanged.\"\n                );\n            }\n        } else {\n            try {\n                this.logger.verbose(\n                    \"No account provided in logout request, clearing all cache items.\",\n                    this.correlationId\n                );\n                // Clear all accounts and tokens\n                await this.browserStorage.clear();\n                // Clear any stray keys from IndexedDB\n                await this.browserCrypto.clearKeystore();\n            } catch (e) {\n                this.logger.error(\n                    \"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\"\n                );\n            }\n        }\n    }\n\n    /**\n     *\n     * Use to get the redirect uri configured in MSAL or null.\n     * @param requestRedirectUri\n     * @returns Redirect URL\n     *\n     */\n    getRedirectUri(requestRedirectUri?: string): string {\n        this.logger.verbose(\"getRedirectUri called\");\n        const redirectUri =\n            requestRedirectUri ||\n            this.config.auth.redirectUri ||\n            BrowserUtils.getCurrentUri();\n        return UrlString.getAbsoluteUrl(\n            redirectUri,\n            BrowserUtils.getCurrentUri()\n        );\n    }\n\n    /**\n     *\n     * @param apiId\n     * @param correlationId\n     * @param forceRefresh\n     */\n    protected initializeServerTelemetryManager(\n        apiId: number,\n        forceRefresh?: boolean\n    ): ServerTelemetryManager {\n        this.logger.verbose(\"initializeServerTelemetryManager called\");\n        const telemetryPayload: ServerTelemetryRequest = {\n            clientId: this.config.auth.clientId,\n            correlationId: this.correlationId,\n            apiId: apiId,\n            forceRefresh: forceRefresh || false,\n            wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\n            wrapperVer: this.browserStorage.getWrapperMetadata()[1],\n        };\n\n        return new ServerTelemetryManager(\n            telemetryPayload,\n            this.browserStorage\n        );\n    }\n\n    /**\n     * Used to get a discovered version of the default authority.\n     * @param requestAuthority\n     * @param requestAzureCloudOptions\n     * @param account\n     */\n    protected async getDiscoveredAuthority(\n        requestAuthority?: string,\n        requestAzureCloudOptions?: AzureCloudOptions,\n        account?: AccountInfo\n    ): Promise<Authority> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\n            this.correlationId\n        );\n        const authorityOptions: AuthorityOptions = {\n            protocolMode: this.config.auth.protocolMode,\n            OIDCOptions: this.config.auth.OIDCOptions,\n            knownAuthorities: this.config.auth.knownAuthorities,\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n            authorityMetadata: this.config.auth.authorityMetadata,\n            skipAuthorityMetadataCache:\n                this.config.auth.skipAuthorityMetadataCache,\n        };\n\n        // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority\n        const userAuthority = requestAuthority\n            ? requestAuthority\n            : this.config.auth.authority;\n\n        // fall back to the authority from config\n        const builtAuthority = Authority.generateAuthority(\n            userAuthority,\n            requestAzureCloudOptions || this.config.auth.azureCloudOptions\n        );\n        const discoveredAuthority = await invokeAsync(\n            AuthorityFactory.createDiscoveredInstance,\n            PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(\n            builtAuthority,\n            this.config.system.networkClient,\n            this.browserStorage,\n            authorityOptions,\n            this.logger,\n            this.correlationId,\n            this.performanceClient\n        );\n\n        if (account && !discoveredAuthority.isAlias(account.environment)) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.authorityMismatch\n            );\n        }\n\n        return discoveredAuthority;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    IPerformanceClient,\n    Logger,\n    PerformanceEvents,\n    PkceCodes,\n    invoke,\n    invokeAsync,\n} from \"@azure/msal-common\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { urlEncodeArr } from \"../encode/Base64Encode\";\nimport { getRandomValues, sha256Digest } from \"./BrowserCrypto\";\n\n// Constant byte array length\nconst RANDOM_BYTE_ARR_LENGTH = 32;\n\n/**\n * This file defines APIs to generate PKCE codes and code verifiers.\n */\n\n/**\n * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\n */\nexport async function generatePkceCodes(\n    performanceClient: IPerformanceClient,\n    logger: Logger,\n    correlationId: string\n): Promise<PkceCodes> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.GeneratePkceCodes,\n        correlationId\n    );\n    const codeVerifier = invoke(\n        generateCodeVerifier,\n        PerformanceEvents.GenerateCodeVerifier,\n        logger,\n        performanceClient,\n        correlationId\n    )(performanceClient, logger, correlationId);\n    const codeChallenge = await invokeAsync(\n        generateCodeChallengeFromVerifier,\n        PerformanceEvents.GenerateCodeChallengeFromVerifier,\n        logger,\n        performanceClient,\n        correlationId\n    )(codeVerifier, performanceClient, logger, correlationId);\n    return {\n        verifier: codeVerifier,\n        challenge: codeChallenge,\n    };\n}\n\n/**\n * Generates a random 32 byte buffer and returns the base64\n * encoded string to be used as a PKCE Code Verifier\n */\nfunction generateCodeVerifier(\n    performanceClient: IPerformanceClient,\n    logger: Logger,\n    correlationId: string\n): string {\n    try {\n        // Generate random values as utf-8\n        const buffer: Uint8Array = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n        invoke(\n            getRandomValues,\n            PerformanceEvents.GetRandomValues,\n            logger,\n            performanceClient,\n            correlationId\n        )(buffer);\n        // encode verifier as base64\n        const pkceCodeVerifierB64: string = urlEncodeArr(buffer);\n        return pkceCodeVerifierB64;\n    } catch (e) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.pkceNotCreated);\n    }\n}\n\n/**\n * Creates a base64 encoded PKCE Code Challenge string from the\n * hash created from the PKCE Code Verifier supplied\n */\nasync function generateCodeChallengeFromVerifier(\n    pkceCodeVerifier: string,\n    performanceClient: IPerformanceClient,\n    logger: Logger,\n    correlationId: string\n): Promise<string> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.GenerateCodeChallengeFromVerifier,\n        correlationId\n    );\n    try {\n        // hashed verifier\n        const pkceHashedCodeVerifier = await invokeAsync(\n            sha256Digest,\n            PerformanceEvents.Sha256Digest,\n            logger,\n            performanceClient,\n            correlationId\n        )(pkceCodeVerifier, performanceClient, correlationId);\n        // encode hash as base64\n        return urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier));\n    } catch (e) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.pkceNotCreated);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AccountInfo,\n    AuthenticationScheme,\n    BaseAuthRequest,\n    ClientConfigurationErrorCodes,\n    CommonSilentFlowRequest,\n    IPerformanceClient,\n    Logger,\n    PerformanceEvents,\n    StringUtils,\n    createClientConfigurationError,\n    invokeAsync,\n} from \"@azure/msal-common\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { SilentRequest } from \"./SilentRequest\";\nimport { hashString } from \"../crypto/BrowserCrypto\";\n\n/**\n * Initializer function for all request APIs\n * @param request\n */\nexport async function initializeBaseRequest(\n    request: Partial<BaseAuthRequest> & { correlationId: string },\n    config: BrowserConfiguration,\n    performanceClient: IPerformanceClient,\n    logger: Logger\n): Promise<BaseAuthRequest> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.InitializeBaseRequest,\n        request.correlationId\n    );\n    const authority = request.authority || config.auth.authority;\n\n    const scopes = [...((request && request.scopes) || [])];\n\n    const validatedRequest: BaseAuthRequest = {\n        ...request,\n        correlationId: request.correlationId,\n        authority,\n        scopes,\n    };\n\n    // Set authenticationScheme to BEARER if not explicitly set in the request\n    if (!validatedRequest.authenticationScheme) {\n        validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\n        logger.verbose(\n            'Authentication Scheme wasn\\'t explicitly set in request, defaulting to \"Bearer\" request'\n        );\n    } else {\n        if (\n            validatedRequest.authenticationScheme === AuthenticationScheme.SSH\n        ) {\n            if (!request.sshJwk) {\n                throw createClientConfigurationError(\n                    ClientConfigurationErrorCodes.missingSshJwk\n                );\n            }\n            if (!request.sshKid) {\n                throw createClientConfigurationError(\n                    ClientConfigurationErrorCodes.missingSshKid\n                );\n            }\n        }\n        logger.verbose(\n            `Authentication Scheme set to \"${validatedRequest.authenticationScheme}\" as configured in Auth request`\n        );\n    }\n\n    // Set requested claims hash if claims-based caching is enabled and claims were requested\n    if (\n        config.cache.claimsBasedCachingEnabled &&\n        request.claims &&\n        // Checks for empty stringified object \"{}\" which doesn't qualify as requested claims\n        !StringUtils.isEmptyObj(request.claims)\n    ) {\n        validatedRequest.requestedClaimsHash = await hashString(request.claims);\n    }\n\n    return validatedRequest;\n}\n\nexport async function initializeSilentRequest(\n    request: SilentRequest & { correlationId: string },\n    account: AccountInfo,\n    config: BrowserConfiguration,\n    performanceClient: IPerformanceClient,\n    logger: Logger\n): Promise<CommonSilentFlowRequest> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.InitializeSilentRequest,\n        request.correlationId\n    );\n\n    const baseRequest = await invokeAsync(\n        initializeBaseRequest,\n        PerformanceEvents.InitializeBaseRequest,\n        logger,\n        performanceClient,\n        request.correlationId\n    )(request, config, performanceClient, logger);\n    return {\n        ...request,\n        ...baseRequest,\n        account: account,\n        forceRefresh: request.forceRefresh || false,\n    };\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ServerTelemetryManager,\n    CommonAuthorizationCodeRequest,\n    Constants,\n    AuthorizationCodeClient,\n    ClientConfiguration,\n    UrlString,\n    CommonEndSessionRequest,\n    ProtocolUtils,\n    ResponseMode,\n    IdTokenClaims,\n    AccountInfo,\n    AzureCloudOptions,\n    PerformanceEvents,\n    invokeAsync,\n    BaseAuthRequest,\n} from \"@azure/msal-common\";\nimport { BaseInteractionClient } from \"./BaseInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConstants, InteractionType } from \"../utils/BrowserConstants\";\nimport { version } from \"../packageMetadata\";\nimport { BrowserStateObject } from \"../utils/BrowserProtocolUtils\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport * as BrowserUtils from \"../utils/BrowserUtils\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { generatePkceCodes } from \"../crypto/PkceGenerator\";\nimport { createNewGuid } from \"../crypto/BrowserCrypto\";\nimport { initializeBaseRequest } from \"../request/RequestHelpers\";\n\n/**\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\n */\nexport abstract class StandardInteractionClient extends BaseInteractionClient {\n    /**\n     * Generates an auth code request tied to the url request.\n     * @param request\n     */\n    protected async initializeAuthorizationCodeRequest(\n        request: AuthorizationUrlRequest\n    ): Promise<CommonAuthorizationCodeRequest> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\n            this.correlationId\n        );\n        const generatedPkceParams = await invokeAsync(\n            generatePkceCodes,\n            PerformanceEvents.GeneratePkceCodes,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(this.performanceClient, this.logger, this.correlationId);\n\n        const authCodeRequest: CommonAuthorizationCodeRequest = {\n            ...request,\n            redirectUri: request.redirectUri,\n            code: Constants.EMPTY_STRING,\n            codeVerifier: generatedPkceParams.verifier,\n        };\n\n        request.codeChallenge = generatedPkceParams.challenge;\n        request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\n\n        return authCodeRequest;\n    }\n\n    /**\n     * Initializer for the logout request.\n     * @param logoutRequest\n     */\n    protected initializeLogoutRequest(\n        logoutRequest?: EndSessionRequest\n    ): CommonEndSessionRequest {\n        this.logger.verbose(\n            \"initializeLogoutRequest called\",\n            logoutRequest?.correlationId\n        );\n\n        const validLogoutRequest: CommonEndSessionRequest = {\n            correlationId: this.correlationId || createNewGuid(),\n            ...logoutRequest,\n        };\n\n        /**\n         * Set logout_hint to be login_hint from ID Token Claims if present\n         * and logoutHint attribute wasn't manually set in logout request\n         */\n        if (logoutRequest) {\n            // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\n            if (!logoutRequest.logoutHint) {\n                if (logoutRequest.account) {\n                    const logoutHint = this.getLogoutHintFromIdTokenClaims(\n                        logoutRequest.account\n                    );\n                    if (logoutHint) {\n                        this.logger.verbose(\n                            \"Setting logoutHint to login_hint ID Token Claim value for the account provided\"\n                        );\n                        validLogoutRequest.logoutHint = logoutHint;\n                    }\n                } else {\n                    this.logger.verbose(\n                        \"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\"\n                    );\n                }\n            } else {\n                this.logger.verbose(\n                    \"logoutHint has already been set in logoutRequest\"\n                );\n            }\n        } else {\n            this.logger.verbose(\n                \"logoutHint will not be set since no logout request was configured\"\n            );\n        }\n\n        /*\n         * Only set redirect uri if logout request isn't provided or the set uri isn't null.\n         * Otherwise, use passed uri, config, or current page.\n         */\n        if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n            if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n                this.logger.verbose(\n                    \"Setting postLogoutRedirectUri to uri set on logout request\",\n                    validLogoutRequest.correlationId\n                );\n                validLogoutRequest.postLogoutRedirectUri =\n                    UrlString.getAbsoluteUrl(\n                        logoutRequest.postLogoutRedirectUri,\n                        BrowserUtils.getCurrentUri()\n                    );\n            } else if (this.config.auth.postLogoutRedirectUri === null) {\n                this.logger.verbose(\n                    \"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\",\n                    validLogoutRequest.correlationId\n                );\n            } else if (this.config.auth.postLogoutRedirectUri) {\n                this.logger.verbose(\n                    \"Setting postLogoutRedirectUri to configured uri\",\n                    validLogoutRequest.correlationId\n                );\n                validLogoutRequest.postLogoutRedirectUri =\n                    UrlString.getAbsoluteUrl(\n                        this.config.auth.postLogoutRedirectUri,\n                        BrowserUtils.getCurrentUri()\n                    );\n            } else {\n                this.logger.verbose(\n                    \"Setting postLogoutRedirectUri to current page\",\n                    validLogoutRequest.correlationId\n                );\n                validLogoutRequest.postLogoutRedirectUri =\n                    UrlString.getAbsoluteUrl(\n                        BrowserUtils.getCurrentUri(),\n                        BrowserUtils.getCurrentUri()\n                    );\n            }\n        } else {\n            this.logger.verbose(\n                \"postLogoutRedirectUri passed as null, not setting post logout redirect uri\",\n                validLogoutRequest.correlationId\n            );\n        }\n\n        return validLogoutRequest;\n    }\n\n    /**\n     * Parses login_hint ID Token Claim out of AccountInfo object to be used as\n     * logout_hint in end session request.\n     * @param account\n     */\n    protected getLogoutHintFromIdTokenClaims(\n        account: AccountInfo\n    ): string | null {\n        const idTokenClaims: IdTokenClaims | undefined = account.idTokenClaims;\n        if (idTokenClaims) {\n            if (idTokenClaims.login_hint) {\n                return idTokenClaims.login_hint;\n            } else {\n                this.logger.verbose(\n                    \"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\"\n                );\n            }\n        } else {\n            this.logger.verbose(\n                \"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\"\n            );\n        }\n\n        return null;\n    }\n\n    /**\n     * Creates an Authorization Code Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    protected async createAuthCodeClient(\n        serverTelemetryManager: ServerTelemetryManager,\n        authorityUrl?: string,\n        requestAzureCloudOptions?: AzureCloudOptions,\n        account?: AccountInfo\n    ): Promise<AuthorizationCodeClient> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n            this.correlationId\n        );\n        // Create auth module.\n        const clientConfig = await invokeAsync(\n            this.getClientConfiguration.bind(this),\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(\n            serverTelemetryManager,\n            authorityUrl,\n            requestAzureCloudOptions,\n            account\n        );\n        return new AuthorizationCodeClient(\n            clientConfig,\n            this.performanceClient\n        );\n    }\n\n    /**\n     * Creates a Client Configuration object with the given request authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param requestAuthority\n     * @param requestCorrelationId\n     */\n    protected async getClientConfiguration(\n        serverTelemetryManager: ServerTelemetryManager,\n        requestAuthority?: string,\n        requestAzureCloudOptions?: AzureCloudOptions,\n        account?: AccountInfo\n    ): Promise<ClientConfiguration> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            this.correlationId\n        );\n        const discoveredAuthority = await invokeAsync(\n            this.getDiscoveredAuthority.bind(this),\n            PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(requestAuthority, requestAzureCloudOptions, account);\n        const logger = this.config.system.loggerOptions;\n\n        return {\n            authOptions: {\n                clientId: this.config.auth.clientId,\n                authority: discoveredAuthority,\n                clientCapabilities: this.config.auth.clientCapabilities,\n            },\n            systemOptions: {\n                tokenRenewalOffsetSeconds:\n                    this.config.system.tokenRenewalOffsetSeconds,\n                preventCorsPreflight: true,\n            },\n            loggerOptions: {\n                loggerCallback: logger.loggerCallback,\n                piiLoggingEnabled: logger.piiLoggingEnabled,\n                logLevel: logger.logLevel,\n                correlationId: this.correlationId,\n            },\n            cacheOptions: {\n                claimsBasedCachingEnabled:\n                    this.config.cache.claimsBasedCachingEnabled,\n            },\n            cryptoInterface: this.browserCrypto,\n            networkInterface: this.networkClient,\n            storageInterface: this.browserStorage,\n            serverTelemetryManager: serverTelemetryManager,\n            libraryInfo: {\n                sku: BrowserConstants.MSAL_SKU,\n                version: version,\n                cpu: Constants.EMPTY_STRING,\n                os: Constants.EMPTY_STRING,\n            },\n            telemetry: this.config.telemetry,\n        };\n    }\n\n    /**\n     * Helper to initialize required request parameters for interactive APIs and ssoSilent()\n     * @param request\n     * @param interactionType\n     */\n    protected async initializeAuthorizationRequest(\n        request: RedirectRequest | PopupRequest | SsoSilentRequest,\n        interactionType: InteractionType\n    ): Promise<AuthorizationUrlRequest> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            this.correlationId\n        );\n\n        const redirectUri = this.getRedirectUri(request.redirectUri);\n        const browserState: BrowserStateObject = {\n            interactionType: interactionType,\n        };\n        const state = ProtocolUtils.setRequestState(\n            this.browserCrypto,\n            (request && request.state) || Constants.EMPTY_STRING,\n            browserState\n        );\n\n        const baseRequest: BaseAuthRequest = await invokeAsync(\n            initializeBaseRequest,\n            PerformanceEvents.InitializeBaseRequest,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(\n            { ...request, correlationId: this.correlationId },\n            this.config,\n            this.performanceClient,\n            this.logger\n        );\n\n        const validatedRequest: AuthorizationUrlRequest = {\n            ...baseRequest,\n            redirectUri: redirectUri,\n            state: state,\n            nonce: request.nonce || createNewGuid(),\n            responseMode: this.config.auth.OIDCOptions\n                .serverResponseType as ResponseMode,\n        };\n\n        const account =\n            request.account || this.browserStorage.getActiveAccount();\n        if (account) {\n            this.logger.verbose(\n                \"Setting validated request account\",\n                this.correlationId\n            );\n            this.logger.verbosePii(\n                `Setting validated request account: ${account.homeAccountId}`,\n                this.correlationId\n            );\n            validatedRequest.account = account;\n        }\n\n        // Check for ADAL/MSAL v1 SSO\n        if (!validatedRequest.loginHint && !account) {\n            const legacyLoginHint = this.browserStorage.getLegacyLoginHint();\n            if (legacyLoginHint) {\n                validatedRequest.loginHint = legacyLoginHint;\n            }\n        }\n\n        return validatedRequest;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const contentError = \"ContentError\";\nexport const userSwitch = \"user_switch\";\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n// Status Codes that can be thrown by WAM\nexport const USER_INTERACTION_REQUIRED = \"USER_INTERACTION_REQUIRED\";\nexport const USER_CANCEL = \"USER_CANCEL\";\nexport const NO_NETWORK = \"NO_NETWORK\";\nexport const TRANSIENT_ERROR = \"TRANSIENT_ERROR\";\nexport const PERSISTENT_ERROR = \"PERSISTENT_ERROR\";\nexport const DISABLED = \"DISABLED\";\nexport const ACCOUNT_UNAVAILABLE = \"ACCOUNT_UNAVAILABLE\";\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AuthError,\n    InteractionRequiredAuthError,\n    InteractionRequiredAuthErrorCodes,\n    createInteractionRequiredAuthError,\n} from \"@azure/msal-common\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"./BrowserAuthError\";\n\nimport * as NativeAuthErrorCodes from \"./NativeAuthErrorCodes\";\nimport * as NativeStatusCodes from \"../broker/nativeBroker/NativeStatusCodes\";\nexport { NativeAuthErrorCodes };\n\nexport type OSError = {\n    error?: number;\n    protocol_error?: string;\n    properties?: object;\n    status?: string;\n    retryable?: boolean;\n};\n\nconst INVALID_METHOD_ERROR = -2147186943;\n\nexport const NativeAuthErrorMessages = {\n    [NativeAuthErrorCodes.userSwitch]:\n        \"User attempted to switch accounts in the native broker, which is not allowed. All new accounts must sign-in through the standard web flow first, please try again.\",\n};\n\nexport class NativeAuthError extends AuthError {\n    ext: OSError | undefined;\n\n    constructor(errorCode: string, description?: string, ext?: OSError) {\n        super(errorCode, description);\n\n        Object.setPrototypeOf(this, NativeAuthError.prototype);\n        this.name = \"NativeAuthError\";\n        this.ext = ext;\n    }\n}\n\n/**\n * These errors should result in a fallback to the 'standard' browser based auth flow.\n */\nexport function isFatalNativeAuthError(error: NativeAuthError): boolean {\n    if (\n        error.ext &&\n        error.ext.status &&\n        (error.ext.status === NativeStatusCodes.PERSISTENT_ERROR ||\n            error.ext.status === NativeStatusCodes.DISABLED)\n    ) {\n        return true;\n    }\n\n    if (\n        error.ext &&\n        error.ext.error &&\n        error.ext.error === INVALID_METHOD_ERROR\n    ) {\n        return true;\n    }\n\n    switch (error.errorCode) {\n        case NativeAuthErrorCodes.contentError:\n            return true;\n        default:\n            return false;\n    }\n}\n\n/**\n * Create the appropriate error object based on the WAM status code.\n * @param code\n * @param description\n * @param ext\n * @returns\n */\nexport function createNativeAuthError(\n    code: string,\n    description?: string,\n    ext?: OSError\n): AuthError {\n    if (ext && ext.status) {\n        switch (ext.status) {\n            case NativeStatusCodes.ACCOUNT_UNAVAILABLE:\n                return createInteractionRequiredAuthError(\n                    InteractionRequiredAuthErrorCodes.nativeAccountUnavailable\n                );\n            case NativeStatusCodes.USER_INTERACTION_REQUIRED:\n                return new InteractionRequiredAuthError(code, description);\n            case NativeStatusCodes.USER_CANCEL:\n                return createBrowserAuthError(\n                    BrowserAuthErrorCodes.userCancelled\n                );\n            case NativeStatusCodes.NO_NETWORK:\n                return createBrowserAuthError(\n                    BrowserAuthErrorCodes.noNetworkConnectivity\n                );\n        }\n    }\n\n    return new NativeAuthError(\n        code,\n        NativeAuthErrorMessages[code] || description,\n        ext\n    );\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport {\n    CommonSilentFlowRequest,\n    SilentFlowClient,\n    PerformanceEvents,\n    invokeAsync,\n} from \"@azure/msal-common\";\nimport { ApiId } from \"../utils/BrowserConstants\";\nimport {\n    BrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\n\nexport class SilentCacheClient extends StandardInteractionClient {\n    /**\n     * Returns unexpired tokens from the cache, if available\n     * @param silentRequest\n     */\n    async acquireToken(\n        silentRequest: CommonSilentFlowRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.SilentCacheClientAcquireToken,\n            silentRequest.correlationId\n        );\n        // Telemetry manager only used to increment cacheHits here\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.acquireTokenSilent_silentFlow\n        );\n\n        const clientConfig = await invokeAsync(\n            this.getClientConfiguration.bind(this),\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(\n            serverTelemetryManager,\n            silentRequest.authority,\n            silentRequest.azureCloudOptions,\n            silentRequest.account\n        );\n        const silentAuthClient = new SilentFlowClient(\n            clientConfig,\n            this.performanceClient\n        );\n        this.logger.verbose(\"Silent auth client created\");\n\n        try {\n            const response = await invokeAsync(\n                silentAuthClient.acquireCachedToken.bind(silentAuthClient),\n                PerformanceEvents.SilentFlowClientAcquireCachedToken,\n                this.logger,\n                this.performanceClient,\n                silentRequest.correlationId\n            )(silentRequest);\n            const authResponse = response[0] as AuthenticationResult;\n\n            this.performanceClient.addFields(\n                {\n                    fromCache: true,\n                },\n                silentRequest.correlationId\n            );\n            return authResponse;\n        } catch (error) {\n            if (\n                error instanceof BrowserAuthError &&\n                error.errorCode === BrowserAuthErrorCodes.cryptoKeyNotFound\n            ) {\n                this.logger.verbose(\n                    \"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\"\n                );\n            }\n            throw error;\n        }\n    }\n\n    /**\n     * API to silenty clear the browser cache.\n     * @param logoutRequest\n     */\n    logout(logoutRequest?: ClearCacheRequest): Promise<void> {\n        this.logger.verbose(\"logoutRedirect called\");\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n        return this.clearCacheOnLogout(validLogoutRequest?.account);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Logger,\n    ICrypto,\n    PromptValue,\n    AuthToken,\n    Constants,\n    AccountEntity,\n    AuthorityType,\n    ScopeSet,\n    TimeUtils,\n    AuthenticationScheme,\n    UrlString,\n    OIDC_DEFAULT_SCOPES,\n    PopTokenGenerator,\n    SignedHttpRequestParameters,\n    IPerformanceClient,\n    PerformanceEvents,\n    IdTokenEntity,\n    AccessTokenEntity,\n    AuthError,\n    CommonSilentFlowRequest,\n    AccountInfo,\n    CacheRecord,\n    AADServerParamKeys,\n    TokenClaims,\n    createClientAuthError,\n    ClientAuthErrorCodes,\n    invokeAsync,\n    createAuthError,\n    AuthErrorCodes,\n    updateAccountTenantProfileData,\n    CacheHelpers,\n    buildAccountToCache,\n} from \"@azure/msal-common\";\nimport { BaseInteractionClient } from \"./BaseInteractionClient\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport {\n    NativeExtensionMethod,\n    ApiId,\n    TemporaryCacheKeys,\n    NativeConstants,\n} from \"../utils/BrowserConstants\";\nimport {\n    NativeExtensionRequestBody,\n    NativeTokenRequest,\n} from \"../broker/nativeBroker/NativeRequest\";\nimport { MATS, NativeResponse } from \"../broker/nativeBroker/NativeResponse\";\nimport {\n    NativeAuthError,\n    NativeAuthErrorCodes,\n    createNativeAuthError,\n    isFatalNativeAuthError,\n} from \"../error/NativeAuthError\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { SilentCacheClient } from \"./SilentCacheClient\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { base64Decode } from \"../encode/Base64Decode\";\n\nconst BrokerServerParamKeys = {\n    BROKER_CLIENT_ID: \"brk_client_id\",\n    BROKER_REDIRECT_URI: \"brk_redirect_uri\",\n};\n\nexport class NativeInteractionClient extends BaseInteractionClient {\n    protected apiId: ApiId;\n    protected accountId: string;\n    protected nativeMessageHandler: NativeMessageHandler;\n    protected silentCacheClient: SilentCacheClient;\n    protected nativeStorageManager: BrowserCacheManager;\n\n    constructor(\n        config: BrowserConfiguration,\n        browserStorage: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        apiId: ApiId,\n        performanceClient: IPerformanceClient,\n        provider: NativeMessageHandler,\n        accountId: string,\n        nativeStorageImpl: BrowserCacheManager,\n        correlationId?: string\n    ) {\n        super(\n            config,\n            browserStorage,\n            browserCrypto,\n            logger,\n            eventHandler,\n            navigationClient,\n            performanceClient,\n            provider,\n            correlationId\n        );\n        this.apiId = apiId;\n        this.accountId = accountId;\n        this.nativeMessageHandler = provider;\n        this.nativeStorageManager = nativeStorageImpl;\n        this.silentCacheClient = new SilentCacheClient(\n            config,\n            this.nativeStorageManager,\n            browserCrypto,\n            logger,\n            eventHandler,\n            navigationClient,\n            performanceClient,\n            provider,\n            correlationId\n        );\n    }\n\n    /**\n     * Acquire token from native platform via browser extension\n     * @param request\n     */\n    async acquireToken(\n        request: PopupRequest | SilentRequest | SsoSilentRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.NativeInteractionClientAcquireToken,\n            request.correlationId\n        );\n        this.logger.trace(\"NativeInteractionClient - acquireToken called.\");\n\n        // start the perf measurement\n        const nativeATMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.NativeInteractionClientAcquireToken,\n            request.correlationId\n        );\n        const reqTimestamp = TimeUtils.nowSeconds();\n\n        // initialize native request\n        const nativeRequest = await this.initializeNativeRequest(request);\n\n        // check if the tokens can be retrieved from internal cache\n        try {\n            const result = await this.acquireTokensFromCache(\n                this.accountId,\n                nativeRequest\n            );\n            nativeATMeasurement.end({\n                success: true,\n                isNativeBroker: false, // Should be true only when the result is coming directly from the broker\n                fromCache: true,\n            });\n            return result;\n        } catch (e) {\n            // continue with a native call for any and all errors\n            this.logger.info(\n                \"MSAL internal Cache does not contain tokens, proceed to make a native call\"\n            );\n        }\n\n        // fall back to native calls\n        const messageBody: NativeExtensionRequestBody = {\n            method: NativeExtensionMethod.GetToken,\n            request: nativeRequest,\n        };\n\n        const response: object = await this.nativeMessageHandler.sendMessage(\n            messageBody\n        );\n        const validatedResponse: NativeResponse =\n            this.validateNativeResponse(response);\n\n        return this.handleNativeResponse(\n            validatedResponse,\n            nativeRequest,\n            reqTimestamp\n        )\n            .then((result: AuthenticationResult) => {\n                nativeATMeasurement.end({\n                    success: true,\n                    isNativeBroker: true,\n                    requestId: result.requestId,\n                });\n                return result;\n            })\n            .catch((error: AuthError) => {\n                nativeATMeasurement.end({\n                    success: false,\n                    errorCode: error.errorCode,\n                    subErrorCode: error.subError,\n                    isNativeBroker: true,\n                });\n                throw error;\n            });\n    }\n\n    /**\n     * Creates silent flow request\n     * @param request\n     * @param cachedAccount\n     * @returns CommonSilentFlowRequest\n     */\n    private createSilentCacheRequest(\n        request: NativeTokenRequest,\n        cachedAccount: AccountInfo\n    ): CommonSilentFlowRequest {\n        return {\n            authority: request.authority,\n            correlationId: this.correlationId,\n            scopes: ScopeSet.fromString(request.scope).asArray(),\n            account: cachedAccount,\n            forceRefresh: false,\n        };\n    }\n\n    /**\n     * Fetches the tokens from the cache if un-expired\n     * @param nativeAccountId\n     * @param request\n     * @returns authenticationResult\n     */\n    protected async acquireTokensFromCache(\n        nativeAccountId: string,\n        request: NativeTokenRequest\n    ): Promise<AuthenticationResult> {\n        if (!nativeAccountId) {\n            this.logger.warning(\n                \"NativeInteractionClient:acquireTokensFromCache - No nativeAccountId provided\"\n            );\n            throw createClientAuthError(ClientAuthErrorCodes.noAccountFound);\n        }\n        // fetch the account from browser cache\n        const account = this.browserStorage.getBaseAccountInfo({\n            nativeAccountId,\n        });\n\n        if (!account) {\n            throw createClientAuthError(ClientAuthErrorCodes.noAccountFound);\n        }\n\n        // leverage silent flow for cached tokens retrieval\n        try {\n            const silentRequest = this.createSilentCacheRequest(\n                request,\n                account\n            );\n            const result = await this.silentCacheClient.acquireToken(\n                silentRequest\n            );\n\n            const fullAccount = {\n                ...account,\n                idTokenClaims: result?.idTokenClaims as TokenClaims,\n                idToken: result?.idToken,\n            };\n\n            return {\n                ...result,\n                account: fullAccount,\n            };\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Acquires a token from native platform then redirects to the redirectUri instead of returning the response\n     * @param request\n     */\n    async acquireTokenRedirect(request: RedirectRequest): Promise<void> {\n        this.logger.trace(\n            \"NativeInteractionClient - acquireTokenRedirect called.\"\n        );\n        const nativeRequest = await this.initializeNativeRequest(request);\n\n        const messageBody: NativeExtensionRequestBody = {\n            method: NativeExtensionMethod.GetToken,\n            request: nativeRequest,\n        };\n\n        try {\n            const response: object =\n                await this.nativeMessageHandler.sendMessage(messageBody);\n            this.validateNativeResponse(response);\n        } catch (e) {\n            // Only throw fatal errors here to allow application to fallback to regular redirect. Otherwise proceed and the error will be thrown in handleRedirectPromise\n            if (e instanceof NativeAuthError && isFatalNativeAuthError(e)) {\n                throw e;\n            }\n        }\n        this.browserStorage.setTemporaryCache(\n            TemporaryCacheKeys.NATIVE_REQUEST,\n            JSON.stringify(nativeRequest),\n            true\n        );\n\n        const navigationOptions: NavigationOptions = {\n            apiId: ApiId.acquireTokenRedirect,\n            timeout: this.config.system.redirectNavigationTimeout,\n            noHistory: false,\n        };\n        const redirectUri = this.config.auth.navigateToLoginRequestUrl\n            ? window.location.href\n            : this.getRedirectUri(request.redirectUri);\n        await this.navigationClient.navigateExternal(\n            redirectUri,\n            navigationOptions\n        ); // Need to treat this as external to ensure handleRedirectPromise is run again\n    }\n\n    /**\n     * If the previous page called native platform for a token using redirect APIs, send the same request again and return the response\n     * @param performanceClient {IPerformanceClient?}\n     * @param correlationId {string?} correlation identifier\n     */\n    async handleRedirectPromise(\n        performanceClient?: IPerformanceClient,\n        correlationId?: string\n    ): Promise<AuthenticationResult | null> {\n        this.logger.trace(\n            \"NativeInteractionClient - handleRedirectPromise called.\"\n        );\n        if (!this.browserStorage.isInteractionInProgress(true)) {\n            this.logger.info(\n                \"handleRedirectPromise called but there is no interaction in progress, returning null.\"\n            );\n            return null;\n        }\n\n        // remove prompt from the request to prevent WAM from prompting twice\n        const cachedRequest = this.browserStorage.getCachedNativeRequest();\n        if (!cachedRequest) {\n            this.logger.verbose(\n                \"NativeInteractionClient - handleRedirectPromise called but there is no cached request, returning null.\"\n            );\n            if (performanceClient && correlationId) {\n                performanceClient?.addFields(\n                    { errorCode: \"no_cached_request\" },\n                    correlationId\n                );\n            }\n            return null;\n        }\n\n        const { prompt, ...request } = cachedRequest;\n        if (prompt) {\n            this.logger.verbose(\n                \"NativeInteractionClient - handleRedirectPromise called and prompt was included in the original request, removing prompt from cached request to prevent second interaction with native broker window.\"\n            );\n        }\n\n        this.browserStorage.removeItem(\n            this.browserStorage.generateCacheKey(\n                TemporaryCacheKeys.NATIVE_REQUEST\n            )\n        );\n\n        const messageBody: NativeExtensionRequestBody = {\n            method: NativeExtensionMethod.GetToken,\n            request: request,\n        };\n\n        const reqTimestamp = TimeUtils.nowSeconds();\n\n        try {\n            this.logger.verbose(\n                \"NativeInteractionClient - handleRedirectPromise sending message to native broker.\"\n            );\n            const response: object =\n                await this.nativeMessageHandler.sendMessage(messageBody);\n            this.validateNativeResponse(response);\n            const result = this.handleNativeResponse(\n                response as NativeResponse,\n                request,\n                reqTimestamp\n            );\n            this.browserStorage.setInteractionInProgress(false);\n            return await result;\n        } catch (e) {\n            this.browserStorage.setInteractionInProgress(false);\n            throw e;\n        }\n    }\n\n    /**\n     * Logout from native platform via browser extension\n     * @param request\n     */\n    logout(): Promise<void> {\n        this.logger.trace(\"NativeInteractionClient - logout called.\");\n        return Promise.reject(\"Logout not implemented yet\");\n    }\n\n    /**\n     * Transform response from native platform into AuthenticationResult object which will be returned to the end user\n     * @param response\n     * @param request\n     * @param reqTimestamp\n     */\n    protected async handleNativeResponse(\n        response: NativeResponse,\n        request: NativeTokenRequest,\n        reqTimestamp: number\n    ): Promise<AuthenticationResult> {\n        this.logger.trace(\n            \"NativeInteractionClient - handleNativeResponse called.\"\n        );\n\n        // generate identifiers\n        const idTokenClaims = AuthToken.extractTokenClaims(\n            response.id_token,\n            base64Decode\n        );\n\n        const homeAccountIdentifier = this.createHomeAccountIdentifier(\n            response,\n            idTokenClaims\n        );\n\n        const cachedhomeAccountId =\n            this.browserStorage.getAccountInfoFilteredBy({\n                nativeAccountId: request.accountId,\n            })?.homeAccountId;\n\n        if (\n            homeAccountIdentifier !== cachedhomeAccountId &&\n            response.account.id !== request.accountId\n        ) {\n            // User switch in native broker prompt is not supported. All users must first sign in through web flow to ensure server state is in sync\n            throw createNativeAuthError(NativeAuthErrorCodes.userSwitch);\n        }\n\n        // Get the preferred_cache domain for the given authority\n        const authority = await this.getDiscoveredAuthority(request.authority);\n\n        const baseAccount = buildAccountToCache(\n            this.browserStorage,\n            authority,\n            homeAccountIdentifier,\n            idTokenClaims,\n            base64Decode,\n            response.client_info,\n            undefined, // environment\n            idTokenClaims.tid,\n            undefined, // auth code payload\n            response.account.id,\n            this.logger\n        );\n\n        // generate authenticationResult\n        const result = await this.generateAuthenticationResult(\n            response,\n            request,\n            idTokenClaims,\n            baseAccount,\n            authority.canonicalAuthority,\n            reqTimestamp\n        );\n\n        // cache accounts and tokens in the appropriate storage\n        this.cacheAccount(baseAccount);\n        this.cacheNativeTokens(\n            response,\n            request,\n            homeAccountIdentifier,\n            idTokenClaims,\n            result.accessToken,\n            result.tenantId,\n            reqTimestamp\n        );\n\n        return result;\n    }\n\n    /**\n     * creates an homeAccountIdentifier for the account\n     * @param response\n     * @param idTokenObj\n     * @returns\n     */\n    protected createHomeAccountIdentifier(\n        response: NativeResponse,\n        idTokenClaims: TokenClaims\n    ): string {\n        // Save account in browser storage\n        const homeAccountIdentifier = AccountEntity.generateHomeAccountId(\n            response.client_info || Constants.EMPTY_STRING,\n            AuthorityType.Default,\n            this.logger,\n            this.browserCrypto,\n            idTokenClaims\n        );\n\n        return homeAccountIdentifier;\n    }\n\n    /**\n     * Helper to generate scopes\n     * @param response\n     * @param request\n     * @returns\n     */\n    generateScopes(\n        response: NativeResponse,\n        request: NativeTokenRequest\n    ): ScopeSet {\n        return response.scope\n            ? ScopeSet.fromString(response.scope)\n            : ScopeSet.fromString(request.scope);\n    }\n\n    /**\n     * If PoP token is requesred, records the PoP token if returned from the WAM, else generates one in the browser\n     * @param request\n     * @param response\n     */\n    async generatePopAccessToken(\n        response: NativeResponse,\n        request: NativeTokenRequest\n    ): Promise<string> {\n        if (request.tokenType === AuthenticationScheme.POP) {\n            /**\n             * This code prioritizes SHR returned from the native layer. In case of error/SHR not calculated from WAM and the AT\n             * is still received, SHR is calculated locally\n             */\n\n            // Check if native layer returned an SHR token\n            if (response.shr) {\n                this.logger.trace(\n                    \"handleNativeServerResponse: SHR is enabled in native layer\"\n                );\n                return response.shr;\n            }\n\n            // Generate SHR in msal js if WAM does not compute it when POP is enabled\n            const popTokenGenerator: PopTokenGenerator = new PopTokenGenerator(\n                this.browserCrypto\n            );\n            const shrParameters: SignedHttpRequestParameters = {\n                resourceRequestMethod: request.resourceRequestMethod,\n                resourceRequestUri: request.resourceRequestUri,\n                shrClaims: request.shrClaims,\n                shrNonce: request.shrNonce,\n            };\n\n            /**\n             * KeyID must be present in the native request from when the PoP key was generated in order for\n             * PopTokenGenerator to query the full key for signing\n             */\n            if (!request.keyId) {\n                throw createClientAuthError(ClientAuthErrorCodes.keyIdMissing);\n            }\n            return popTokenGenerator.signPopToken(\n                response.access_token,\n                request.keyId,\n                shrParameters\n            );\n        } else {\n            return response.access_token;\n        }\n    }\n\n    /**\n     * Generates authentication result\n     * @param response\n     * @param request\n     * @param idTokenObj\n     * @param accountEntity\n     * @param authority\n     * @param reqTimestamp\n     * @returns\n     */\n    protected async generateAuthenticationResult(\n        response: NativeResponse,\n        request: NativeTokenRequest,\n        idTokenClaims: TokenClaims,\n        accountEntity: AccountEntity,\n        authority: string,\n        reqTimestamp: number\n    ): Promise<AuthenticationResult> {\n        // Add Native Broker fields to Telemetry\n        const mats = this.addTelemetryFromNativeResponse(response);\n\n        // If scopes not returned in server response, use request scopes\n        const responseScopes = response.scope\n            ? ScopeSet.fromString(response.scope)\n            : ScopeSet.fromString(request.scope);\n\n        const accountProperties = response.account.properties || {};\n        const uid =\n            accountProperties[\"UID\"] ||\n            idTokenClaims.oid ||\n            idTokenClaims.sub ||\n            Constants.EMPTY_STRING;\n        const tid =\n            accountProperties[\"TenantId\"] ||\n            idTokenClaims.tid ||\n            Constants.EMPTY_STRING;\n\n        const accountInfo: AccountInfo | null = updateAccountTenantProfileData(\n            accountEntity.getAccountInfo(),\n            undefined, // tenantProfile optional\n            idTokenClaims,\n            response.id_token\n        );\n\n        /**\n         * In pairwise broker flows, this check prevents the broker's native account id\n         * from being returned over the embedded app's account id.\n         */\n        if (accountInfo.nativeAccountId !== response.account.id) {\n            accountInfo.nativeAccountId = response.account.id;\n        }\n\n        // generate PoP token as needed\n        const responseAccessToken = await this.generatePopAccessToken(\n            response,\n            request\n        );\n        const tokenType =\n            request.tokenType === AuthenticationScheme.POP\n                ? AuthenticationScheme.POP\n                : AuthenticationScheme.BEARER;\n\n        const result: AuthenticationResult = {\n            authority: authority,\n            uniqueId: uid,\n            tenantId: tid,\n            scopes: responseScopes.asArray(),\n            account: accountInfo,\n            idToken: response.id_token,\n            idTokenClaims: idTokenClaims,\n            accessToken: responseAccessToken,\n            fromCache: mats ? this.isResponseFromCache(mats) : false,\n            expiresOn: new Date(\n                Number(reqTimestamp + response.expires_in) * 1000\n            ),\n            tokenType: tokenType,\n            correlationId: this.correlationId,\n            state: response.state,\n            fromNativeBroker: true,\n        };\n\n        return result;\n    }\n\n    /**\n     * cache the account entity in browser storage\n     * @param accountEntity\n     */\n    cacheAccount(accountEntity: AccountEntity): void {\n        // Store the account info and hence `nativeAccountId` in browser cache\n        this.browserStorage.setAccount(accountEntity);\n\n        // Remove any existing cached tokens for this account in browser storage\n        this.browserStorage.removeAccountContext(accountEntity).catch((e) => {\n            this.logger.error(\n                `Error occurred while removing account context from browser storage. ${e}`\n            );\n        });\n    }\n\n    /**\n     * Stores the access_token and id_token in inmemory storage\n     * @param response\n     * @param request\n     * @param homeAccountIdentifier\n     * @param idTokenObj\n     * @param responseAccessToken\n     * @param tenantId\n     * @param reqTimestamp\n     */\n    cacheNativeTokens(\n        response: NativeResponse,\n        request: NativeTokenRequest,\n        homeAccountIdentifier: string,\n        idTokenClaims: TokenClaims,\n        responseAccessToken: string,\n        tenantId: string,\n        reqTimestamp: number\n    ): void {\n        const cachedIdToken: IdTokenEntity | null =\n            CacheHelpers.createIdTokenEntity(\n                homeAccountIdentifier,\n                request.authority,\n                response.id_token || \"\",\n                request.clientId,\n                idTokenClaims.tid || \"\"\n            );\n\n        // cache accessToken in inmemory storage\n        const expiresIn: number =\n            request.tokenType === AuthenticationScheme.POP\n                ? Constants.SHR_NONCE_VALIDITY\n                : (typeof response.expires_in === \"string\"\n                      ? parseInt(response.expires_in, 10)\n                      : response.expires_in) || 0;\n        const tokenExpirationSeconds = reqTimestamp + expiresIn;\n        const responseScopes = this.generateScopes(response, request);\n\n        const cachedAccessToken: AccessTokenEntity | null =\n            CacheHelpers.createAccessTokenEntity(\n                homeAccountIdentifier,\n                request.authority,\n                responseAccessToken,\n                request.clientId,\n                idTokenClaims.tid || tenantId,\n                responseScopes.printScopes(),\n                tokenExpirationSeconds,\n                0,\n                base64Decode\n            );\n\n        const nativeCacheRecord = new CacheRecord(\n            undefined,\n            cachedIdToken,\n            cachedAccessToken\n        );\n\n        void this.nativeStorageManager.saveCacheRecord(\n            nativeCacheRecord,\n            request.storeInCache\n        );\n    }\n\n    protected addTelemetryFromNativeResponse(\n        response: NativeResponse\n    ): MATS | null {\n        const mats = this.getMATSFromResponse(response);\n\n        if (!mats) {\n            return null;\n        }\n\n        this.performanceClient.addFields(\n            {\n                extensionId: this.nativeMessageHandler.getExtensionId(),\n                extensionVersion:\n                    this.nativeMessageHandler.getExtensionVersion(),\n                matsBrokerVersion: mats.broker_version,\n                matsAccountJoinOnStart: mats.account_join_on_start,\n                matsAccountJoinOnEnd: mats.account_join_on_end,\n                matsDeviceJoin: mats.device_join,\n                matsPromptBehavior: mats.prompt_behavior,\n                matsApiErrorCode: mats.api_error_code,\n                matsUiVisible: mats.ui_visible,\n                matsSilentCode: mats.silent_code,\n                matsSilentBiSubCode: mats.silent_bi_sub_code,\n                matsSilentMessage: mats.silent_message,\n                matsSilentStatus: mats.silent_status,\n                matsHttpStatus: mats.http_status,\n                matsHttpEventCount: mats.http_event_count,\n            },\n            this.correlationId\n        );\n\n        return mats;\n    }\n\n    /**\n     * Validates native platform response before processing\n     * @param response\n     */\n    private validateNativeResponse(response: object): NativeResponse {\n        if (\n            response.hasOwnProperty(\"access_token\") &&\n            response.hasOwnProperty(\"id_token\") &&\n            response.hasOwnProperty(\"client_info\") &&\n            response.hasOwnProperty(\"account\") &&\n            response.hasOwnProperty(\"scope\") &&\n            response.hasOwnProperty(\"expires_in\")\n        ) {\n            return response as NativeResponse;\n        } else {\n            throw createAuthError(\n                AuthErrorCodes.unexpectedError,\n                \"Response missing expected properties.\"\n            );\n        }\n    }\n\n    /**\n     * Gets MATS telemetry from native response\n     * @param response\n     * @returns\n     */\n    private getMATSFromResponse(response: NativeResponse): MATS | null {\n        if (response.properties.MATS) {\n            try {\n                return JSON.parse(response.properties.MATS);\n            } catch (e) {\n                this.logger.error(\n                    \"NativeInteractionClient - Error parsing MATS telemetry, returning null instead\"\n                );\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns whether or not response came from native cache\n     * @param response\n     * @returns\n     */\n    protected isResponseFromCache(mats: MATS): boolean {\n        if (typeof mats.is_cached === \"undefined\") {\n            this.logger.verbose(\n                \"NativeInteractionClient - MATS telemetry does not contain field indicating if response was served from cache. Returning false.\"\n            );\n            return false;\n        }\n\n        return !!mats.is_cached;\n    }\n\n    /**\n     * Translates developer provided request object into NativeRequest object\n     * @param request\n     */\n    protected async initializeNativeRequest(\n        request: PopupRequest | SsoSilentRequest\n    ): Promise<NativeTokenRequest> {\n        this.logger.trace(\n            \"NativeInteractionClient - initializeNativeRequest called\"\n        );\n\n        const authority = request.authority || this.config.auth.authority;\n\n        if (request.account) {\n            // validate authority\n            await this.getDiscoveredAuthority(\n                authority,\n                request.azureCloudOptions,\n                request.account\n            );\n        }\n\n        const canonicalAuthority = new UrlString(authority);\n        canonicalAuthority.validateAsUri();\n\n        // scopes are expected to be received by the native broker as \"scope\" and will be added to the request below. Other properties that should be dropped from the request to the native broker can be included in the object destructuring here.\n        const { scopes, ...remainingProperties } = request;\n        const scopeSet = new ScopeSet(scopes || []);\n        scopeSet.appendScopes(OIDC_DEFAULT_SCOPES);\n\n        const getPrompt = () => {\n            // If request is silent, prompt is always none\n            switch (this.apiId) {\n                case ApiId.ssoSilent:\n                case ApiId.acquireTokenSilent_silentFlow:\n                    this.logger.trace(\n                        \"initializeNativeRequest: silent request sets prompt to none\"\n                    );\n                    return PromptValue.NONE;\n                default:\n                    break;\n            }\n\n            // Prompt not provided, request may proceed and native broker decides if it needs to prompt\n            if (!request.prompt) {\n                this.logger.trace(\n                    \"initializeNativeRequest: prompt was not provided\"\n                );\n                return undefined;\n            }\n\n            // If request is interactive, check if prompt provided is allowed to go directly to native broker\n            switch (request.prompt) {\n                case PromptValue.NONE:\n                case PromptValue.CONSENT:\n                case PromptValue.LOGIN:\n                    this.logger.trace(\n                        \"initializeNativeRequest: prompt is compatible with native flow\"\n                    );\n                    return request.prompt;\n                default:\n                    this.logger.trace(\n                        `initializeNativeRequest: prompt = ${request.prompt} is not compatible with native flow`\n                    );\n                    throw createBrowserAuthError(\n                        BrowserAuthErrorCodes.nativePromptNotSupported\n                    );\n            }\n        };\n\n        const validatedRequest: NativeTokenRequest = {\n            ...remainingProperties,\n            accountId: this.accountId,\n            clientId: this.config.auth.clientId,\n            authority: canonicalAuthority.urlString,\n            scope: scopeSet.printScopes(),\n            redirectUri: this.getRedirectUri(request.redirectUri),\n            prompt: getPrompt(),\n            correlationId: this.correlationId,\n            tokenType: request.authenticationScheme,\n            windowTitleSubstring: document.title,\n            extraParameters: {\n                ...request.extraQueryParameters,\n                ...request.tokenQueryParameters,\n            },\n            extendedExpiryToken: false, // Make this configurable?\n        };\n\n        this.handleExtraBrokerParams(validatedRequest);\n        validatedRequest.extraParameters =\n            validatedRequest.extraParameters || {};\n        validatedRequest.extraParameters.telemetry =\n            NativeConstants.MATS_TELEMETRY;\n\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            // add POP request type\n            const shrParameters: SignedHttpRequestParameters = {\n                resourceRequestUri: request.resourceRequestUri,\n                resourceRequestMethod: request.resourceRequestMethod,\n                shrClaims: request.shrClaims,\n                shrNonce: request.shrNonce,\n            };\n\n            const popTokenGenerator = new PopTokenGenerator(this.browserCrypto);\n            const reqCnfData = await invokeAsync(\n                popTokenGenerator.generateCnf.bind(popTokenGenerator),\n                PerformanceEvents.PopTokenGenerateCnf,\n                this.logger,\n                this.performanceClient,\n                this.correlationId\n            )(shrParameters, this.logger);\n\n            // to reduce the URL length, it is recommended to send the hash of the req_cnf instead of the whole string\n            validatedRequest.reqCnf = reqCnfData.reqCnfHash;\n            validatedRequest.keyId = reqCnfData.kid;\n        }\n\n        return validatedRequest;\n    }\n\n    /**\n     * Handles extra broker request parameters\n     * @param request {NativeTokenRequest}\n     * @private\n     */\n    private handleExtraBrokerParams(request: NativeTokenRequest): void {\n        if (!request.extraParameters) {\n            return;\n        }\n\n        if (\n            request.extraParameters.hasOwnProperty(\n                BrokerServerParamKeys.BROKER_CLIENT_ID\n            ) &&\n            request.extraParameters.hasOwnProperty(\n                BrokerServerParamKeys.BROKER_REDIRECT_URI\n            ) &&\n            request.extraParameters.hasOwnProperty(AADServerParamKeys.CLIENT_ID)\n        ) {\n            const child_client_id =\n                request.extraParameters[AADServerParamKeys.CLIENT_ID];\n            const child_redirect_uri = request.redirectUri;\n            const brk_redirect_uri =\n                request.extraParameters[\n                    BrokerServerParamKeys.BROKER_REDIRECT_URI\n                ];\n            request.extraParameters = {\n                child_client_id,\n                child_redirect_uri,\n            };\n            request.redirectUri = brk_redirect_uri;\n        }\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    NativeConstants,\n    NativeExtensionMethod,\n} from \"../../utils/BrowserConstants\";\nimport {\n    Logger,\n    AuthError,\n    createAuthError,\n    AuthErrorCodes,\n    AuthenticationScheme,\n    InProgressPerformanceEvent,\n    PerformanceEvents,\n    IPerformanceClient,\n} from \"@azure/msal-common\";\nimport {\n    NativeExtensionRequest,\n    NativeExtensionRequestBody,\n} from \"./NativeRequest\";\nimport { createNativeAuthError } from \"../../error/NativeAuthError\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../../error/BrowserAuthError\";\nimport { BrowserConfiguration } from \"../../config/Configuration\";\nimport { createNewGuid } from \"../../crypto/BrowserCrypto\";\n\ntype ResponseResolvers<T> = {\n    resolve: (value: T | PromiseLike<T>) => void;\n    reject: (\n        value: AuthError | Error | PromiseLike<Error> | PromiseLike<AuthError>\n    ) => void;\n};\n\nexport class NativeMessageHandler {\n    private extensionId: string | undefined;\n    private extensionVersion: string | undefined;\n    private logger: Logger;\n    private readonly handshakeTimeoutMs: number;\n    private timeoutId: number | undefined;\n    private resolvers: Map<string, ResponseResolvers<object>>;\n    private handshakeResolvers: Map<string, ResponseResolvers<void>>;\n    private messageChannel: MessageChannel;\n    private readonly windowListener: (event: MessageEvent) => void;\n    private readonly performanceClient: IPerformanceClient;\n    private readonly handshakeEvent: InProgressPerformanceEvent;\n\n    constructor(\n        logger: Logger,\n        handshakeTimeoutMs: number,\n        performanceClient: IPerformanceClient,\n        extensionId?: string\n    ) {\n        this.logger = logger;\n        this.handshakeTimeoutMs = handshakeTimeoutMs;\n        this.extensionId = extensionId;\n        this.resolvers = new Map(); // Used for non-handshake messages\n        this.handshakeResolvers = new Map(); // Used for handshake messages\n        this.messageChannel = new MessageChannel();\n        this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound\n        this.performanceClient = performanceClient;\n        this.handshakeEvent = performanceClient.startMeasurement(\n            PerformanceEvents.NativeMessageHandlerHandshake\n        );\n    }\n\n    /**\n     * Sends a given message to the extension and resolves with the extension response\n     * @param body\n     */\n    async sendMessage(body: NativeExtensionRequestBody): Promise<object> {\n        this.logger.trace(\"NativeMessageHandler - sendMessage called.\");\n        const req: NativeExtensionRequest = {\n            channel: NativeConstants.CHANNEL_ID,\n            extensionId: this.extensionId,\n            responseId: createNewGuid(),\n            body: body,\n        };\n\n        this.logger.trace(\n            \"NativeMessageHandler - Sending request to browser extension\"\n        );\n        this.logger.tracePii(\n            `NativeMessageHandler - Sending request to browser extension: ${JSON.stringify(\n                req\n            )}`\n        );\n        this.messageChannel.port1.postMessage(req);\n\n        return new Promise((resolve, reject) => {\n            this.resolvers.set(req.responseId, { resolve, reject });\n        });\n    }\n\n    /**\n     * Returns an instance of the MessageHandler that has successfully established a connection with an extension\n     * @param {Logger} logger\n     * @param {number} handshakeTimeoutMs\n     * @param {IPerformanceClient} performanceClient\n     * @param {ICrypto} crypto\n     */\n    static async createProvider(\n        logger: Logger,\n        handshakeTimeoutMs: number,\n        performanceClient: IPerformanceClient\n    ): Promise<NativeMessageHandler> {\n        logger.trace(\"NativeMessageHandler - createProvider called.\");\n        try {\n            const preferredProvider = new NativeMessageHandler(\n                logger,\n                handshakeTimeoutMs,\n                performanceClient,\n                NativeConstants.PREFERRED_EXTENSION_ID\n            );\n            await preferredProvider.sendHandshakeRequest();\n            return preferredProvider;\n        } catch (e) {\n            // If preferred extension fails for whatever reason, fallback to using any installed extension\n            const backupProvider = new NativeMessageHandler(\n                logger,\n                handshakeTimeoutMs,\n                performanceClient\n            );\n            await backupProvider.sendHandshakeRequest();\n            return backupProvider;\n        }\n    }\n\n    /**\n     * Send handshake request helper.\n     */\n    private async sendHandshakeRequest(): Promise<void> {\n        this.logger.trace(\n            \"NativeMessageHandler - sendHandshakeRequest called.\"\n        );\n        // Register this event listener before sending handshake\n        window.addEventListener(\"message\", this.windowListener, false); // false is important, because content script message processing should work first\n\n        const req: NativeExtensionRequest = {\n            channel: NativeConstants.CHANNEL_ID,\n            extensionId: this.extensionId,\n            responseId: createNewGuid(),\n            body: {\n                method: NativeExtensionMethod.HandshakeRequest,\n            },\n        };\n        this.handshakeEvent.add({\n            extensionId: this.extensionId,\n            extensionHandshakeTimeoutMs: this.handshakeTimeoutMs,\n        });\n\n        this.messageChannel.port1.onmessage = (event) => {\n            this.onChannelMessage(event);\n        };\n\n        window.postMessage(req, window.origin, [this.messageChannel.port2]);\n\n        return new Promise((resolve, reject) => {\n            this.handshakeResolvers.set(req.responseId, { resolve, reject });\n            this.timeoutId = window.setTimeout(() => {\n                /*\n                 * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.\n                 * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port\n                 */\n                window.removeEventListener(\n                    \"message\",\n                    this.windowListener,\n                    false\n                );\n                this.messageChannel.port1.close();\n                this.messageChannel.port2.close();\n                this.handshakeEvent.end({\n                    extensionHandshakeTimedOut: true,\n                    success: false,\n                });\n                reject(\n                    createBrowserAuthError(\n                        BrowserAuthErrorCodes.nativeHandshakeTimeout\n                    )\n                );\n                this.handshakeResolvers.delete(req.responseId);\n            }, this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here\n        });\n    }\n\n    /**\n     * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.\n     * @param event\n     */\n    private onWindowMessage(event: MessageEvent): void {\n        this.logger.trace(\"NativeMessageHandler - onWindowMessage called\");\n        // We only accept messages from ourselves\n        if (event.source !== window) {\n            return;\n        }\n\n        const request = event.data;\n\n        if (\n            !request.channel ||\n            request.channel !== NativeConstants.CHANNEL_ID\n        ) {\n            return;\n        }\n\n        if (request.extensionId && request.extensionId !== this.extensionId) {\n            return;\n        }\n\n        if (request.body.method === NativeExtensionMethod.HandshakeRequest) {\n            const handshakeResolver = this.handshakeResolvers.get(\n                request.responseId\n            );\n            /*\n             * Filter out responses with no matched resolvers sooner to keep channel ports open while waiting for\n             * the proper response.\n             */\n            if (!handshakeResolver) {\n                this.logger.trace(\n                    `NativeMessageHandler.onWindowMessage - resolver can't be found for request ${request.responseId}`\n                );\n                return;\n            }\n\n            // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed\n            this.logger.verbose(\n                request.extensionId\n                    ? `Extension with id: ${request.extensionId} not installed`\n                    : \"No extension installed\"\n            );\n            clearTimeout(this.timeoutId);\n            this.messageChannel.port1.close();\n            this.messageChannel.port2.close();\n            window.removeEventListener(\"message\", this.windowListener, false);\n            this.handshakeEvent.end({\n                success: false,\n                extensionInstalled: false,\n            });\n            handshakeResolver.reject(\n                createBrowserAuthError(\n                    BrowserAuthErrorCodes.nativeExtensionNotInstalled\n                )\n            );\n        }\n    }\n\n    /**\n     * Invoked when a message is received from the extension on the MessageChannel port\n     * @param event\n     */\n    private onChannelMessage(event: MessageEvent): void {\n        this.logger.trace(\"NativeMessageHandler - onChannelMessage called.\");\n        const request = event.data;\n\n        const resolver = this.resolvers.get(request.responseId);\n        const handshakeResolver = this.handshakeResolvers.get(\n            request.responseId\n        );\n\n        try {\n            const method = request.body.method;\n\n            if (method === NativeExtensionMethod.Response) {\n                if (!resolver) {\n                    return;\n                }\n                const response = request.body.response;\n                this.logger.trace(\n                    \"NativeMessageHandler - Received response from browser extension\"\n                );\n                this.logger.tracePii(\n                    `NativeMessageHandler - Received response from browser extension: ${JSON.stringify(\n                        response\n                    )}`\n                );\n                if (response.status !== \"Success\") {\n                    resolver.reject(\n                        createNativeAuthError(\n                            response.code,\n                            response.description,\n                            response.ext\n                        )\n                    );\n                } else if (response.result) {\n                    if (\n                        response.result[\"code\"] &&\n                        response.result[\"description\"]\n                    ) {\n                        resolver.reject(\n                            createNativeAuthError(\n                                response.result[\"code\"],\n                                response.result[\"description\"],\n                                response.result[\"ext\"]\n                            )\n                        );\n                    } else {\n                        resolver.resolve(response.result);\n                    }\n                } else {\n                    throw createAuthError(\n                        AuthErrorCodes.unexpectedError,\n                        \"Event does not contain result.\"\n                    );\n                }\n                this.resolvers.delete(request.responseId);\n            } else if (method === NativeExtensionMethod.HandshakeResponse) {\n                if (!handshakeResolver) {\n                    this.logger.trace(\n                        `NativeMessageHandler.onChannelMessage - resolver can't be found for request ${request.responseId}`\n                    );\n                    return;\n                }\n                clearTimeout(this.timeoutId); // Clear setTimeout\n                window.removeEventListener(\n                    \"message\",\n                    this.windowListener,\n                    false\n                ); // Remove 'No extension' listener\n                this.extensionId = request.extensionId;\n                this.extensionVersion = request.body.version;\n                this.logger.verbose(\n                    `NativeMessageHandler - Received HandshakeResponse from extension: ${this.extensionId}`\n                );\n                this.handshakeEvent.end({\n                    extensionInstalled: true,\n                    success: true,\n                });\n\n                handshakeResolver.resolve();\n                this.handshakeResolvers.delete(request.responseId);\n            }\n            // Do nothing if method is not Response or HandshakeResponse\n        } catch (err) {\n            this.logger.error(\"Error parsing response from WAM Extension\");\n            this.logger.errorPii(\n                `Error parsing response from WAM Extension: ${err as string}`\n            );\n            this.logger.errorPii(`Unable to parse ${event}`);\n\n            if (resolver) {\n                resolver.reject(err as AuthError);\n            } else if (handshakeResolver) {\n                handshakeResolver.reject(err as AuthError);\n            }\n        }\n    }\n\n    /**\n     * Returns the Id for the browser extension this handler is communicating with\n     * @returns\n     */\n    getExtensionId(): string | undefined {\n        return this.extensionId;\n    }\n\n    /**\n     * Returns the version for the browser extension this handler is communicating with\n     * @returns\n     */\n    getExtensionVersion(): string | undefined {\n        return this.extensionVersion;\n    }\n\n    /**\n     * Returns boolean indicating whether or not the request should attempt to use native broker\n     * @param logger\n     * @param config\n     * @param nativeExtensionProvider\n     * @param authenticationScheme\n     */\n    static isNativeAvailable(\n        config: BrowserConfiguration,\n        logger: Logger,\n        nativeExtensionProvider?: NativeMessageHandler,\n        authenticationScheme?: AuthenticationScheme\n    ): boolean {\n        logger.trace(\"isNativeAvailable called\");\n        if (!config.system.allowNativeBroker) {\n            logger.trace(\n                \"isNativeAvailable: allowNativeBroker is not enabled, returning false\"\n            );\n            // Developer disabled WAM\n            return false;\n        }\n\n        if (!nativeExtensionProvider) {\n            logger.trace(\n                \"isNativeAvailable: WAM extension provider is not initialized, returning false\"\n            );\n            // Extension is not available\n            return false;\n        }\n\n        if (authenticationScheme) {\n            switch (authenticationScheme) {\n                case AuthenticationScheme.BEARER:\n                case AuthenticationScheme.POP:\n                    logger.trace(\n                        \"isNativeAvailable: authenticationScheme is supported, returning true\"\n                    );\n                    return true;\n                default:\n                    logger.trace(\n                        \"isNativeAvailable: authenticationScheme is not supported, returning false\"\n                    );\n                    return false;\n            }\n        }\n\n        return true;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AuthorizationCodePayload,\n    CommonAuthorizationCodeRequest,\n    AuthorizationCodeClient,\n    CcsCredential,\n    Logger,\n    ServerError,\n    IPerformanceClient,\n    PerformanceEvents,\n    invokeAsync,\n    CcsCredentialType,\n    ServerAuthorizationCodeResponse,\n} from \"@azure/msal-common\";\n\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\n\n/**\n * Abstract class which defines operations for a browser interaction handling class.\n */\nexport class InteractionHandler {\n    protected authModule: AuthorizationCodeClient;\n    protected browserStorage: BrowserCacheManager;\n    protected authCodeRequest: CommonAuthorizationCodeRequest;\n    protected logger: Logger;\n    protected performanceClient: IPerformanceClient;\n\n    constructor(\n        authCodeModule: AuthorizationCodeClient,\n        storageImpl: BrowserCacheManager,\n        authCodeRequest: CommonAuthorizationCodeRequest,\n        logger: Logger,\n        performanceClient: IPerformanceClient\n    ) {\n        this.authModule = authCodeModule;\n        this.browserStorage = storageImpl;\n        this.authCodeRequest = authCodeRequest;\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Function to handle response parameters from hash.\n     * @param locationHash\n     */\n    async handleCodeResponse(\n        response: ServerAuthorizationCodeResponse,\n        request: AuthorizationUrlRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.HandleCodeResponse,\n            request.correlationId\n        );\n\n        let authCodeResponse;\n        try {\n            authCodeResponse = this.authModule.handleFragmentResponse(\n                response,\n                request.state\n            );\n        } catch (e) {\n            if (\n                e instanceof ServerError &&\n                e.subError === BrowserAuthErrorCodes.userCancelled\n            ) {\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.userCancelled\n                );\n            } else {\n                throw e;\n            }\n        }\n\n        return invokeAsync(\n            this.handleCodeResponseFromServer.bind(this),\n            PerformanceEvents.HandleCodeResponseFromServer,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(authCodeResponse, request);\n    }\n\n    /**\n     * Process auth code response from AAD\n     * @param authCodeResponse\n     * @param state\n     * @param authority\n     * @param networkModule\n     * @returns\n     */\n    async handleCodeResponseFromServer(\n        authCodeResponse: AuthorizationCodePayload,\n        request: AuthorizationUrlRequest,\n        validateNonce: boolean = true\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.HandleCodeResponseFromServer,\n            request.correlationId\n        );\n        this.logger.trace(\n            \"InteractionHandler.handleCodeResponseFromServer called\"\n        );\n\n        // Assign code to request\n        this.authCodeRequest.code = authCodeResponse.code;\n\n        // Check for new cloud instance\n        if (authCodeResponse.cloud_instance_host_name) {\n            await invokeAsync(\n                this.authModule.updateAuthority.bind(this.authModule),\n                PerformanceEvents.UpdateTokenEndpointAuthority,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(authCodeResponse.cloud_instance_host_name, request.correlationId);\n        }\n\n        // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n        if (validateNonce) {\n            // TODO: Assigning \"response nonce\" to \"request nonce\" is confusing. Refactor the function doing validation to accept request nonce directly\n            authCodeResponse.nonce = request.nonce || undefined;\n        }\n\n        authCodeResponse.state = request.state;\n\n        // Add CCS parameters if available\n        if (authCodeResponse.client_info) {\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n        } else {\n            const ccsCred = this.createCcsCredentials(request);\n            if (ccsCred) {\n                this.authCodeRequest.ccsCredential = ccsCred;\n            }\n        }\n\n        // Acquire token with retrieved code.\n        const tokenResponse = (await invokeAsync(\n            this.authModule.acquireToken.bind(this.authModule),\n            PerformanceEvents.AuthClientAcquireToken,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(this.authCodeRequest, authCodeResponse)) as AuthenticationResult;\n        return tokenResponse;\n    }\n\n    /**\n     * Build ccs creds if available\n     */\n    protected createCcsCredentials(\n        request: AuthorizationUrlRequest\n    ): CcsCredential | null {\n        if (request.account) {\n            return {\n                credential: request.account.homeAccountId,\n                type: CcsCredentialType.HOME_ACCOUNT_ID,\n            };\n        } else if (request.loginHint) {\n            return {\n                credential: request.loginHint,\n                type: CcsCredentialType.UPN,\n            };\n        }\n\n        return null;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ICrypto,\n    Logger,\n    ServerAuthorizationCodeResponse,\n    UrlUtils,\n} from \"@azure/msal-common\";\nimport {\n    BrowserAuthErrorCodes,\n    createBrowserAuthError,\n} from \"../error/BrowserAuthError\";\nimport { extractBrowserRequestState } from \"../utils/BrowserProtocolUtils\";\nimport { InteractionType } from \"../utils/BrowserConstants\";\n\nexport function deserializeResponse(\n    responseString: string,\n    responseLocation: string,\n    logger: Logger\n): ServerAuthorizationCodeResponse {\n    // Deserialize hash fragment response parameters.\n    const serverParams = UrlUtils.getDeserializedResponse(responseString);\n    if (!serverParams) {\n        if (!UrlUtils.stripLeadingHashOrQuery(responseString)) {\n            // Hash or Query string is empty\n            logger.error(\n                `The request has returned to the redirectUri but a ${responseLocation} is not present. It's likely that the ${responseLocation} has been removed or the page has been redirected by code running on the redirectUri page.`\n            );\n            throw createBrowserAuthError(BrowserAuthErrorCodes.hashEmptyError);\n        } else {\n            logger.error(\n                `A ${responseLocation} is present in the iframe but it does not contain known properties. It's likely that the ${responseLocation} has been replaced by code running on the redirectUri page.`\n            );\n            logger.errorPii(\n                `The ${responseLocation} detected is: ${responseString}`\n            );\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.hashDoesNotContainKnownProperties\n            );\n        }\n    }\n    return serverParams;\n}\n\n/**\n * Returns the interaction type that the response object belongs to\n */\nexport function validateInteractionType(\n    response: ServerAuthorizationCodeResponse,\n    browserCrypto: ICrypto,\n    interactionType: InteractionType\n): void {\n    if (!response.state) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.noStateInHash);\n    }\n\n    const platformStateObj = extractBrowserRequestState(\n        browserCrypto,\n        response.state\n    );\n    if (!platformStateObj) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.unableToParseState);\n    }\n\n    if (platformStateObj.interactionType !== interactionType) {\n        throw createBrowserAuthError(\n            BrowserAuthErrorCodes.stateInteractionTypeMismatch\n        );\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    CommonAuthorizationCodeRequest,\n    AuthorizationCodeClient,\n    ThrottlingUtils,\n    CommonEndSessionRequest,\n    UrlString,\n    AuthError,\n    OIDC_DEFAULT_SCOPES,\n    ProtocolUtils,\n    PerformanceEvents,\n    IPerformanceClient,\n    Logger,\n    ICrypto,\n    ProtocolMode,\n    ServerResponseType,\n    invokeAsync,\n    invoke,\n} from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { EventType } from \"../event/EventType\";\nimport {\n    InteractionType,\n    ApiId,\n    BrowserConstants,\n} from \"../utils/BrowserConstants\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\nimport * as BrowserUtils from \"../utils/BrowserUtils\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { InteractionHandler } from \"../interaction_handler/InteractionHandler\";\nimport { PopupWindowAttributes } from \"../request/PopupWindowAttributes\";\nimport { EventError } from \"../event/EventMessage\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport * as ResponseHandler from \"../response/ResponseHandler\";\n\nexport type PopupParams = {\n    popup?: Window | null;\n    popupName: string;\n    popupWindowAttributes: PopupWindowAttributes;\n};\n\nexport class PopupClient extends StandardInteractionClient {\n    private currentWindow: Window | undefined;\n    protected nativeStorage: BrowserCacheManager;\n\n    constructor(\n        config: BrowserConfiguration,\n        storageImpl: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        performanceClient: IPerformanceClient,\n        nativeStorageImpl: BrowserCacheManager,\n        nativeMessageHandler?: NativeMessageHandler,\n        correlationId?: string\n    ) {\n        super(\n            config,\n            storageImpl,\n            browserCrypto,\n            logger,\n            eventHandler,\n            navigationClient,\n            performanceClient,\n            nativeMessageHandler,\n            correlationId\n        );\n        // Properly sets this reference for the unload event.\n        this.unloadWindow = this.unloadWindow.bind(this);\n        this.nativeStorage = nativeStorageImpl;\n    }\n\n    /**\n     * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\n     * @param request\n     */\n    acquireToken(request: PopupRequest): Promise<AuthenticationResult> {\n        try {\n            const popupName = this.generatePopupName(\n                request.scopes || OIDC_DEFAULT_SCOPES,\n                request.authority || this.config.auth.authority\n            );\n            const popupWindowAttributes = request.popupWindowAttributes || {};\n\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n            if (this.config.system.asyncPopups) {\n                this.logger.verbose(\"asyncPopups set to true, acquiring token\");\n                // Passes on popup position and dimensions if in request\n                return this.acquireTokenPopupAsync(\n                    request,\n                    popupName,\n                    popupWindowAttributes\n                );\n            } else {\n                // asyncPopups flag is set to false. Opens popup before acquiring token.\n                this.logger.verbose(\n                    \"asyncPopup set to false, opening popup before acquiring token\"\n                );\n                const popup = this.openSizedPopup(\n                    \"about:blank\",\n                    popupName,\n                    popupWindowAttributes\n                );\n                return this.acquireTokenPopupAsync(\n                    request,\n                    popupName,\n                    popupWindowAttributes,\n                    popup\n                );\n            }\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\n     * @param logoutRequest\n     */\n    logout(logoutRequest?: EndSessionPopupRequest): Promise<void> {\n        try {\n            this.logger.verbose(\"logoutPopup called\");\n            const validLogoutRequest =\n                this.initializeLogoutRequest(logoutRequest);\n\n            const popupName = this.generateLogoutPopupName(validLogoutRequest);\n            const authority = logoutRequest && logoutRequest.authority;\n            const mainWindowRedirectUri =\n                logoutRequest && logoutRequest.mainWindowRedirectUri;\n            const popupWindowAttributes =\n                logoutRequest?.popupWindowAttributes || {};\n\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n            if (this.config.system.asyncPopups) {\n                this.logger.verbose(\"asyncPopups set to true\");\n                // Passes on popup position and dimensions if in request\n                return this.logoutPopupAsync(\n                    validLogoutRequest,\n                    popupName,\n                    popupWindowAttributes,\n                    authority,\n                    undefined,\n                    mainWindowRedirectUri\n                );\n            } else {\n                // asyncPopups flag is set to false. Opens popup before logging out.\n                this.logger.verbose(\"asyncPopup set to false, opening popup\");\n                const popup = this.openSizedPopup(\n                    \"about:blank\",\n                    popupName,\n                    popupWindowAttributes\n                );\n                return this.logoutPopupAsync(\n                    validLogoutRequest,\n                    popupName,\n                    popupWindowAttributes,\n                    authority,\n                    popup,\n                    mainWindowRedirectUri\n                );\n            }\n        } catch (e) {\n            // Since this function is synchronous we need to reject\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Helper which obtains an access_token for your API via opening a popup window in the user's browser\n     * @param validRequest\n     * @param popupName\n     * @param popup\n     * @param popupWindowAttributes\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    protected async acquireTokenPopupAsync(\n        request: PopupRequest,\n        popupName: string,\n        popupWindowAttributes: PopupWindowAttributes,\n        popup?: Window | null\n    ): Promise<AuthenticationResult> {\n        this.logger.verbose(\"acquireTokenPopupAsync called\");\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.acquireTokenPopup\n        );\n\n        const validRequest = await invokeAsync(\n            this.initializeAuthorizationRequest.bind(this),\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(request, InteractionType.Popup);\n\n        BrowserUtils.preconnect(validRequest.authority);\n\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest: CommonAuthorizationCodeRequest =\n                await invokeAsync(\n                    this.initializeAuthorizationCodeRequest.bind(this),\n                    PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\n                    this.logger,\n                    this.performanceClient,\n                    this.correlationId\n                )(validRequest);\n\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await invokeAsync(\n                this.createAuthCodeClient.bind(this),\n                PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n                this.logger,\n                this.performanceClient,\n                this.correlationId\n            )(\n                serverTelemetryManager,\n                validRequest.authority,\n                validRequest.azureCloudOptions,\n                validRequest.account\n            );\n\n            const isNativeBroker = NativeMessageHandler.isNativeAvailable(\n                this.config,\n                this.logger,\n                this.nativeMessageHandler,\n                request.authenticationScheme\n            );\n            // Start measurement for server calls with native brokering enabled\n            let fetchNativeAccountIdMeasurement;\n            if (isNativeBroker) {\n                fetchNativeAccountIdMeasurement =\n                    this.performanceClient.startMeasurement(\n                        PerformanceEvents.FetchAccountIdWithNativeBroker,\n                        request.correlationId\n                    );\n            }\n\n            // Create acquire token url.\n            const navigateUrl = await authClient.getAuthCodeUrl({\n                ...validRequest,\n                nativeBroker: isNativeBroker,\n            });\n\n            // Create popup interaction handler.\n            const interactionHandler = new InteractionHandler(\n                authClient,\n                this.browserStorage,\n                authCodeRequest,\n                this.logger,\n                this.performanceClient\n            );\n\n            // Show the UI once the url has been created. Get the window handle for the popup.\n            const popupParameters: PopupParams = {\n                popup,\n                popupName,\n                popupWindowAttributes,\n            };\n            const popupWindow: Window = this.initiateAuthRequest(\n                navigateUrl,\n                popupParameters\n            );\n            this.eventHandler.emitEvent(\n                EventType.POPUP_OPENED,\n                InteractionType.Popup,\n                { popupWindow },\n                null\n            );\n\n            // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n            const responseString = await this.monitorPopupForHash(popupWindow);\n\n            const serverParams = invoke(\n                ResponseHandler.deserializeResponse,\n                PerformanceEvents.DeserializeResponse,\n                this.logger,\n                this.performanceClient,\n                this.correlationId\n            )(\n                responseString,\n                this.config.auth.OIDCOptions.serverResponseType,\n                this.logger\n            );\n            // Remove throttle if it exists\n            ThrottlingUtils.removeThrottle(\n                this.browserStorage,\n                this.config.auth.clientId,\n                authCodeRequest\n            );\n\n            if (serverParams.accountId) {\n                this.logger.verbose(\n                    \"Account id found in hash, calling WAM for token\"\n                );\n                // end measurement for server call with native brokering enabled\n                if (fetchNativeAccountIdMeasurement) {\n                    fetchNativeAccountIdMeasurement.end({\n                        success: true,\n                        isNativeBroker: true,\n                    });\n                }\n\n                if (!this.nativeMessageHandler) {\n                    throw createBrowserAuthError(\n                        BrowserAuthErrorCodes.nativeConnectionNotEstablished\n                    );\n                }\n                const nativeInteractionClient = new NativeInteractionClient(\n                    this.config,\n                    this.browserStorage,\n                    this.browserCrypto,\n                    this.logger,\n                    this.eventHandler,\n                    this.navigationClient,\n                    ApiId.acquireTokenPopup,\n                    this.performanceClient,\n                    this.nativeMessageHandler,\n                    serverParams.accountId,\n                    this.nativeStorage,\n                    validRequest.correlationId\n                );\n                const { userRequestState } = ProtocolUtils.parseRequestState(\n                    this.browserCrypto,\n                    validRequest.state\n                );\n                return await nativeInteractionClient.acquireToken({\n                    ...validRequest,\n                    state: userRequestState,\n                    prompt: undefined, // Server should handle the prompt, ideally native broker can do this part silently\n                });\n            }\n\n            // Handle response from hash string.\n            const result = await interactionHandler.handleCodeResponse(\n                serverParams,\n                validRequest\n            );\n\n            return result;\n        } catch (e) {\n            if (popup) {\n                // Close the synchronous popup if an error is thrown before the window unload event is registered\n                popup.close();\n            }\n\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            throw e;\n        }\n    }\n\n    /**\n     *\n     * @param validRequest\n     * @param popupName\n     * @param requestAuthority\n     * @param popup\n     * @param mainWindowRedirectUri\n     * @param popupWindowAttributes\n     */\n    protected async logoutPopupAsync(\n        validRequest: CommonEndSessionRequest,\n        popupName: string,\n        popupWindowAttributes: PopupWindowAttributes,\n        requestAuthority?: string,\n        popup?: Window | null,\n        mainWindowRedirectUri?: string\n    ): Promise<void> {\n        this.logger.verbose(\"logoutPopupAsync called\");\n        this.eventHandler.emitEvent(\n            EventType.LOGOUT_START,\n            InteractionType.Popup,\n            validRequest\n        );\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.logoutPopup\n        );\n\n        try {\n            // Clear cache on logout\n            await this.clearCacheOnLogout(validRequest.account);\n\n            // Initialize the client\n            const authClient = await invokeAsync(\n                this.createAuthCodeClient.bind(this),\n                PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n                this.logger,\n                this.performanceClient,\n                this.correlationId\n            )(\n                serverTelemetryManager,\n                requestAuthority,\n                undefined, // AzureCloudOptions\n                validRequest.account || undefined\n            );\n\n            try {\n                authClient.authority.endSessionEndpoint;\n            } catch {\n                if (\n                    validRequest.account?.homeAccountId &&\n                    validRequest.postLogoutRedirectUri &&\n                    authClient.authority.protocolMode === ProtocolMode.OIDC\n                ) {\n                    void this.browserStorage.removeAccount(\n                        validRequest.account?.homeAccountId\n                    );\n\n                    this.eventHandler.emitEvent(\n                        EventType.LOGOUT_SUCCESS,\n                        InteractionType.Popup,\n                        validRequest\n                    );\n\n                    if (mainWindowRedirectUri) {\n                        const navigationOptions: NavigationOptions = {\n                            apiId: ApiId.logoutPopup,\n                            timeout:\n                                this.config.system.redirectNavigationTimeout,\n                            noHistory: false,\n                        };\n                        const absoluteUrl = UrlString.getAbsoluteUrl(\n                            mainWindowRedirectUri,\n                            BrowserUtils.getCurrentUri()\n                        );\n                        await this.navigationClient.navigateInternal(\n                            absoluteUrl,\n                            navigationOptions\n                        );\n                    }\n\n                    if (popup) {\n                        popup.close();\n                    }\n\n                    return;\n                }\n            }\n\n            // Create logout string and navigate user window to logout.\n            const logoutUri: string = authClient.getLogoutUri(validRequest);\n\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_SUCCESS,\n                InteractionType.Popup,\n                validRequest\n            );\n\n            // Open the popup window to requestUrl.\n            const popupWindow = this.openPopup(logoutUri, {\n                popupName,\n                popupWindowAttributes,\n                popup,\n            });\n            this.eventHandler.emitEvent(\n                EventType.POPUP_OPENED,\n                InteractionType.Popup,\n                { popupWindow },\n                null\n            );\n\n            await this.monitorPopupForHash(popupWindow).catch(() => {\n                // Swallow any errors related to monitoring the window. Server logout is best effort\n            });\n\n            if (mainWindowRedirectUri) {\n                const navigationOptions: NavigationOptions = {\n                    apiId: ApiId.logoutPopup,\n                    timeout: this.config.system.redirectNavigationTimeout,\n                    noHistory: false,\n                };\n                const absoluteUrl = UrlString.getAbsoluteUrl(\n                    mainWindowRedirectUri,\n                    BrowserUtils.getCurrentUri()\n                );\n\n                this.logger.verbose(\n                    \"Redirecting main window to url specified in the request\"\n                );\n                this.logger.verbosePii(\n                    `Redirecting main window to: ${absoluteUrl}`\n                );\n                await this.navigationClient.navigateInternal(\n                    absoluteUrl,\n                    navigationOptions\n                );\n            } else {\n                this.logger.verbose(\"No main window navigation requested\");\n            }\n        } catch (e) {\n            if (popup) {\n                // Close the synchronous popup if an error is thrown before the window unload event is registered\n                popup.close();\n            }\n\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            this.browserStorage.setInteractionInProgress(false);\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_FAILURE,\n                InteractionType.Popup,\n                null,\n                e as EventError\n            );\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_END,\n                InteractionType.Popup\n            );\n            throw e;\n        }\n\n        this.eventHandler.emitEvent(\n            EventType.LOGOUT_END,\n            InteractionType.Popup\n        );\n    }\n\n    /**\n     * Opens a popup window with given request Url.\n     * @param requestUrl\n     */\n    initiateAuthRequest(requestUrl: string, params: PopupParams): Window {\n        // Check that request url is not empty.\n        if (requestUrl) {\n            this.logger.infoPii(`Navigate to: ${requestUrl}`);\n            // Open the popup window to requestUrl.\n            return this.openPopup(requestUrl, params);\n        } else {\n            // Throw error if request URL is empty.\n            this.logger.error(\"Navigate url is empty\");\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.emptyNavigateUri\n            );\n        }\n    }\n\n    /**\n     * Monitors a window until it loads a url with the same origin.\n     * @param popupWindow - window that is being monitored\n     * @param timeout - timeout for processing hash once popup is redirected back to application\n     */\n    monitorPopupForHash(popupWindow: Window): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            this.logger.verbose(\n                \"PopupHandler.monitorPopupForHash - polling started\"\n            );\n\n            const intervalId = setInterval(() => {\n                // Window is closed\n                if (popupWindow.closed) {\n                    this.logger.error(\n                        \"PopupHandler.monitorPopupForHash - window closed\"\n                    );\n                    clearInterval(intervalId);\n                    reject(\n                        createBrowserAuthError(\n                            BrowserAuthErrorCodes.userCancelled\n                        )\n                    );\n                    return;\n                }\n\n                let href = \"\";\n                try {\n                    /*\n                     * Will throw if cross origin,\n                     * which should be caught and ignored\n                     * since we need the interval to keep running while on STS UI.\n                     */\n                    href = popupWindow.location.href;\n                } catch (e) {}\n\n                // Don't process blank pages or cross domain\n                if (!href || href === \"about:blank\") {\n                    return;\n                }\n                clearInterval(intervalId);\n\n                let responseString = \"\";\n                const responseType =\n                    this.config.auth.OIDCOptions.serverResponseType;\n                if (popupWindow) {\n                    if (responseType === ServerResponseType.QUERY) {\n                        responseString = popupWindow.location.search;\n                    } else {\n                        responseString = popupWindow.location.hash;\n                    }\n                }\n\n                this.logger.verbose(\n                    \"PopupHandler.monitorPopupForHash - popup window is on same origin as caller\"\n                );\n\n                resolve(responseString);\n            }, this.config.system.pollIntervalMilliseconds);\n        }).finally(() => {\n            this.cleanPopup(popupWindow);\n        });\n    }\n\n    /**\n     * @hidden\n     *\n     * Configures popup window for login.\n     *\n     * @param urlNavigate\n     * @param title\n     * @param popUpWidth\n     * @param popUpHeight\n     * @param popupWindowAttributes\n     * @ignore\n     * @hidden\n     */\n    openPopup(urlNavigate: string, popupParams: PopupParams): Window {\n        try {\n            let popupWindow;\n            // Popup window passed in, setting url to navigate to\n            if (popupParams.popup) {\n                popupWindow = popupParams.popup;\n                this.logger.verbosePii(\n                    `Navigating popup window to: ${urlNavigate}`\n                );\n                popupWindow.location.assign(urlNavigate);\n            } else if (typeof popupParams.popup === \"undefined\") {\n                // Popup will be undefined if it was not passed in\n                this.logger.verbosePii(\n                    `Opening popup window to: ${urlNavigate}`\n                );\n                popupWindow = this.openSizedPopup(\n                    urlNavigate,\n                    popupParams.popupName,\n                    popupParams.popupWindowAttributes\n                );\n            }\n\n            // Popup will be null if popups are blocked\n            if (!popupWindow) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.emptyWindowError\n                );\n            }\n            if (popupWindow.focus) {\n                popupWindow.focus();\n            }\n            this.currentWindow = popupWindow;\n            window.addEventListener(\"beforeunload\", this.unloadWindow);\n\n            return popupWindow;\n        } catch (e) {\n            this.logger.error(\n                \"error opening popup \" + (e as AuthError).message\n            );\n            this.browserStorage.setInteractionInProgress(false);\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.popupWindowError\n            );\n        }\n    }\n\n    /**\n     * Helper function to set popup window dimensions and position\n     * @param urlNavigate\n     * @param popupName\n     * @param popupWindowAttributes\n     * @returns\n     */\n    openSizedPopup(\n        urlNavigate: string,\n        popupName: string,\n        popupWindowAttributes: PopupWindowAttributes\n    ): Window | null {\n        /**\n         * adding winLeft and winTop to account for dual monitor\n         * using screenLeft and screenTop for IE8 and earlier\n         */\n        const winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n        const winTop = window.screenTop ? window.screenTop : window.screenY;\n        /**\n         * window.innerWidth displays browser window\"s height and width excluding toolbars\n         * using document.documentElement.clientWidth for IE8 and earlier\n         */\n        const winWidth =\n            window.innerWidth ||\n            document.documentElement.clientWidth ||\n            document.body.clientWidth;\n        const winHeight =\n            window.innerHeight ||\n            document.documentElement.clientHeight ||\n            document.body.clientHeight;\n\n        let width = popupWindowAttributes.popupSize?.width;\n        let height = popupWindowAttributes.popupSize?.height;\n        let top = popupWindowAttributes.popupPosition?.top;\n        let left = popupWindowAttributes.popupPosition?.left;\n\n        if (!width || width < 0 || width > winWidth) {\n            this.logger.verbose(\n                \"Default popup window width used. Window width not configured or invalid.\"\n            );\n            width = BrowserConstants.POPUP_WIDTH;\n        }\n\n        if (!height || height < 0 || height > winHeight) {\n            this.logger.verbose(\n                \"Default popup window height used. Window height not configured or invalid.\"\n            );\n            height = BrowserConstants.POPUP_HEIGHT;\n        }\n\n        if (!top || top < 0 || top > winHeight) {\n            this.logger.verbose(\n                \"Default popup window top position used. Window top not configured or invalid.\"\n            );\n            top = Math.max(\n                0,\n                winHeight / 2 - BrowserConstants.POPUP_HEIGHT / 2 + winTop\n            );\n        }\n\n        if (!left || left < 0 || left > winWidth) {\n            this.logger.verbose(\n                \"Default popup window left position used. Window left not configured or invalid.\"\n            );\n            left = Math.max(\n                0,\n                winWidth / 2 - BrowserConstants.POPUP_WIDTH / 2 + winLeft\n            );\n        }\n\n        return window.open(\n            urlNavigate,\n            popupName,\n            `width=${width}, height=${height}, top=${top}, left=${left}, scrollbars=yes`\n        );\n    }\n\n    /**\n     * Event callback to unload main window.\n     */\n    unloadWindow(e: Event): void {\n        this.browserStorage.cleanRequestByInteractionType(\n            InteractionType.Popup\n        );\n        if (this.currentWindow) {\n            this.currentWindow.close();\n        }\n        // Guarantees browser unload will happen, so no other errors will be thrown.\n        e.preventDefault();\n    }\n\n    /**\n     * Closes popup, removes any state vars created during popup calls.\n     * @param popupWindow\n     */\n    cleanPopup(popupWindow?: Window): void {\n        if (popupWindow) {\n            // Close window.\n            popupWindow.close();\n        }\n        // Remove window unload function\n        window.removeEventListener(\"beforeunload\", this.unloadWindow);\n\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.setInteractionInProgress(false);\n    }\n\n    /**\n     * Generates the name for the popup based on the client id and request\n     * @param clientId\n     * @param request\n     */\n    generatePopupName(scopes: Array<string>, authority: string): string {\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${\n            this.config.auth.clientId\n        }.${scopes.join(\"-\")}.${authority}.${this.correlationId}`;\n    }\n\n    /**\n     * Generates the name for the popup based on the client id and request for logouts\n     * @param clientId\n     * @param request\n     */\n    generateLogoutPopupName(request: CommonEndSessionRequest): string {\n        const homeAccountId = request.account && request.account.homeAccountId;\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${homeAccountId}.${this.correlationId}`;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AuthorizationCodeClient,\n    CommonAuthorizationCodeRequest,\n    Logger,\n    ServerError,\n    IPerformanceClient,\n    createClientAuthError,\n    ClientAuthErrorCodes,\n    CcsCredential,\n    invokeAsync,\n    PerformanceEvents,\n    ServerAuthorizationCodeResponse,\n} from \"@azure/msal-common\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { ApiId, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\n\nexport type RedirectParams = {\n    navigationClient: INavigationClient;\n    redirectTimeout: number;\n    redirectStartPage: string;\n    onRedirectNavigate?: (url: string) => void | boolean;\n};\n\nexport class RedirectHandler {\n    authModule: AuthorizationCodeClient;\n    browserStorage: BrowserCacheManager;\n    authCodeRequest: CommonAuthorizationCodeRequest;\n    logger: Logger;\n    performanceClient: IPerformanceClient;\n\n    constructor(\n        authCodeModule: AuthorizationCodeClient,\n        storageImpl: BrowserCacheManager,\n        authCodeRequest: CommonAuthorizationCodeRequest,\n        logger: Logger,\n        performanceClient: IPerformanceClient\n    ) {\n        this.authModule = authCodeModule;\n        this.browserStorage = storageImpl;\n        this.authCodeRequest = authCodeRequest;\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Redirects window to given URL.\n     * @param urlNavigate\n     */\n    async initiateAuthRequest(\n        requestUrl: string,\n        params: RedirectParams\n    ): Promise<void> {\n        this.logger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n        // Navigate if valid URL\n        if (requestUrl) {\n            // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n            if (params.redirectStartPage) {\n                this.logger.verbose(\n                    \"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\"\n                );\n                this.browserStorage.setTemporaryCache(\n                    TemporaryCacheKeys.ORIGIN_URI,\n                    params.redirectStartPage,\n                    true\n                );\n            }\n\n            // Set interaction status in the library.\n            this.browserStorage.setTemporaryCache(\n                TemporaryCacheKeys.CORRELATION_ID,\n                this.authCodeRequest.correlationId,\n                true\n            );\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest);\n            this.logger.infoPii(\n                `RedirectHandler.initiateAuthRequest: Navigate to: ${requestUrl}`\n            );\n            const navigationOptions: NavigationOptions = {\n                apiId: ApiId.acquireTokenRedirect,\n                timeout: params.redirectTimeout,\n                noHistory: false,\n            };\n\n            // If onRedirectNavigate is implemented, invoke it and provide requestUrl\n            if (typeof params.onRedirectNavigate === \"function\") {\n                this.logger.verbose(\n                    \"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\"\n                );\n                const navigate = params.onRedirectNavigate(requestUrl);\n\n                // Returning false from onRedirectNavigate will stop navigation\n                if (navigate !== false) {\n                    this.logger.verbose(\n                        \"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\"\n                    );\n                    await params.navigationClient.navigateExternal(\n                        requestUrl,\n                        navigationOptions\n                    );\n                    return;\n                } else {\n                    this.logger.verbose(\n                        \"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\"\n                    );\n                    return;\n                }\n            } else {\n                // Navigate window to request URL\n                this.logger.verbose(\n                    \"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\"\n                );\n                await params.navigationClient.navigateExternal(\n                    requestUrl,\n                    navigationOptions\n                );\n                return;\n            }\n        } else {\n            // Throw error if request URL is empty.\n            this.logger.info(\n                \"RedirectHandler.initiateAuthRequest: Navigate url is empty\"\n            );\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.emptyNavigateUri\n            );\n        }\n    }\n\n    /**\n     * Handle authorization code response in the window.\n     * @param hash\n     */\n    async handleCodeResponse(\n        response: ServerAuthorizationCodeResponse,\n        state: string\n    ): Promise<AuthenticationResult> {\n        this.logger.verbose(\"RedirectHandler.handleCodeResponse called\");\n\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.setInteractionInProgress(false);\n\n        // Handle code response.\n        const stateKey = this.browserStorage.generateStateKey(state);\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.stateNotFound,\n                \"Cached State\"\n            );\n        }\n\n        let authCodeResponse;\n        try {\n            authCodeResponse = this.authModule.handleFragmentResponse(\n                response,\n                requestState\n            );\n        } catch (e) {\n            if (\n                e instanceof ServerError &&\n                e.subError === BrowserAuthErrorCodes.userCancelled\n            ) {\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.userCancelled\n                );\n            } else {\n                throw e;\n            }\n        }\n\n        // Get cached items\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n\n        // Assign code to request\n        this.authCodeRequest.code = authCodeResponse.code;\n\n        // Check for new cloud instance\n        if (authCodeResponse.cloud_instance_host_name) {\n            await invokeAsync(\n                this.authModule.updateAuthority.bind(this.authModule),\n                PerformanceEvents.UpdateTokenEndpointAuthority,\n                this.logger,\n                this.performanceClient,\n                this.authCodeRequest.correlationId\n            )(\n                authCodeResponse.cloud_instance_host_name,\n                this.authCodeRequest.correlationId\n            );\n        }\n\n        authCodeResponse.nonce = cachedNonce || undefined;\n        authCodeResponse.state = requestState;\n\n        // Add CCS parameters if available\n        if (authCodeResponse.client_info) {\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n        } else {\n            const cachedCcsCred = this.checkCcsCredentials();\n            if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n            }\n        }\n\n        // Acquire token with retrieved code.\n        const tokenResponse = (await this.authModule.acquireToken(\n            this.authCodeRequest,\n            authCodeResponse\n        )) as AuthenticationResult;\n\n        this.browserStorage.cleanRequestByState(state);\n        return tokenResponse;\n    }\n\n    /**\n     * Looks up ccs creds in the cache\n     */\n    protected checkCcsCredentials(): CcsCredential | null {\n        // Look up ccs credential in temp cache\n        const cachedCcsCred = this.browserStorage.getTemporaryCache(\n            TemporaryCacheKeys.CCS_CREDENTIAL,\n            true\n        );\n        if (cachedCcsCred) {\n            try {\n                return JSON.parse(cachedCcsCred) as CcsCredential;\n            } catch (e) {\n                this.authModule.logger.error(\n                    \"Cache credential could not be parsed\"\n                );\n                this.authModule.logger.errorPii(\n                    `Cache credential could not be parsed: ${cachedCcsCred}`\n                );\n            }\n        }\n        return null;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    CommonAuthorizationCodeRequest,\n    AuthorizationCodeClient,\n    UrlString,\n    AuthError,\n    ServerTelemetryManager,\n    Constants,\n    ProtocolUtils,\n    ServerAuthorizationCodeResponse,\n    ThrottlingUtils,\n    ICrypto,\n    Logger,\n    IPerformanceClient,\n    PerformanceEvents,\n    ProtocolMode,\n    invokeAsync,\n    ServerResponseType,\n    UrlUtils,\n} from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport {\n    ApiId,\n    InteractionType,\n    TemporaryCacheKeys,\n} from \"../utils/BrowserConstants\";\nimport { RedirectHandler } from \"../interaction_handler/RedirectHandler\";\nimport * as BrowserUtils from \"../utils/BrowserUtils\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { EventType } from \"../event/EventType\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { EventError } from \"../event/EventMessage\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport * as ResponseHandler from \"../response/ResponseHandler\";\n\nexport class RedirectClient extends StandardInteractionClient {\n    protected nativeStorage: BrowserCacheManager;\n\n    constructor(\n        config: BrowserConfiguration,\n        storageImpl: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        performanceClient: IPerformanceClient,\n        nativeStorageImpl: BrowserCacheManager,\n        nativeMessageHandler?: NativeMessageHandler,\n        correlationId?: string\n    ) {\n        super(\n            config,\n            storageImpl,\n            browserCrypto,\n            logger,\n            eventHandler,\n            navigationClient,\n            performanceClient,\n            nativeMessageHandler,\n            correlationId\n        );\n        this.nativeStorage = nativeStorageImpl;\n    }\n\n    /**\n     * Redirects the page to the /authorize endpoint of the IDP\n     * @param request\n     */\n    async acquireToken(request: RedirectRequest): Promise<void> {\n        const validRequest = await invokeAsync(\n            this.initializeAuthorizationRequest.bind(this),\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(request, InteractionType.Redirect);\n\n        this.browserStorage.updateCacheEntries(\n            validRequest.state,\n            validRequest.nonce,\n            validRequest.authority,\n            validRequest.loginHint || \"\",\n            validRequest.account || null\n        );\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.acquireTokenRedirect\n        );\n\n        const handleBackButton = (event: PageTransitionEvent) => {\n            // Clear temporary cache if the back button is clicked during the redirect flow.\n            if (event.persisted) {\n                this.logger.verbose(\n                    \"Page was restored from back/forward cache. Clearing temporary cache.\"\n                );\n                this.browserStorage.cleanRequestByState(validRequest.state);\n                this.eventHandler.emitEvent(\n                    EventType.RESTORE_FROM_BFCACHE,\n                    InteractionType.Redirect\n                );\n            }\n        };\n\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest: CommonAuthorizationCodeRequest =\n                await invokeAsync(\n                    this.initializeAuthorizationCodeRequest.bind(this),\n                    PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\n                    this.logger,\n                    this.performanceClient,\n                    this.correlationId\n                )(validRequest);\n\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await invokeAsync(\n                this.createAuthCodeClient.bind(this),\n                PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n                this.logger,\n                this.performanceClient,\n                this.correlationId\n            )(\n                serverTelemetryManager,\n                validRequest.authority,\n                validRequest.azureCloudOptions,\n                validRequest.account\n            );\n\n            // Create redirect interaction handler.\n            const interactionHandler = new RedirectHandler(\n                authClient,\n                this.browserStorage,\n                authCodeRequest,\n                this.logger,\n                this.performanceClient\n            );\n\n            // Create acquire token url.\n            const navigateUrl = await authClient.getAuthCodeUrl({\n                ...validRequest,\n                nativeBroker: NativeMessageHandler.isNativeAvailable(\n                    this.config,\n                    this.logger,\n                    this.nativeMessageHandler,\n                    request.authenticationScheme\n                ),\n            });\n\n            const redirectStartPage = this.getRedirectStartPage(\n                request.redirectStartPage\n            );\n            this.logger.verbosePii(`Redirect start page: ${redirectStartPage}`);\n\n            // Clear temporary cache if the back button is clicked during the redirect flow.\n            window.addEventListener(\"pageshow\", handleBackButton);\n\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n            return await interactionHandler.initiateAuthRequest(navigateUrl, {\n                navigationClient: this.navigationClient,\n                redirectTimeout: this.config.system.redirectNavigationTimeout,\n                redirectStartPage: redirectStartPage,\n                onRedirectNavigate: request.onRedirectNavigate,\n            });\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            window.removeEventListener(\"pageshow\", handleBackButton);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     * Checks if navigateToLoginRequestUrl is set, and:\n     * - if true, performs logic to cache and navigate\n     * - if false, handles hash string and parses response\n     * @param hash {string?} url hash\n     * @param performanceClient {IPerformanceClient?}\n     * @param correlationId {string?} correlation identifier\n     */\n    async handleRedirectPromise(\n        hash?: string,\n        performanceClient?: IPerformanceClient,\n        correlationId?: string\n    ): Promise<AuthenticationResult | null> {\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.handleRedirectPromise\n        );\n        try {\n            if (!this.browserStorage.isInteractionInProgress(true)) {\n                this.logger.info(\n                    \"handleRedirectPromise called but there is no interaction in progress, returning null.\"\n                );\n                return null;\n            }\n            const [serverParams, responseString] = this.getRedirectResponse(\n                hash || \"\"\n            );\n            if (!serverParams) {\n                // Not a recognized server response hash or hash not associated with a redirect request\n                this.logger.info(\n                    \"handleRedirectPromise did not detect a response as a result of a redirect. Cleaning temporary cache.\"\n                );\n                this.browserStorage.cleanRequestByInteractionType(\n                    InteractionType.Redirect\n                );\n                if (performanceClient && correlationId) {\n                    performanceClient?.addFields(\n                        { errorCode: \"no_server_response\" },\n                        correlationId\n                    );\n                }\n                return null;\n            }\n\n            // If navigateToLoginRequestUrl is true, get the url where the redirect request was initiated\n            const loginRequestUrl =\n                this.browserStorage.getTemporaryCache(\n                    TemporaryCacheKeys.ORIGIN_URI,\n                    true\n                ) || Constants.EMPTY_STRING;\n            const loginRequestUrlNormalized =\n                UrlString.removeHashFromUrl(loginRequestUrl);\n            const currentUrlNormalized = UrlString.removeHashFromUrl(\n                window.location.href\n            );\n\n            if (\n                loginRequestUrlNormalized === currentUrlNormalized &&\n                this.config.auth.navigateToLoginRequestUrl\n            ) {\n                // We are on the page we need to navigate to - handle hash\n                this.logger.verbose(\n                    \"Current page is loginRequestUrl, handling response\"\n                );\n\n                if (loginRequestUrl.indexOf(\"#\") > -1) {\n                    // Replace current hash with non-msal hash, if present\n                    BrowserUtils.replaceHash(loginRequestUrl);\n                }\n\n                const handleHashResult = await this.handleResponse(\n                    serverParams,\n                    serverTelemetryManager\n                );\n\n                return handleHashResult;\n            } else if (!this.config.auth.navigateToLoginRequestUrl) {\n                this.logger.verbose(\n                    \"NavigateToLoginRequestUrl set to false, handling response\"\n                );\n                return await this.handleResponse(\n                    serverParams,\n                    serverTelemetryManager\n                );\n            } else if (\n                !BrowserUtils.isInIframe() ||\n                this.config.system.allowRedirectInIframe\n            ) {\n                /*\n                 * Returned from authority using redirect - need to perform navigation before processing response\n                 * Cache the hash to be retrieved after the next redirect\n                 */\n                this.browserStorage.setTemporaryCache(\n                    TemporaryCacheKeys.URL_HASH,\n                    responseString,\n                    true\n                );\n                const navigationOptions: NavigationOptions = {\n                    apiId: ApiId.handleRedirectPromise,\n                    timeout: this.config.system.redirectNavigationTimeout,\n                    noHistory: true,\n                };\n\n                /**\n                 * Default behavior is to redirect to the start page and not process the hash now.\n                 * The start page is expected to also call handleRedirectPromise which will process the hash in one of the checks above.\n                 */\n                let processHashOnRedirect: boolean = true;\n                if (!loginRequestUrl || loginRequestUrl === \"null\") {\n                    // Redirect to home page if login request url is null (real null or the string null)\n                    const homepage = BrowserUtils.getHomepage();\n                    // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n                    this.browserStorage.setTemporaryCache(\n                        TemporaryCacheKeys.ORIGIN_URI,\n                        homepage,\n                        true\n                    );\n                    this.logger.warning(\n                        \"Unable to get valid login request url from cache, redirecting to home page\"\n                    );\n                    processHashOnRedirect =\n                        await this.navigationClient.navigateInternal(\n                            homepage,\n                            navigationOptions\n                        );\n                } else {\n                    // Navigate to page that initiated the redirect request\n                    this.logger.verbose(\n                        `Navigating to loginRequestUrl: ${loginRequestUrl}`\n                    );\n                    processHashOnRedirect =\n                        await this.navigationClient.navigateInternal(\n                            loginRequestUrl,\n                            navigationOptions\n                        );\n                }\n\n                // If navigateInternal implementation returns false, handle the hash now\n                if (!processHashOnRedirect) {\n                    return await this.handleResponse(\n                        serverParams,\n                        serverTelemetryManager\n                    );\n                }\n            }\n\n            return null;\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            this.browserStorage.cleanRequestByInteractionType(\n                InteractionType.Redirect\n            );\n            throw e;\n        }\n    }\n\n    /**\n     * Gets the response hash for a redirect request\n     * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\n     * @param hash\n     */\n    protected getRedirectResponse(\n        userProvidedResponse: string\n    ): [ServerAuthorizationCodeResponse | null, string] {\n        this.logger.verbose(\"getRedirectResponseHash called\");\n        // Get current location hash from window or cache.\n        let responseString = userProvidedResponse;\n        if (!responseString) {\n            if (\n                this.config.auth.OIDCOptions.serverResponseType ===\n                ServerResponseType.QUERY\n            ) {\n                responseString = window.location.search;\n            } else {\n                responseString = window.location.hash;\n            }\n        }\n        let response = UrlUtils.getDeserializedResponse(responseString);\n\n        if (response) {\n            try {\n                ResponseHandler.validateInteractionType(\n                    response,\n                    this.browserCrypto,\n                    InteractionType.Redirect\n                );\n            } catch (e) {\n                if (e instanceof AuthError) {\n                    this.logger.error(\n                        `Interaction type validation failed due to ${e.errorCode}: ${e.errorMessage}`\n                    );\n                }\n                return [null, \"\"];\n            }\n\n            BrowserUtils.clearHash(window);\n            this.logger.verbose(\n                \"Hash contains known properties, returning response hash\"\n            );\n            return [response, responseString];\n        }\n\n        const cachedHash = this.browserStorage.getTemporaryCache(\n            TemporaryCacheKeys.URL_HASH,\n            true\n        );\n        this.browserStorage.removeItem(\n            this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH)\n        );\n\n        if (cachedHash) {\n            response = UrlUtils.getDeserializedResponse(cachedHash);\n            if (response) {\n                this.logger.verbose(\n                    \"Hash does not contain known properties, returning cached hash\"\n                );\n                return [response, cachedHash];\n            }\n        }\n\n        return [null, \"\"];\n    }\n\n    /**\n     * Checks if hash exists and handles in window.\n     * @param hash\n     * @param state\n     */\n    protected async handleResponse(\n        serverParams: ServerAuthorizationCodeResponse,\n        serverTelemetryManager: ServerTelemetryManager\n    ): Promise<AuthenticationResult> {\n        const state = serverParams.state;\n        if (!state) {\n            throw createBrowserAuthError(BrowserAuthErrorCodes.noStateInHash);\n        }\n\n        const cachedRequest = this.browserStorage.getCachedRequest(state);\n        this.logger.verbose(\"handleResponse called, retrieved cached request\");\n\n        if (serverParams.accountId) {\n            this.logger.verbose(\n                \"Account id found in hash, calling WAM for token\"\n            );\n            if (!this.nativeMessageHandler) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.nativeConnectionNotEstablished\n                );\n            }\n            const nativeInteractionClient = new NativeInteractionClient(\n                this.config,\n                this.browserStorage,\n                this.browserCrypto,\n                this.logger,\n                this.eventHandler,\n                this.navigationClient,\n                ApiId.acquireTokenPopup,\n                this.performanceClient,\n                this.nativeMessageHandler,\n                serverParams.accountId,\n                this.nativeStorage,\n                cachedRequest.correlationId\n            );\n            const { userRequestState } = ProtocolUtils.parseRequestState(\n                this.browserCrypto,\n                state\n            );\n            return nativeInteractionClient\n                .acquireToken({\n                    ...cachedRequest,\n                    state: userRequestState,\n                    prompt: undefined, // Server should handle the prompt, ideally native broker can do this part silently\n                })\n                .finally(() => {\n                    this.browserStorage.cleanRequestByState(state);\n                });\n        }\n\n        // Hash contains known properties - handle and return in callback\n        const currentAuthority = this.browserStorage.getCachedAuthority(state);\n        if (!currentAuthority) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.noCachedAuthorityError\n            );\n        }\n\n        const authClient = await invokeAsync(\n            this.createAuthCodeClient.bind(this),\n            PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(serverTelemetryManager, currentAuthority);\n\n        ThrottlingUtils.removeThrottle(\n            this.browserStorage,\n            this.config.auth.clientId,\n            cachedRequest\n        );\n        const interactionHandler = new RedirectHandler(\n            authClient,\n            this.browserStorage,\n            cachedRequest,\n            this.logger,\n            this.performanceClient\n        );\n        return interactionHandler.handleCodeResponse(serverParams, state);\n    }\n\n    /**\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param logoutRequest\n     */\n    async logout(logoutRequest?: EndSessionRequest): Promise<void> {\n        this.logger.verbose(\"logoutRedirect called\");\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.logout\n        );\n\n        try {\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_START,\n                InteractionType.Redirect,\n                logoutRequest\n            );\n\n            // Clear cache on logout\n            await this.clearCacheOnLogout(validLogoutRequest.account);\n\n            const navigationOptions: NavigationOptions = {\n                apiId: ApiId.logout,\n                timeout: this.config.system.redirectNavigationTimeout,\n                noHistory: false,\n            };\n\n            const authClient = await invokeAsync(\n                this.createAuthCodeClient.bind(this),\n                PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n                this.logger,\n                this.performanceClient,\n                this.correlationId\n            )(\n                serverTelemetryManager,\n                logoutRequest && logoutRequest.authority,\n                undefined, // AzureCloudOptions\n                (logoutRequest && logoutRequest.account) || undefined\n            );\n\n            if (authClient.authority.protocolMode === ProtocolMode.OIDC) {\n                try {\n                    authClient.authority.endSessionEndpoint;\n                } catch {\n                    if (validLogoutRequest.account?.homeAccountId) {\n                        void this.browserStorage.removeAccount(\n                            validLogoutRequest.account?.homeAccountId\n                        );\n\n                        this.eventHandler.emitEvent(\n                            EventType.LOGOUT_SUCCESS,\n                            InteractionType.Redirect,\n                            validLogoutRequest\n                        );\n\n                        return;\n                    }\n                }\n            }\n\n            // Create logout string and navigate user window to logout.\n            const logoutUri: string =\n                authClient.getLogoutUri(validLogoutRequest);\n\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_SUCCESS,\n                InteractionType.Redirect,\n                validLogoutRequest\n            );\n            // Check if onRedirectNavigate is implemented, and invoke it if so\n            if (\n                logoutRequest &&\n                typeof logoutRequest.onRedirectNavigate === \"function\"\n            ) {\n                const navigate = logoutRequest.onRedirectNavigate(logoutUri);\n\n                if (navigate !== false) {\n                    this.logger.verbose(\n                        \"Logout onRedirectNavigate did not return false, navigating\"\n                    );\n                    // Ensure interaction is in progress\n                    if (!this.browserStorage.getInteractionInProgress()) {\n                        this.browserStorage.setInteractionInProgress(true);\n                    }\n                    await this.navigationClient.navigateExternal(\n                        logoutUri,\n                        navigationOptions\n                    );\n                    return;\n                } else {\n                    // Ensure interaction is not in progress\n                    this.browserStorage.setInteractionInProgress(false);\n                    this.logger.verbose(\n                        \"Logout onRedirectNavigate returned false, stopping navigation\"\n                    );\n                }\n            } else {\n                // Ensure interaction is in progress\n                if (!this.browserStorage.getInteractionInProgress()) {\n                    this.browserStorage.setInteractionInProgress(true);\n                }\n                await this.navigationClient.navigateExternal(\n                    logoutUri,\n                    navigationOptions\n                );\n                return;\n            }\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_FAILURE,\n                InteractionType.Redirect,\n                null,\n                e as EventError\n            );\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_END,\n                InteractionType.Redirect\n            );\n            throw e;\n        }\n\n        this.eventHandler.emitEvent(\n            EventType.LOGOUT_END,\n            InteractionType.Redirect\n        );\n    }\n\n    /**\n     * Use to get the redirectStartPage either from request or use current window\n     * @param requestStartPage\n     */\n    protected getRedirectStartPage(requestStartPage?: string): string {\n        const redirectStartPage = requestStartPage || window.location.href;\n        return UrlString.getAbsoluteUrl(\n            redirectStartPage,\n            BrowserUtils.getCurrentUri()\n        );\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INavigationClient } from \"./INavigationClient\";\nimport { NavigationOptions } from \"./NavigationOptions\";\n\nexport class NavigationClient implements INavigationClient {\n    /**\n     * Navigates to other pages within the same web application\n     * @param url\n     * @param options\n     */\n    navigateInternal(\n        url: string,\n        options: NavigationOptions\n    ): Promise<boolean> {\n        return NavigationClient.defaultNavigateWindow(url, options);\n    }\n\n    /**\n     * Navigates to other pages outside the web application i.e. the Identity Provider\n     * @param url\n     * @param options\n     */\n    navigateExternal(\n        url: string,\n        options: NavigationOptions\n    ): Promise<boolean> {\n        return NavigationClient.defaultNavigateWindow(url, options);\n    }\n\n    /**\n     * Default navigation implementation invoked by the internal and external functions\n     * @param url\n     * @param options\n     */\n    private static defaultNavigateWindow(\n        url: string,\n        options: NavigationOptions\n    ): Promise<boolean> {\n        if (options.noHistory) {\n            window.location.replace(url);\n        } else {\n            window.location.assign(url);\n        }\n\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve(true);\n            }, options.timeout);\n        });\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Constants,\n    INetworkModule,\n    NetworkRequestOptions,\n    NetworkResponse,\n} from \"@azure/msal-common\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { HTTP_REQUEST_TYPE } from \"../utils/BrowserConstants\";\n\n/**\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n */\nexport class FetchClient implements INetworkModule {\n    /**\n     * Fetch Client for REST endpoints - Get request\n     * @param url\n     * @param headers\n     * @param body\n     */\n    async sendGetRequestAsync<T>(\n        url: string,\n        options?: NetworkRequestOptions\n    ): Promise<NetworkResponse<T>> {\n        let response;\n        try {\n            response = await fetch(url, {\n                method: HTTP_REQUEST_TYPE.GET,\n                headers: this.getFetchHeaders(options),\n            });\n        } catch (e) {\n            if (window.navigator.onLine) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.getRequestFailed\n                );\n            } else {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.noNetworkConnectivity\n                );\n            }\n        }\n\n        try {\n            return {\n                headers: this.getHeaderDict(response.headers),\n                body: (await response.json()) as T,\n                status: response.status,\n            };\n        } catch (e) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.failedToParseResponse\n            );\n        }\n    }\n\n    /**\n     * Fetch Client for REST endpoints - Post request\n     * @param url\n     * @param headers\n     * @param body\n     */\n    async sendPostRequestAsync<T>(\n        url: string,\n        options?: NetworkRequestOptions\n    ): Promise<NetworkResponse<T>> {\n        const reqBody = (options && options.body) || Constants.EMPTY_STRING;\n\n        let response;\n        try {\n            response = await fetch(url, {\n                method: HTTP_REQUEST_TYPE.POST,\n                headers: this.getFetchHeaders(options),\n                body: reqBody,\n            });\n        } catch (e) {\n            if (window.navigator.onLine) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.postRequestFailed\n                );\n            } else {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.noNetworkConnectivity\n                );\n            }\n        }\n\n        try {\n            return {\n                headers: this.getHeaderDict(response.headers),\n                body: (await response.json()) as T,\n                status: response.status,\n            };\n        } catch (e) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.failedToParseResponse\n            );\n        }\n    }\n\n    /**\n     * Get Fetch API Headers object from string map\n     * @param inputHeaders\n     */\n    private getFetchHeaders(options?: NetworkRequestOptions): Headers {\n        const headers = new Headers();\n        if (!(options && options.headers)) {\n            return headers;\n        }\n        const optionsHeaders = options.headers;\n        Object.keys(optionsHeaders).forEach((key) => {\n            headers.append(key, optionsHeaders[key]);\n        });\n        return headers;\n    }\n\n    private getHeaderDict(headers: Headers): Record<string, string> {\n        const headerDict: Record<string, string> = {};\n        headers.forEach((value: string, key: string) => {\n            headerDict[key] = value;\n        });\n        return headerDict;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    SystemOptions,\n    LoggerOptions,\n    INetworkModule,\n    DEFAULT_SYSTEM_OPTIONS,\n    Constants,\n    ProtocolMode,\n    OIDCOptions,\n    ServerResponseType,\n    LogLevel,\n    StubbedNetworkModule,\n    AzureCloudInstance,\n    AzureCloudOptions,\n    ApplicationTelemetry,\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n    IPerformanceClient,\n    StubPerformanceClient,\n    Logger,\n} from \"@azure/msal-common\";\nimport {\n    BrowserCacheLocation,\n    BrowserConstants,\n} from \"../utils/BrowserConstants\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { NavigationClient } from \"../navigation/NavigationClient\";\nimport { FetchClient } from \"../network/FetchClient\";\n\n// Default timeout for popup windows and iframes in milliseconds\nexport const DEFAULT_POPUP_TIMEOUT_MS = 60000;\nexport const DEFAULT_IFRAME_TIMEOUT_MS = 10000;\nexport const DEFAULT_REDIRECT_TIMEOUT_MS = 30000;\nexport const DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS = 2000;\n\n/**\n * Use this to configure the auth options in the Configuration object\n */\nexport type BrowserAuthOptions = {\n    /**\n     * Client ID of your app registered with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview in Microsoft Identity Platform\n     */\n    clientId: string;\n    /**\n     * You can configure a specific authority, defaults to \" \" or \"https://login.microsoftonline.com/common\"\n     */\n    authority?: string;\n    /**\n     * An array of URIs that are known to be valid. Used in B2C scenarios.\n     */\n    knownAuthorities?: Array<string>;\n    /**\n     * A string containing the cloud discovery response. Used in AAD scenarios.\n     */\n    cloudDiscoveryMetadata?: string;\n    /**\n     * A string containing the .well-known/openid-configuration endpoint response\n     */\n    authorityMetadata?: string;\n    /**\n     * The redirect URI where authentication responses can be received by your application. It must exactly match one of the redirect URIs registered in the Azure portal.\n     */\n    redirectUri?: string;\n    /**\n     * The redirect URI where the window navigates after a successful logout.\n     */\n    postLogoutRedirectUri?: string | null;\n    /**\n     * Boolean indicating whether to navigate to the original request URL after the auth server navigates to the redirect URL.\n     */\n    navigateToLoginRequestUrl?: boolean;\n    /**\n     * Array of capabilities which will be added to the claims.access_token.xms_cc request property on every network request.\n     */\n    clientCapabilities?: Array<string>;\n    /**\n     * Enum that represents the protocol that msal follows. Used for configuring proper endpoints.\n     */\n    protocolMode?: ProtocolMode;\n    /**\n     * Enum that configures options for the OIDC protocol mode.\n     */\n    OIDCOptions?: OIDCOptions;\n    /**\n     * Enum that represents the Azure Cloud to use.\n     */\n    azureCloudOptions?: AzureCloudOptions;\n    /**\n     * Flag of whether to use the local metadata cache\n     */\n    skipAuthorityMetadataCache?: boolean;\n    /**\n     * App supports nested app auth or not; defaults to false\n     */\n    supportsNestedAppAuth?: boolean;\n};\n\n/** @internal */\nexport type InternalAuthOptions = Required<BrowserAuthOptions> & {\n    OIDCOptions: Required<OIDCOptions>;\n};\n\n/**\n * Use this to configure the below cache configuration options:\n */\nexport type CacheOptions = {\n    /**\n     * Used to specify the cacheLocation user wants to set. Valid values are \"localStorage\", \"sessionStorage\" and \"memoryStorage\".\n     */\n    cacheLocation?: BrowserCacheLocation | string;\n    /**\n     * Used to specify the temporaryCacheLocation user wants to set. Valid values are \"localStorage\", \"sessionStorage\" and \"memoryStorage\".\n     */\n    temporaryCacheLocation?: BrowserCacheLocation | string;\n    /**\n     * If set, MSAL stores the auth request state required for validation of the auth flows in the browser cookies. By default this flag is set to false.\n     */\n    storeAuthStateInCookie?: boolean;\n    /**\n     * If set, MSAL sets the \"Secure\" flag on cookies so they can only be sent over HTTPS. By default this flag is set to false.\n     */\n    secureCookies?: boolean;\n    /**\n     * If set, MSAL will attempt to migrate cache entries from older versions on initialization. By default this flag is set to true if cacheLocation is localStorage, otherwise false.\n     */\n    cacheMigrationEnabled?: boolean;\n    /**\n     * Flag that determines whether access tokens are stored based on requested claims\n     */\n    claimsBasedCachingEnabled?: boolean;\n};\n\nexport type BrowserSystemOptions = SystemOptions & {\n    /**\n     * Used to initialize the Logger object (See ClientConfiguration.ts)\n     */\n    loggerOptions?: LoggerOptions;\n    /**\n     * Network interface implementation\n     */\n    networkClient?: INetworkModule;\n    /**\n     * Override the methods used to navigate to other webpages. Particularly useful if you are using a client-side router\n     */\n    navigationClient?: INavigationClient;\n    /**\n     * Sets the timeout for waiting for a response hash in a popup. Will take precedence over loadFrameTimeout if both are set.\n     */\n    windowHashTimeout?: number;\n    /**\n     * Sets the timeout for waiting for a response hash in an iframe. Will take precedence over loadFrameTimeout if both are set.\n     */\n    iframeHashTimeout?: number;\n    /**\n     * Sets the timeout for waiting for a response hash in an iframe or popup\n     */\n    loadFrameTimeout?: number;\n    /**\n     * Maximum time the library should wait for a frame to load\n     * @deprecated This was previously needed for older browsers which are no longer supported by MSAL.js. This option will be removed in the next major version\n     */\n    navigateFrameWait?: number;\n    /**\n     * Time to wait for redirection to occur before resolving promise\n     */\n    redirectNavigationTimeout?: number;\n    /**\n     * Sets whether popups are opened asynchronously. By default, this flag is set to false. When set to false, blank popups are opened before anything else happens. When set to true, popups are opened when making the network request.\n     */\n    asyncPopups?: boolean;\n    /**\n     * Flag to enable redirect opertaions when the app is rendered in an iframe (to support scenarios such as embedded B2C login).\n     */\n    allowRedirectInIframe?: boolean;\n    /**\n     * Flag to enable native broker support (e.g. acquiring tokens from WAM on Windows)\n     */\n    allowNativeBroker?: boolean;\n    /**\n     * Sets the timeout for waiting for the native broker handshake to resolve\n     */\n    nativeBrokerHandshakeTimeout?: number;\n    /**\n     * Sets the interval length in milliseconds for polling the location attribute in popup windows (default is 30ms)\n     */\n    pollIntervalMilliseconds?: number;\n};\n\n/**\n * Telemetry Options\n */\nexport type BrowserTelemetryOptions = {\n    /**\n     * Telemetry information sent on request\n     * - appName: Unique string name of an application\n     * - appVersion: Version of the application using MSAL\n     */\n    application?: ApplicationTelemetry;\n\n    client?: IPerformanceClient;\n};\n\n/**\n * This object allows you to configure important elements of MSAL functionality and is passed into the constructor of PublicClientApplication\n */\nexport type Configuration = {\n    /**\n     * This is where you configure auth elements like clientID, authority used for authenticating against the Microsoft Identity Platform\n     */\n    auth: BrowserAuthOptions;\n    /**\n     * This is where you configure cache location and whether to store cache in cookies\n     */\n    cache?: CacheOptions;\n    /**\n     * This is where you can configure the network client, logger, token renewal offset\n     */\n    system?: BrowserSystemOptions;\n    /**\n     * This is where you can configure telemetry data and options\n     */\n    telemetry?: BrowserTelemetryOptions;\n};\n\n/** @internal */\nexport type BrowserConfiguration = {\n    auth: InternalAuthOptions;\n    cache: Required<CacheOptions>;\n    system: Required<BrowserSystemOptions>;\n    telemetry: Required<BrowserTelemetryOptions>;\n};\n\n/**\n * MSAL function that sets the default options when not explicitly configured from app developer\n *\n * @param auth\n * @param cache\n * @param system\n *\n * @returns Configuration object\n */\nexport function buildConfiguration(\n    {\n        auth: userInputAuth,\n        cache: userInputCache,\n        system: userInputSystem,\n        telemetry: userInputTelemetry,\n    }: Configuration,\n    isBrowserEnvironment: boolean\n): BrowserConfiguration {\n    // Default auth options for browser\n    const DEFAULT_AUTH_OPTIONS: InternalAuthOptions = {\n        clientId: Constants.EMPTY_STRING,\n        authority: `${Constants.DEFAULT_AUTHORITY}`,\n        knownAuthorities: [],\n        cloudDiscoveryMetadata: Constants.EMPTY_STRING,\n        authorityMetadata: Constants.EMPTY_STRING,\n        redirectUri: Constants.EMPTY_STRING,\n        postLogoutRedirectUri: Constants.EMPTY_STRING,\n        navigateToLoginRequestUrl: true,\n        clientCapabilities: [],\n        protocolMode: ProtocolMode.AAD,\n        OIDCOptions: {\n            serverResponseType: ServerResponseType.FRAGMENT,\n            defaultScopes: [\n                Constants.OPENID_SCOPE,\n                Constants.PROFILE_SCOPE,\n                Constants.OFFLINE_ACCESS_SCOPE,\n            ],\n        },\n        azureCloudOptions: {\n            azureCloudInstance: AzureCloudInstance.None,\n            tenant: Constants.EMPTY_STRING,\n        },\n        skipAuthorityMetadataCache: false,\n        supportsNestedAppAuth: false,\n    };\n\n    // Default cache options for browser\n    const DEFAULT_CACHE_OPTIONS: Required<CacheOptions> = {\n        cacheLocation: BrowserCacheLocation.SessionStorage,\n        temporaryCacheLocation: BrowserCacheLocation.SessionStorage,\n        storeAuthStateInCookie: false,\n        secureCookies: false,\n        // Default cache migration to true if cache location is localStorage since entries are preserved across tabs/windows. Migration has little to no benefit in sessionStorage and memoryStorage\n        cacheMigrationEnabled:\n            userInputCache &&\n            userInputCache.cacheLocation === BrowserCacheLocation.LocalStorage\n                ? true\n                : false,\n        claimsBasedCachingEnabled: false,\n    };\n\n    // Default logger options for browser\n    const DEFAULT_LOGGER_OPTIONS: LoggerOptions = {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        loggerCallback: (): void => {\n            // allow users to not set logger call back\n        },\n        logLevel: LogLevel.Info,\n        piiLoggingEnabled: false,\n    };\n\n    // Default system options for browser\n    const DEFAULT_BROWSER_SYSTEM_OPTIONS: Required<BrowserSystemOptions> = {\n        ...DEFAULT_SYSTEM_OPTIONS,\n        loggerOptions: DEFAULT_LOGGER_OPTIONS,\n        networkClient: isBrowserEnvironment\n            ? new FetchClient()\n            : StubbedNetworkModule,\n        navigationClient: new NavigationClient(),\n        loadFrameTimeout: 0,\n        // If loadFrameTimeout is provided, use that as default.\n        windowHashTimeout:\n            userInputSystem?.loadFrameTimeout || DEFAULT_POPUP_TIMEOUT_MS,\n        iframeHashTimeout:\n            userInputSystem?.loadFrameTimeout || DEFAULT_IFRAME_TIMEOUT_MS,\n        navigateFrameWait: 0,\n        redirectNavigationTimeout: DEFAULT_REDIRECT_TIMEOUT_MS,\n        asyncPopups: false,\n        allowRedirectInIframe: false,\n        allowNativeBroker: false,\n        nativeBrokerHandshakeTimeout:\n            userInputSystem?.nativeBrokerHandshakeTimeout ||\n            DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS,\n        pollIntervalMilliseconds: BrowserConstants.DEFAULT_POLL_INTERVAL_MS,\n    };\n\n    const providedSystemOptions: Required<BrowserSystemOptions> = {\n        ...DEFAULT_BROWSER_SYSTEM_OPTIONS,\n        ...userInputSystem,\n        loggerOptions: userInputSystem?.loggerOptions || DEFAULT_LOGGER_OPTIONS,\n    };\n\n    const DEFAULT_TELEMETRY_OPTIONS: Required<BrowserTelemetryOptions> = {\n        application: {\n            appName: Constants.EMPTY_STRING,\n            appVersion: Constants.EMPTY_STRING,\n        },\n        client: new StubPerformanceClient(),\n    };\n\n    // Throw an error if user has set OIDCOptions without being in OIDC protocol mode\n    if (\n        userInputAuth?.protocolMode !== ProtocolMode.OIDC &&\n        userInputAuth?.OIDCOptions\n    ) {\n        const logger = new Logger(providedSystemOptions.loggerOptions);\n        logger.warning(\n            JSON.stringify(\n                createClientConfigurationError(\n                    ClientConfigurationErrorCodes.cannotSetOIDCOptions\n                )\n            )\n        );\n    }\n\n    // Throw an error if user has set allowNativeBroker to true without being in AAD protocol mode\n    if (\n        userInputAuth?.protocolMode &&\n        userInputAuth.protocolMode !== ProtocolMode.AAD &&\n        providedSystemOptions?.allowNativeBroker\n    ) {\n        throw createClientConfigurationError(\n            ClientConfigurationErrorCodes.cannotAllowNativeBroker\n        );\n    }\n\n    const overlayedConfig: BrowserConfiguration = {\n        auth: {\n            ...DEFAULT_AUTH_OPTIONS,\n            ...userInputAuth,\n            OIDCOptions: {\n                ...DEFAULT_AUTH_OPTIONS.OIDCOptions,\n                ...userInputAuth?.OIDCOptions,\n            },\n        },\n        cache: { ...DEFAULT_CACHE_OPTIONS, ...userInputCache },\n        system: providedSystemOptions,\n        telemetry: { ...DEFAULT_TELEMETRY_OPTIONS, ...userInputTelemetry },\n    };\n\n    return overlayedConfig;\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Logger,\n    IPerformanceClient,\n    PerformanceEvents,\n    invokeAsync,\n    invoke,\n    ServerResponseType,\n} from \"@azure/msal-common\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { DEFAULT_IFRAME_TIMEOUT_MS } from \"../config/Configuration\";\n\n/**\n * Creates a hidden iframe to given URL using user-requested scopes as an id.\n * @param urlNavigate\n * @param userRequestScopes\n */\nexport async function initiateAuthRequest(\n    requestUrl: string,\n    performanceClient: IPerformanceClient,\n    logger: Logger,\n    correlationId: string,\n    navigateFrameWait?: number\n): Promise<HTMLIFrameElement> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.SilentHandlerInitiateAuthRequest,\n        correlationId\n    );\n\n    if (!requestUrl) {\n        // Throw error if request URL is empty.\n        logger.info(\"Navigate url is empty\");\n        throw createBrowserAuthError(BrowserAuthErrorCodes.emptyNavigateUri);\n    }\n    if (navigateFrameWait) {\n        return invokeAsync(\n            loadFrame,\n            PerformanceEvents.SilentHandlerLoadFrame,\n            logger,\n            performanceClient,\n            correlationId\n        )(requestUrl, navigateFrameWait, performanceClient, correlationId);\n    }\n    return invoke(\n        loadFrameSync,\n        PerformanceEvents.SilentHandlerLoadFrameSync,\n        logger,\n        performanceClient,\n        correlationId\n    )(requestUrl);\n}\n\n/**\n * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.\n * @param iframe\n * @param timeout\n */\nexport async function monitorIframeForHash(\n    iframe: HTMLIFrameElement,\n    timeout: number,\n    pollIntervalMilliseconds: number,\n    performanceClient: IPerformanceClient,\n    logger: Logger,\n    correlationId: string,\n    responseType: ServerResponseType\n): Promise<string> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.SilentHandlerMonitorIframeForHash,\n        correlationId\n    );\n\n    return new Promise<string>((resolve, reject) => {\n        if (timeout < DEFAULT_IFRAME_TIMEOUT_MS) {\n            logger.warning(\n                `system.loadFrameTimeout or system.iframeHashTimeout set to lower (${timeout}ms) than the default (${DEFAULT_IFRAME_TIMEOUT_MS}ms). This may result in timeouts.`\n            );\n        }\n\n        /*\n         * Polling for iframes can be purely timing based,\n         * since we don't need to account for interaction.\n         */\n        const timeoutId = window.setTimeout(() => {\n            window.clearInterval(intervalId);\n            reject(\n                createBrowserAuthError(\n                    BrowserAuthErrorCodes.monitorWindowTimeout\n                )\n            );\n        }, timeout);\n\n        const intervalId = window.setInterval(() => {\n            let href: string = \"\";\n            const contentWindow = iframe.contentWindow;\n            try {\n                /*\n                 * Will throw if cross origin,\n                 * which should be caught and ignored\n                 * since we need the interval to keep running while on STS UI.\n                 */\n                href = contentWindow ? contentWindow.location.href : \"\";\n            } catch (e) {}\n\n            if (!href || href === \"about:blank\") {\n                return;\n            }\n\n            let responseString = \"\";\n            if (contentWindow) {\n                if (responseType === ServerResponseType.QUERY) {\n                    responseString = contentWindow.location.search;\n                } else {\n                    responseString = contentWindow.location.hash;\n                }\n            }\n            window.clearTimeout(timeoutId);\n            window.clearInterval(intervalId);\n            resolve(responseString);\n        }, pollIntervalMilliseconds);\n    }).finally(() => {\n        invoke(\n            removeHiddenIframe,\n            PerformanceEvents.RemoveHiddenIframe,\n            logger,\n            performanceClient,\n            correlationId\n        )(iframe);\n    });\n}\n\n/**\n * @hidden\n * Loads iframe with authorization endpoint URL\n * @ignore\n * @deprecated\n */\nfunction loadFrame(\n    urlNavigate: string,\n    navigateFrameWait: number,\n    performanceClient: IPerformanceClient,\n    correlationId: string\n): Promise<HTMLIFrameElement> {\n    performanceClient.addQueueMeasurement(\n        PerformanceEvents.SilentHandlerLoadFrame,\n        correlationId\n    );\n\n    /*\n     * This trick overcomes iframe navigation in IE\n     * IE does not load the page consistently in iframe\n     */\n\n    return new Promise((resolve, reject) => {\n        const frameHandle = createHiddenIframe();\n\n        window.setTimeout(() => {\n            if (!frameHandle) {\n                reject(\"Unable to load iframe\");\n                return;\n            }\n\n            frameHandle.src = urlNavigate;\n\n            resolve(frameHandle);\n        }, navigateFrameWait);\n    });\n}\n/**\n * @hidden\n * Loads the iframe synchronously when the navigateTimeFrame is set to `0`\n * @param urlNavigate\n * @param frameName\n * @param logger\n */\nfunction loadFrameSync(urlNavigate: string): HTMLIFrameElement {\n    const frameHandle = createHiddenIframe();\n\n    frameHandle.src = urlNavigate;\n\n    return frameHandle;\n}\n\n/**\n * @hidden\n * Creates a new hidden iframe or gets an existing one for silent token renewal.\n * @ignore\n */\nfunction createHiddenIframe(): HTMLIFrameElement {\n    const authFrame = document.createElement(\"iframe\");\n\n    authFrame.className = \"msalSilentIframe\";\n    authFrame.style.visibility = \"hidden\";\n    authFrame.style.position = \"absolute\";\n    authFrame.style.width = authFrame.style.height = \"0\";\n    authFrame.style.border = \"0\";\n    authFrame.setAttribute(\n        \"sandbox\",\n        \"allow-scripts allow-same-origin allow-forms\"\n    );\n    document.body.appendChild(authFrame);\n\n    return authFrame;\n}\n\n/**\n * @hidden\n * Removes a hidden iframe from the page.\n * @ignore\n */\nfunction removeHiddenIframe(iframe: HTMLIFrameElement): void {\n    if (document.body === iframe.parentNode) {\n        document.body.removeChild(iframe);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ICrypto,\n    Logger,\n    PromptValue,\n    CommonAuthorizationCodeRequest,\n    AuthorizationCodeClient,\n    AuthError,\n    ProtocolUtils,\n    IPerformanceClient,\n    PerformanceEvents,\n    invokeAsync,\n    invoke,\n} from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport {\n    initiateAuthRequest,\n    monitorIframeForHash,\n} from \"../interaction_handler/SilentHandler\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { InteractionHandler } from \"../interaction_handler/InteractionHandler\";\nimport * as BrowserUtils from \"../utils/BrowserUtils\";\nimport * as ResponseHandler from \"../response/ResponseHandler\";\n\nexport class SilentIframeClient extends StandardInteractionClient {\n    protected apiId: ApiId;\n    protected nativeStorage: BrowserCacheManager;\n\n    constructor(\n        config: BrowserConfiguration,\n        storageImpl: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        apiId: ApiId,\n        performanceClient: IPerformanceClient,\n        nativeStorageImpl: BrowserCacheManager,\n        nativeMessageHandler?: NativeMessageHandler,\n        correlationId?: string\n    ) {\n        super(\n            config,\n            storageImpl,\n            browserCrypto,\n            logger,\n            eventHandler,\n            navigationClient,\n            performanceClient,\n            nativeMessageHandler,\n            correlationId\n        );\n        this.apiId = apiId;\n        this.nativeStorage = nativeStorageImpl;\n    }\n\n    /**\n     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\n     * @param request\n     */\n    async acquireToken(\n        request: SsoSilentRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.SilentIframeClientAcquireToken,\n            request.correlationId\n        );\n        // Check that we have some SSO data\n        if (\n            !request.loginHint &&\n            !request.sid &&\n            (!request.account || !request.account.username)\n        ) {\n            this.logger.warning(\n                \"No user hint provided. The authorization server may need more information to complete this request.\"\n            );\n        }\n\n        // Check the prompt value\n        const inputRequest = { ...request };\n        if (inputRequest.prompt) {\n            if (\n                inputRequest.prompt !== PromptValue.NONE &&\n                inputRequest.prompt !== PromptValue.NO_SESSION\n            ) {\n                this.logger.warning(\n                    `SilentIframeClient. Replacing invalid prompt ${inputRequest.prompt} with ${PromptValue.NONE}`\n                );\n                inputRequest.prompt = PromptValue.NONE;\n            }\n        } else {\n            inputRequest.prompt = PromptValue.NONE;\n        }\n\n        // Create silent request\n        const silentRequest: AuthorizationUrlRequest = await invokeAsync(\n            this.initializeAuthorizationRequest.bind(this),\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(inputRequest, InteractionType.Silent);\n        BrowserUtils.preconnect(silentRequest.authority);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            this.apiId\n        );\n\n        try {\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await invokeAsync(\n                this.createAuthCodeClient.bind(this),\n                PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(\n                serverTelemetryManager,\n                silentRequest.authority,\n                silentRequest.azureCloudOptions,\n                silentRequest.account\n            );\n\n            return await invokeAsync(\n                this.silentTokenHelper.bind(this),\n                PerformanceEvents.SilentIframeClientTokenHelper,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(authClient, silentRequest);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            throw e;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(\n            createBrowserAuthError(\n                BrowserAuthErrorCodes.silentLogoutUnsupported\n            )\n        );\n    }\n\n    /**\n     * Helper which acquires an authorization code silently using a hidden iframe from given url\n     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\n     * @param navigateUrl\n     * @param userRequestScopes\n     */\n    protected async silentTokenHelper(\n        authClient: AuthorizationCodeClient,\n        silentRequest: AuthorizationUrlRequest\n    ): Promise<AuthenticationResult> {\n        const correlationId = silentRequest.correlationId;\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.SilentIframeClientTokenHelper,\n            correlationId\n        );\n\n        // Create auth code request and generate PKCE params\n        const authCodeRequest: CommonAuthorizationCodeRequest =\n            await invokeAsync(\n                this.initializeAuthorizationCodeRequest.bind(this),\n                PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\n                this.logger,\n                this.performanceClient,\n                correlationId\n            )(silentRequest);\n\n        // Create authorize request url\n        const navigateUrl = await invokeAsync(\n            authClient.getAuthCodeUrl.bind(authClient),\n            PerformanceEvents.GetAuthCodeUrl,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )({\n            ...silentRequest,\n            nativeBroker: NativeMessageHandler.isNativeAvailable(\n                this.config,\n                this.logger,\n                this.nativeMessageHandler,\n                silentRequest.authenticationScheme\n            ),\n        });\n\n        // Create silent handler\n        const interactionHandler = new InteractionHandler(\n            authClient,\n            this.browserStorage,\n            authCodeRequest,\n            this.logger,\n            this.performanceClient\n        );\n        // Get the frame handle for the silent request\n        const msalFrame = await invokeAsync(\n            initiateAuthRequest,\n            PerformanceEvents.SilentHandlerInitiateAuthRequest,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(\n            navigateUrl,\n            this.performanceClient,\n            this.logger,\n            correlationId,\n            this.config.system.navigateFrameWait\n        );\n        const responseType = this.config.auth.OIDCOptions.serverResponseType;\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n        const responseString = await invokeAsync(\n            monitorIframeForHash,\n            PerformanceEvents.SilentHandlerMonitorIframeForHash,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(\n            msalFrame,\n            this.config.system.iframeHashTimeout,\n            this.config.system.pollIntervalMilliseconds,\n            this.performanceClient,\n            this.logger,\n            correlationId,\n            responseType\n        );\n        const serverParams = invoke(\n            ResponseHandler.deserializeResponse,\n            PerformanceEvents.DeserializeResponse,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(responseString, responseType, this.logger);\n\n        if (serverParams.accountId) {\n            this.logger.verbose(\n                \"Account id found in hash, calling WAM for token\"\n            );\n            if (!this.nativeMessageHandler) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.nativeConnectionNotEstablished\n                );\n            }\n            const nativeInteractionClient = new NativeInteractionClient(\n                this.config,\n                this.browserStorage,\n                this.browserCrypto,\n                this.logger,\n                this.eventHandler,\n                this.navigationClient,\n                this.apiId,\n                this.performanceClient,\n                this.nativeMessageHandler,\n                serverParams.accountId,\n                this.browserStorage,\n                correlationId\n            );\n            const { userRequestState } = ProtocolUtils.parseRequestState(\n                this.browserCrypto,\n                silentRequest.state\n            );\n            return invokeAsync(\n                nativeInteractionClient.acquireToken.bind(\n                    nativeInteractionClient\n                ),\n                PerformanceEvents.NativeInteractionClientAcquireToken,\n                this.logger,\n                this.performanceClient,\n                correlationId\n            )({\n                ...silentRequest,\n                state: userRequestState,\n                prompt: silentRequest.prompt || PromptValue.NONE,\n            });\n        }\n\n        // Handle response from hash string\n        return invokeAsync(\n            interactionHandler.handleCodeResponse.bind(interactionHandler),\n            PerformanceEvents.HandleCodeResponse,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(serverParams, silentRequest);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport {\n    CommonSilentFlowRequest,\n    ServerTelemetryManager,\n    RefreshTokenClient,\n    AuthError,\n    AzureCloudOptions,\n    PerformanceEvents,\n    invokeAsync,\n    AccountInfo,\n} from \"@azure/msal-common\";\nimport { ApiId } from \"../utils/BrowserConstants\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { initializeBaseRequest } from \"../request/RequestHelpers\";\n\nexport class SilentRefreshClient extends StandardInteractionClient {\n    /**\n     * Exchanges the refresh token for new tokens\n     * @param request\n     */\n    async acquireToken(\n        request: CommonSilentFlowRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.SilentRefreshClientAcquireToken,\n            request.correlationId\n        );\n\n        const baseRequest = await invokeAsync(\n            initializeBaseRequest,\n            PerformanceEvents.InitializeBaseRequest,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request, this.config, this.performanceClient, this.logger);\n        const silentRequest: CommonSilentFlowRequest = {\n            ...request,\n            ...baseRequest,\n        };\n\n        if (request.redirectUri) {\n            // Make sure any passed redirectUri is converted to an absolute URL - redirectUri is not a required parameter for refresh token redemption so only include if explicitly provided\n            silentRequest.redirectUri = this.getRedirectUri(\n                request.redirectUri\n            );\n        }\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.acquireTokenSilent_silentFlow\n        );\n\n        const refreshTokenClient = await this.createRefreshTokenClient(\n            serverTelemetryManager,\n            silentRequest.authority,\n            silentRequest.azureCloudOptions,\n            silentRequest.account\n        );\n        // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n        return invokeAsync(\n            refreshTokenClient.acquireTokenByRefreshToken.bind(\n                refreshTokenClient\n            ),\n            PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(silentRequest).catch((e: AuthError) => {\n            (e as AuthError).setCorrelationId(this.correlationId);\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }) as Promise<AuthenticationResult>;\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(\n            createBrowserAuthError(\n                BrowserAuthErrorCodes.silentLogoutUnsupported\n            )\n        );\n    }\n\n    /**\n     * Creates a Refresh Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    protected async createRefreshTokenClient(\n        serverTelemetryManager: ServerTelemetryManager,\n        authorityUrl?: string,\n        azureCloudOptions?: AzureCloudOptions,\n        account?: AccountInfo\n    ): Promise<RefreshTokenClient> {\n        // Create auth module.\n        const clientConfig = await invokeAsync(\n            this.getClientConfiguration.bind(this),\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(serverTelemetryManager, authorityUrl, azureCloudOptions, account);\n        return new RefreshTokenClient(clientConfig, this.performanceClient);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AccessTokenEntity,\n    ICrypto,\n    IdTokenEntity,\n    Logger,\n    ScopeSet,\n    Authority,\n    AuthorityOptions,\n    ExternalTokenResponse,\n    AccountEntity,\n    AuthToken,\n    RefreshTokenEntity,\n    Constants,\n    CacheRecord,\n    TokenClaims,\n    CacheHelpers,\n    buildAccountToCache,\n} from \"@azure/msal-common\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { BrowserCacheManager } from \"./BrowserCacheManager\";\nimport { ITokenCache } from \"./ITokenCache\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { base64Decode } from \"../encode/Base64Decode\";\nimport * as BrowserCrypto from \"../crypto/BrowserCrypto\";\n\nexport type LoadTokenOptions = {\n    clientInfo?: string;\n    expiresOn?: number;\n    extendedExpiresOn?: number;\n};\n\n/**\n * Token cache manager\n */\nexport class TokenCache implements ITokenCache {\n    // Flag to indicate if in browser environment\n    public isBrowserEnvironment: boolean;\n    // Input configuration by developer/user\n    protected config: BrowserConfiguration;\n    // Browser cache storage\n    private storage: BrowserCacheManager;\n    // Logger\n    private logger: Logger;\n    // Crypto class\n    private cryptoObj: ICrypto;\n\n    constructor(\n        configuration: BrowserConfiguration,\n        storage: BrowserCacheManager,\n        logger: Logger,\n        cryptoObj: ICrypto\n    ) {\n        this.isBrowserEnvironment = typeof window !== \"undefined\";\n        this.config = configuration;\n        this.storage = storage;\n        this.logger = logger;\n        this.cryptoObj = cryptoObj;\n    }\n\n    // Move getAllAccounts here and cache utility APIs\n\n    /**\n     * API to load tokens to msal-browser cache.\n     * @param request\n     * @param response\n     * @param options\n     * @returns `AuthenticationResult` for the response that was loaded.\n     */\n    loadExternalTokens(\n        request: SilentRequest,\n        response: ExternalTokenResponse,\n        options: LoadTokenOptions\n    ): AuthenticationResult {\n        this.logger.info(\"TokenCache - loadExternalTokens called\");\n\n        if (!response.id_token) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.unableToLoadToken\n            );\n        }\n\n        const idTokenClaims = AuthToken.extractTokenClaims(\n            response.id_token,\n            base64Decode\n        );\n\n        let cacheRecord: CacheRecord;\n        let authority: Authority | undefined;\n        let cacheRecordAccount: AccountEntity;\n\n        if (request.account) {\n            cacheRecordAccount = AccountEntity.createFromAccountInfo(\n                request.account\n            );\n            cacheRecord = new CacheRecord(\n                cacheRecordAccount,\n                this.loadIdToken(\n                    response.id_token,\n                    cacheRecordAccount.homeAccountId,\n                    request.account.environment,\n                    request.account.tenantId\n                ),\n                this.loadAccessToken(\n                    request,\n                    response,\n                    cacheRecordAccount.homeAccountId,\n                    request.account.environment,\n                    request.account.tenantId,\n                    options\n                ),\n                this.loadRefreshToken(\n                    request,\n                    response,\n                    cacheRecordAccount.homeAccountId,\n                    request.account.environment\n                )\n            );\n        } else if (request.authority) {\n            const authorityUrl = Authority.generateAuthority(\n                request.authority,\n                request.azureCloudOptions\n            );\n            const authorityOptions: AuthorityOptions = {\n                protocolMode: this.config.auth.protocolMode,\n                knownAuthorities: this.config.auth.knownAuthorities,\n                cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n                authorityMetadata: this.config.auth.authorityMetadata,\n                skipAuthorityMetadataCache:\n                    this.config.auth.skipAuthorityMetadataCache,\n            };\n            authority = new Authority(\n                authorityUrl,\n                this.config.system.networkClient,\n                this.storage,\n                authorityOptions,\n                this.logger,\n                request.correlationId || BrowserCrypto.createNewGuid()\n            );\n\n            // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\n            if (options.clientInfo) {\n                this.logger.trace(\"TokenCache - homeAccountId from options\");\n                cacheRecordAccount = this.loadAccount(\n                    idTokenClaims,\n                    authority,\n                    options.clientInfo\n                );\n                cacheRecord = new CacheRecord(\n                    cacheRecordAccount,\n                    this.loadIdToken(\n                        response.id_token,\n                        cacheRecordAccount.homeAccountId,\n                        authority.hostnameAndPort,\n                        authority.tenant\n                    ),\n                    this.loadAccessToken(\n                        request,\n                        response,\n                        cacheRecordAccount.homeAccountId,\n                        authority.hostnameAndPort,\n                        authority.tenant,\n                        options\n                    ),\n                    this.loadRefreshToken(\n                        request,\n                        response,\n                        cacheRecordAccount.homeAccountId,\n                        authority.hostnameAndPort\n                    )\n                );\n            } else if (response.client_info) {\n                this.logger.trace(\"TokenCache - homeAccountId from response\");\n                cacheRecordAccount = this.loadAccount(\n                    idTokenClaims,\n                    authority,\n                    response.client_info\n                );\n                cacheRecord = new CacheRecord(\n                    cacheRecordAccount,\n                    this.loadIdToken(\n                        response.id_token,\n                        cacheRecordAccount.homeAccountId,\n                        authority.hostnameAndPort,\n                        authority.tenant\n                    ),\n                    this.loadAccessToken(\n                        request,\n                        response,\n                        cacheRecordAccount.homeAccountId,\n                        authority.hostnameAndPort,\n                        authority.tenant,\n                        options\n                    ),\n                    this.loadRefreshToken(\n                        request,\n                        response,\n                        cacheRecordAccount.homeAccountId,\n                        authority.hostnameAndPort\n                    )\n                );\n            } else {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.unableToLoadToken\n                );\n            }\n        } else {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.unableToLoadToken\n            );\n        }\n\n        return this.generateAuthenticationResult(\n            request,\n            idTokenClaims,\n            cacheRecord,\n            cacheRecordAccount,\n            authority\n        );\n    }\n\n    /**\n     * Helper function to load account to msal-browser cache\n     * @param idToken\n     * @param environment\n     * @param clientInfo\n     * @param authorityType\n     * @param requestHomeAccountId\n     * @returns `AccountEntity`\n     */\n    private loadAccount(\n        idTokenClaims: TokenClaims,\n        authority: Authority,\n        clientInfo?: string,\n        requestHomeAccountId?: string\n    ): AccountEntity {\n        if (this.isBrowserEnvironment) {\n            this.logger.verbose(\"TokenCache - loading account\");\n            let homeAccountId;\n            if (requestHomeAccountId) {\n                homeAccountId = requestHomeAccountId;\n            } else if (authority.authorityType !== undefined && clientInfo) {\n                homeAccountId = AccountEntity.generateHomeAccountId(\n                    clientInfo,\n                    authority.authorityType,\n                    this.logger,\n                    this.cryptoObj,\n                    idTokenClaims\n                );\n            }\n\n            if (!homeAccountId) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.unableToLoadToken\n                );\n            }\n            const claimsTenantId = idTokenClaims.tid;\n\n            const cachedAccount = buildAccountToCache(\n                this.storage,\n                authority,\n                homeAccountId,\n                idTokenClaims,\n                base64Decode,\n                clientInfo,\n                authority.hostnameAndPort,\n                claimsTenantId,\n                undefined, // authCodePayload\n                undefined, // nativeAccountId\n                this.logger\n            );\n\n            this.storage.setAccount(cachedAccount);\n            return cachedAccount;\n        } else {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.unableToLoadToken\n            );\n        }\n    }\n\n    /**\n     * Helper function to load id tokens to msal-browser cache\n     * @param idToken\n     * @param homeAccountId\n     * @param environment\n     * @param tenantId\n     * @returns `IdTokenEntity`\n     */\n    private loadIdToken(\n        idToken: string,\n        homeAccountId: string,\n        environment: string,\n        tenantId: string\n    ): IdTokenEntity {\n        const idTokenEntity = CacheHelpers.createIdTokenEntity(\n            homeAccountId,\n            environment,\n            idToken,\n            this.config.auth.clientId,\n            tenantId\n        );\n\n        if (this.isBrowserEnvironment) {\n            this.logger.verbose(\"TokenCache - loading id token\");\n            this.storage.setIdTokenCredential(idTokenEntity);\n            return idTokenEntity;\n        } else {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.unableToLoadToken\n            );\n        }\n    }\n\n    /**\n     * Helper function to load access tokens to msal-browser cache\n     * @param request\n     * @param response\n     * @param homeAccountId\n     * @param environment\n     * @param tenantId\n     * @returns `AccessTokenEntity`\n     */\n    private loadAccessToken(\n        request: SilentRequest,\n        response: ExternalTokenResponse,\n        homeAccountId: string,\n        environment: string,\n        tenantId: string,\n        options: LoadTokenOptions\n    ): AccessTokenEntity | null {\n        if (!response.access_token) {\n            this.logger.verbose(\n                \"TokenCache - No access token provided for caching\"\n            );\n            return null;\n        }\n\n        if (!response.expires_in) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.unableToLoadToken\n            );\n        }\n\n        if (!options.extendedExpiresOn) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.unableToLoadToken\n            );\n        }\n\n        const scopes = new ScopeSet(request.scopes).printScopes();\n        const expiresOn =\n            options.expiresOn ||\n            response.expires_in + new Date().getTime() / 1000;\n        const extendedExpiresOn = options.extendedExpiresOn;\n\n        const accessTokenEntity = CacheHelpers.createAccessTokenEntity(\n            homeAccountId,\n            environment,\n            response.access_token,\n            this.config.auth.clientId,\n            tenantId,\n            scopes,\n            expiresOn,\n            extendedExpiresOn,\n            base64Decode\n        );\n\n        if (this.isBrowserEnvironment) {\n            this.logger.verbose(\"TokenCache - loading access token\");\n            this.storage.setAccessTokenCredential(accessTokenEntity);\n            return accessTokenEntity;\n        } else {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.unableToLoadToken\n            );\n        }\n    }\n\n    /**\n     * Helper function to load refresh tokens to msal-browser cache\n     * @param request\n     * @param response\n     * @param homeAccountId\n     * @param environment\n     * @returns `RefreshTokenEntity`\n     */\n    private loadRefreshToken(\n        request: SilentRequest,\n        response: ExternalTokenResponse,\n        homeAccountId: string,\n        environment: string\n    ): RefreshTokenEntity | null {\n        if (!response.refresh_token) {\n            this.logger.verbose(\n                \"TokenCache - No refresh token provided for caching\"\n            );\n            return null;\n        }\n\n        const refreshTokenEntity = CacheHelpers.createRefreshTokenEntity(\n            homeAccountId,\n            environment,\n            response.refresh_token,\n            this.config.auth.clientId\n        );\n\n        if (this.isBrowserEnvironment) {\n            this.logger.verbose(\"TokenCache - loading refresh token\");\n            this.storage.setRefreshTokenCredential(refreshTokenEntity);\n            return refreshTokenEntity;\n        } else {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.unableToLoadToken\n            );\n        }\n    }\n\n    /**\n     * Helper function to generate an `AuthenticationResult` for the result.\n     * @param request\n     * @param idTokenObj\n     * @param cacheRecord\n     * @param authority\n     * @returns `AuthenticationResult`\n     */\n    private generateAuthenticationResult(\n        request: SilentRequest,\n        idTokenClaims: TokenClaims,\n        cacheRecord: CacheRecord,\n        accountEntity: AccountEntity,\n        authority?: Authority\n    ): AuthenticationResult {\n        let accessToken: string = Constants.EMPTY_STRING;\n        let responseScopes: Array<string> = [];\n        let expiresOn: Date | null = null;\n        let extExpiresOn: Date | undefined;\n\n        if (cacheRecord?.accessToken) {\n            accessToken = cacheRecord.accessToken.secret;\n            responseScopes = ScopeSet.fromString(\n                cacheRecord.accessToken.target\n            ).asArray();\n            expiresOn = new Date(\n                Number(cacheRecord.accessToken.expiresOn) * 1000\n            );\n            extExpiresOn = new Date(\n                Number(cacheRecord.accessToken.extendedExpiresOn) * 1000\n            );\n        }\n\n        const uid =\n            idTokenClaims.oid || idTokenClaims.sub || Constants.EMPTY_STRING;\n        const tid = idTokenClaims.tid || Constants.EMPTY_STRING;\n\n        return {\n            authority: authority\n                ? authority.canonicalAuthority\n                : Constants.EMPTY_STRING,\n            uniqueId: uid,\n            tenantId: tid,\n            scopes: responseScopes,\n            account: accountEntity.getAccountInfo(),\n            idToken: cacheRecord.idToken?.secret || \"\",\n            idTokenClaims: idTokenClaims || {},\n            accessToken: accessToken,\n            fromCache: true,\n            expiresOn: expiresOn,\n            correlationId: request.correlationId || Constants.EMPTY_STRING,\n            requestId: Constants.EMPTY_STRING,\n            extExpiresOn: extExpiresOn,\n            familyId: Constants.EMPTY_STRING,\n            tokenType:\n                cacheRecord?.accessToken?.tokenType || Constants.EMPTY_STRING,\n            state: Constants.EMPTY_STRING,\n            cloudGraphHostName:\n                accountEntity.cloudGraphHostName || Constants.EMPTY_STRING,\n            msGraphHost: accountEntity.msGraphHost || Constants.EMPTY_STRING,\n            code: undefined,\n            fromNativeBroker: false,\n        };\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AuthorizationCodeClient,\n    ClientConfiguration,\n} from \"@azure/msal-common\";\n\nexport class HybridSpaAuthorizationCodeClient extends AuthorizationCodeClient {\n    constructor(config: ClientConfiguration) {\n        super(config);\n        this.includeRedirectUri = false;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ICrypto,\n    Logger,\n    CommonAuthorizationCodeRequest,\n    AuthError,\n    IPerformanceClient,\n    PerformanceEvents,\n    invokeAsync,\n} from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { HybridSpaAuthorizationCodeClient } from \"./HybridSpaAuthorizationCodeClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { InteractionHandler } from \"../interaction_handler/InteractionHandler\";\n\nexport class SilentAuthCodeClient extends StandardInteractionClient {\n    private apiId: ApiId;\n\n    constructor(\n        config: BrowserConfiguration,\n        storageImpl: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        apiId: ApiId,\n        performanceClient: IPerformanceClient,\n        nativeMessageHandler?: NativeMessageHandler,\n        correlationId?: string\n    ) {\n        super(\n            config,\n            storageImpl,\n            browserCrypto,\n            logger,\n            eventHandler,\n            navigationClient,\n            performanceClient,\n            nativeMessageHandler,\n            correlationId\n        );\n        this.apiId = apiId;\n    }\n\n    /**\n     * Acquires a token silently by redeeming an authorization code against the /token endpoint\n     * @param request\n     */\n    async acquireToken(\n        request: AuthorizationCodeRequest\n    ): Promise<AuthenticationResult> {\n        // Auth code payload is required\n        if (!request.code) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.authCodeRequired\n            );\n        }\n\n        // Create silent request\n        const silentRequest: AuthorizationUrlRequest = await invokeAsync(\n            this.initializeAuthorizationRequest.bind(this),\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request, InteractionType.Silent);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            this.apiId\n        );\n\n        try {\n            // Create auth code request (PKCE not needed)\n            const authCodeRequest: CommonAuthorizationCodeRequest = {\n                ...silentRequest,\n                code: request.code,\n            };\n\n            // Initialize the client\n            const clientConfig = await invokeAsync(\n                this.getClientConfiguration.bind(this),\n                PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(\n                serverTelemetryManager,\n                silentRequest.authority,\n                silentRequest.azureCloudOptions,\n                silentRequest.account\n            );\n            const authClient: HybridSpaAuthorizationCodeClient =\n                new HybridSpaAuthorizationCodeClient(clientConfig);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create silent handler\n            const interactionHandler = new InteractionHandler(\n                authClient,\n                this.browserStorage,\n                authCodeRequest,\n                this.logger,\n                this.performanceClient\n            );\n\n            // Handle auth code parameters from request\n            return await invokeAsync(\n                interactionHandler.handleCodeResponseFromServer.bind(\n                    interactionHandler\n                ),\n                PerformanceEvents.HandleCodeResponseFromServer,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(\n                {\n                    code: request.code,\n                    msgraph_host: request.msGraphHost,\n                    cloud_graph_host_name: request.cloudGraphHostName,\n                    cloud_instance_host_name: request.cloudInstanceHostName,\n                },\n                silentRequest,\n                false\n            );\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            throw e;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(\n            createBrowserAuthError(\n                BrowserAuthErrorCodes.silentLogoutUnsupported\n            )\n        );\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CryptoOps } from \"../crypto/CryptoOps\";\nimport {\n    InteractionRequiredAuthError,\n    AccountInfo,\n    Constants,\n    INetworkModule,\n    Logger,\n    CommonSilentFlowRequest,\n    ICrypto,\n    DEFAULT_CRYPTO_IMPLEMENTATION,\n    AuthError,\n    PerformanceEvents,\n    PerformanceCallbackFunction,\n    IPerformanceClient,\n    BaseAuthRequest,\n    PromptValue,\n    InProgressPerformanceEvent,\n    RequestThumbprint,\n    AccountEntity,\n    invokeAsync,\n    createClientAuthError,\n    ClientAuthErrorCodes,\n    AccountFilter,\n    buildStaticAuthorityOptions,\n    InteractionRequiredAuthErrorCodes,\n} from \"@azure/msal-common\";\nimport {\n    BrowserCacheManager,\n    DEFAULT_BROWSER_CACHE_MANAGER,\n} from \"../cache/BrowserCacheManager\";\nimport { BrowserConfiguration, CacheOptions } from \"../config/Configuration\";\nimport {\n    InteractionType,\n    ApiId,\n    BrowserCacheLocation,\n    WrapperSKU,\n    TemporaryCacheKeys,\n    CacheLookupPolicy,\n    DEFAULT_REQUEST,\n    BrowserConstants,\n    iFrameRenewalPolicies,\n} from \"../utils/BrowserConstants\";\nimport * as BrowserUtils from \"../utils/BrowserUtils\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { EventCallbackFunction, EventError } from \"../event/EventMessage\";\nimport { EventType } from \"../event/EventType\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { PopupClient } from \"../interaction_client/PopupClient\";\nimport { RedirectClient } from \"../interaction_client/RedirectClient\";\nimport { SilentIframeClient } from \"../interaction_client/SilentIframeClient\";\nimport { SilentRefreshClient } from \"../interaction_client/SilentRefreshClient\";\nimport { TokenCache } from \"../cache/TokenCache\";\nimport { ITokenCache } from \"../cache/ITokenCache\";\nimport { NativeInteractionClient } from \"../interaction_client/NativeInteractionClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport {\n    NativeAuthError,\n    isFatalNativeAuthError,\n} from \"../error/NativeAuthError\";\nimport { SilentCacheClient } from \"../interaction_client/SilentCacheClient\";\nimport { SilentAuthCodeClient } from \"../interaction_client/SilentAuthCodeClient\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { NativeTokenRequest } from \"../broker/nativeBroker/NativeRequest\";\nimport { StandardOperatingContext } from \"../operatingcontext/StandardOperatingContext\";\nimport { BaseOperatingContext } from \"../operatingcontext/BaseOperatingContext\";\nimport { IController } from \"./IController\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\nimport { createNewGuid } from \"../crypto/BrowserCrypto\";\nimport { initializeSilentRequest } from \"../request/RequestHelpers\";\n\nexport class StandardController implements IController {\n    // OperatingContext\n    protected readonly operatingContext: StandardOperatingContext;\n\n    // Crypto interface implementation\n    protected readonly browserCrypto: ICrypto;\n\n    // Storage interface implementation\n    protected readonly browserStorage: BrowserCacheManager;\n\n    // Native Cache in memory storage implementation\n    protected readonly nativeInternalStorage: BrowserCacheManager;\n\n    // Network interface implementation\n    protected readonly networkClient: INetworkModule;\n\n    // Navigation interface implementation\n    protected navigationClient: INavigationClient;\n\n    // Input configuration by developer/user\n    protected readonly config: BrowserConfiguration;\n\n    // Token cache implementation\n    private tokenCache: TokenCache;\n\n    // Logger\n    protected logger: Logger;\n\n    // Flag to indicate if in browser environment\n    protected isBrowserEnvironment: boolean;\n\n    protected readonly eventHandler: EventHandler;\n\n    // Redirect Response Object\n    protected readonly redirectResponse: Map<\n        string,\n        Promise<AuthenticationResult | null>\n    >;\n\n    // Native Extension Provider\n    protected nativeExtensionProvider: NativeMessageHandler | undefined;\n\n    // Hybrid auth code responses\n    private hybridAuthCodeResponses: Map<string, Promise<AuthenticationResult>>;\n\n    // Performance telemetry client\n    protected readonly performanceClient: IPerformanceClient;\n\n    // Flag representing whether or not the initialize API has been called and completed\n    protected initialized: boolean;\n\n    // Active requests\n    private activeSilentTokenRequests: Map<\n        string,\n        Promise<AuthenticationResult>\n    >;\n\n    // Active Iframe request\n    private activeIframeRequest: [Promise<void>, string] | undefined;\n\n    private ssoSilentMeasurement?: InProgressPerformanceEvent;\n    private acquireTokenByCodeAsyncMeasurement?: InProgressPerformanceEvent;\n    /**\n     * @constructor\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\n     *\n     * Important attributes in the Configuration object for auth are:\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\n     * - authority: the authority URL for your application.\n     * - redirect_uri: the uri of your application registered in the portal.\n     *\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\n     *\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\n     * Full B2C functionality will be available in this library in future versions.\n     *\n     * @param configuration Object for the MSAL PublicClientApplication instance\n     */\n    constructor(operatingContext: StandardOperatingContext) {\n        this.operatingContext = operatingContext;\n        this.isBrowserEnvironment =\n            this.operatingContext.isBrowserEnvironment();\n        // Set the configuration.\n        this.config = operatingContext.getConfig();\n        this.initialized = false;\n\n        // Initialize logger\n        this.logger = this.operatingContext.getLogger();\n\n        // Initialize the network module class.\n        this.networkClient = this.config.system.networkClient;\n\n        // Initialize the navigation client class.\n        this.navigationClient = this.config.system.navigationClient;\n\n        // Initialize redirectResponse Map\n        this.redirectResponse = new Map();\n\n        // Initial hybrid spa map\n        this.hybridAuthCodeResponses = new Map();\n\n        // Initialize performance client\n        this.performanceClient = this.config.telemetry.client;\n\n        // Initialize the crypto class.\n        this.browserCrypto = this.isBrowserEnvironment\n            ? new CryptoOps(this.logger, this.performanceClient)\n            : DEFAULT_CRYPTO_IMPLEMENTATION;\n\n        this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\n\n        // Initialize the browser storage class.\n        this.browserStorage = this.isBrowserEnvironment\n            ? new BrowserCacheManager(\n                  this.config.auth.clientId,\n                  this.config.cache,\n                  this.browserCrypto,\n                  this.logger,\n                  buildStaticAuthorityOptions(this.config.auth),\n                  this.performanceClient\n              )\n            : DEFAULT_BROWSER_CACHE_MANAGER(\n                  this.config.auth.clientId,\n                  this.logger\n              );\n\n        // initialize in memory storage for native flows\n        const nativeCacheOptions: Required<CacheOptions> = {\n            cacheLocation: BrowserCacheLocation.MemoryStorage,\n            temporaryCacheLocation: BrowserCacheLocation.MemoryStorage,\n            storeAuthStateInCookie: false,\n            secureCookies: false,\n            cacheMigrationEnabled: false,\n            claimsBasedCachingEnabled: false,\n        };\n        this.nativeInternalStorage = new BrowserCacheManager(\n            this.config.auth.clientId,\n            nativeCacheOptions,\n            this.browserCrypto,\n            this.logger,\n            undefined,\n            this.performanceClient\n        );\n\n        // Initialize the token cache\n        this.tokenCache = new TokenCache(\n            this.config,\n            this.browserStorage,\n            this.logger,\n            this.browserCrypto\n        );\n\n        this.activeSilentTokenRequests = new Map();\n\n        // Register listener functions\n        this.trackPageVisibility = this.trackPageVisibility.bind(this);\n\n        // Register listener functions\n        this.trackPageVisibilityWithMeasurement =\n            this.trackPageVisibilityWithMeasurement.bind(this);\n    }\n\n    static async createController(\n        operatingContext: BaseOperatingContext\n    ): Promise<IController> {\n        const controller = new StandardController(operatingContext);\n        await controller.initialize();\n        return controller;\n    }\n\n    private trackPageVisibility(correlationId?: string): void {\n        if (!correlationId) {\n            return;\n        }\n        this.logger.info(\"Perf: Visibility change detected\");\n        this.performanceClient.incrementFields(\n            { visibilityChangeCount: 1 },\n            correlationId\n        );\n    }\n\n    /**\n     * Initializer function to perform async startup tasks such as connecting to WAM extension\n     */\n    async initialize(): Promise<void> {\n        this.logger.trace(\"initialize called\");\n        if (this.initialized) {\n            this.logger.info(\n                \"initialize has already been called, exiting early.\"\n            );\n            return;\n        }\n\n        const allowNativeBroker = this.config.system.allowNativeBroker;\n        const initMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.InitializeClientApplication\n        );\n        this.eventHandler.emitEvent(EventType.INITIALIZE_START);\n\n        if (allowNativeBroker) {\n            try {\n                this.nativeExtensionProvider =\n                    await NativeMessageHandler.createProvider(\n                        this.logger,\n                        this.config.system.nativeBrokerHandshakeTimeout,\n                        this.performanceClient\n                    );\n            } catch (e) {\n                this.logger.verbose(e as string);\n            }\n        }\n\n        if (!this.config.cache.claimsBasedCachingEnabled) {\n            this.logger.verbose(\n                \"Claims-based caching is disabled. Clearing the previous cache with claims\"\n            );\n\n            await invokeAsync(\n                this.browserStorage.clearTokensAndKeysWithClaims.bind(\n                    this.browserStorage\n                ),\n                PerformanceEvents.ClearTokensAndKeysWithClaims,\n                this.logger,\n                this.performanceClient\n            )(this.performanceClient);\n        }\n\n        this.initialized = true;\n        this.eventHandler.emitEvent(EventType.INITIALIZE_END);\n\n        initMeasurement.end({ allowNativeBroker, success: true });\n    }\n\n    // #region Redirect Flow\n\n    /**\n     * Event handler function which allows users to fire events after the PublicClientApplication object\n     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect\n     * auth flows.\n     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.\n     * @returns Token response or null. If the return value is null, then no auth redirect was detected.\n     */\n    async handleRedirectPromise(\n        hash?: string\n    ): Promise<AuthenticationResult | null> {\n        this.logger.verbose(\"handleRedirectPromise called\");\n        // Block token acquisition before initialize has been called\n        BrowserUtils.blockAPICallsBeforeInitialize(this.initialized);\n\n        if (this.isBrowserEnvironment) {\n            /**\n             * Store the promise on the PublicClientApplication instance if this is the first invocation of handleRedirectPromise,\n             * otherwise return the promise from the first invocation. Prevents race conditions when handleRedirectPromise is called\n             * several times concurrently.\n             */\n            const redirectResponseKey = hash || \"\";\n            let response = this.redirectResponse.get(redirectResponseKey);\n            if (typeof response === \"undefined\") {\n                response = this.handleRedirectPromiseInternal(hash);\n                this.redirectResponse.set(redirectResponseKey, response);\n                this.logger.verbose(\n                    \"handleRedirectPromise has been called for the first time, storing the promise\"\n                );\n            } else {\n                this.logger.verbose(\n                    \"handleRedirectPromise has been called previously, returning the result from the first call\"\n                );\n            }\n\n            return response;\n        }\n        this.logger.verbose(\n            \"handleRedirectPromise returns null, not browser environment\"\n        );\n        return null;\n    }\n\n    /**\n     * The internal details of handleRedirectPromise. This is separated out to a helper to allow handleRedirectPromise to memoize requests\n     * @param hash\n     * @returns\n     */\n    private async handleRedirectPromiseInternal(\n        hash?: string\n    ): Promise<AuthenticationResult | null> {\n        const loggedInAccounts = this.getAllAccounts();\n        const request: NativeTokenRequest | null =\n            this.browserStorage.getCachedNativeRequest();\n        const useNative =\n            request &&\n            NativeMessageHandler.isNativeAvailable(\n                this.config,\n                this.logger,\n                this.nativeExtensionProvider\n            ) &&\n            this.nativeExtensionProvider &&\n            !hash;\n        const correlationId = useNative\n            ? request?.correlationId\n            : this.browserStorage.getTemporaryCache(\n                  TemporaryCacheKeys.CORRELATION_ID,\n                  true\n              ) || \"\";\n        const rootMeasurement = this.performanceClient.startMeasurement(\n            \"acquireTokenRedirect\",\n            correlationId\n        );\n        this.eventHandler.emitEvent(\n            EventType.HANDLE_REDIRECT_START,\n            InteractionType.Redirect\n        );\n\n        let redirectResponse: Promise<AuthenticationResult | null>;\n        if (useNative && this.nativeExtensionProvider) {\n            this.logger.trace(\n                \"handleRedirectPromise - acquiring token from native platform\"\n            );\n            const nativeClient = new NativeInteractionClient(\n                this.config,\n                this.browserStorage,\n                this.browserCrypto,\n                this.logger,\n                this.eventHandler,\n                this.navigationClient,\n                ApiId.handleRedirectPromise,\n                this.performanceClient,\n                this.nativeExtensionProvider,\n                request.accountId,\n                this.nativeInternalStorage,\n                request.correlationId\n            );\n\n            redirectResponse = invokeAsync(\n                nativeClient.handleRedirectPromise.bind(nativeClient),\n                PerformanceEvents.HandleNativeRedirectPromiseMeasurement,\n                this.logger,\n                this.performanceClient,\n                rootMeasurement.event.correlationId\n            )(this.performanceClient, rootMeasurement.event.correlationId);\n        } else {\n            this.logger.trace(\n                \"handleRedirectPromise - acquiring token from web flow\"\n            );\n            const redirectClient = this.createRedirectClient(correlationId);\n            redirectResponse = invokeAsync(\n                redirectClient.handleRedirectPromise.bind(redirectClient),\n                PerformanceEvents.HandleRedirectPromiseMeasurement,\n                this.logger,\n                this.performanceClient,\n                rootMeasurement.event.correlationId\n            )(\n                hash,\n                this.performanceClient,\n                rootMeasurement.event.correlationId\n            );\n        }\n\n        return redirectResponse\n            .then((result: AuthenticationResult | null) => {\n                if (result) {\n                    // Emit login event if number of accounts change\n\n                    const isLoggingIn =\n                        loggedInAccounts.length < this.getAllAccounts().length;\n                    if (isLoggingIn) {\n                        this.eventHandler.emitEvent(\n                            EventType.LOGIN_SUCCESS,\n                            InteractionType.Redirect,\n                            result\n                        );\n                        this.logger.verbose(\n                            \"handleRedirectResponse returned result, login success\"\n                        );\n                    } else {\n                        this.eventHandler.emitEvent(\n                            EventType.ACQUIRE_TOKEN_SUCCESS,\n                            InteractionType.Redirect,\n                            result\n                        );\n                        this.logger.verbose(\n                            \"handleRedirectResponse returned result, acquire token success\"\n                        );\n                    }\n                    rootMeasurement.end({ success: true });\n                }\n                this.eventHandler.emitEvent(\n                    EventType.HANDLE_REDIRECT_END,\n                    InteractionType.Redirect\n                );\n                rootMeasurement.end({ success: false });\n\n                return result;\n            })\n            .catch((e) => {\n                const eventError = e as EventError;\n                // Emit login event if there is an account\n                if (loggedInAccounts.length > 0) {\n                    this.eventHandler.emitEvent(\n                        EventType.ACQUIRE_TOKEN_FAILURE,\n                        InteractionType.Redirect,\n                        null,\n                        eventError\n                    );\n                } else {\n                    this.eventHandler.emitEvent(\n                        EventType.LOGIN_FAILURE,\n                        InteractionType.Redirect,\n                        null,\n                        eventError\n                    );\n                }\n                this.eventHandler.emitEvent(\n                    EventType.HANDLE_REDIRECT_END,\n                    InteractionType.Redirect\n                );\n\n                rootMeasurement.end(\n                    {\n                        success: false,\n                    },\n                    eventError\n                );\n\n                throw e;\n            });\n    }\n\n    /**\n     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects\n     * the page, so any code that follows this function will not execute.\n     *\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\n     *\n     * @param request\n     */\n    async acquireTokenRedirect(request: RedirectRequest): Promise<void> {\n        // Preflight request\n        const correlationId = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"acquireTokenRedirect called\", correlationId);\n        BrowserUtils.redirectPreflightCheck(this.initialized, this.config);\n        this.browserStorage.setInteractionInProgress(true);\n\n        // If logged in, emit acquire token events\n        const isLoggedIn = this.getAllAccounts().length > 0;\n        if (isLoggedIn) {\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_START,\n                InteractionType.Redirect,\n                request\n            );\n        } else {\n            this.eventHandler.emitEvent(\n                EventType.LOGIN_START,\n                InteractionType.Redirect,\n                request\n            );\n        }\n\n        let result: Promise<void>;\n\n        if (this.nativeExtensionProvider && this.canUseNative(request)) {\n            const nativeClient = new NativeInteractionClient(\n                this.config,\n                this.browserStorage,\n                this.browserCrypto,\n                this.logger,\n                this.eventHandler,\n                this.navigationClient,\n                ApiId.acquireTokenRedirect,\n                this.performanceClient,\n                this.nativeExtensionProvider,\n                this.getNativeAccountId(request),\n                this.nativeInternalStorage,\n                correlationId\n            );\n            result = nativeClient\n                .acquireTokenRedirect(request)\n                .catch((e: AuthError) => {\n                    if (\n                        e instanceof NativeAuthError &&\n                        isFatalNativeAuthError(e)\n                    ) {\n                        this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt\n                        const redirectClient =\n                            this.createRedirectClient(correlationId);\n                        return redirectClient.acquireToken(request);\n                    } else if (e instanceof InteractionRequiredAuthError) {\n                        this.logger.verbose(\n                            \"acquireTokenRedirect - Resolving interaction required error thrown by native broker by falling back to web flow\"\n                        );\n                        const redirectClient =\n                            this.createRedirectClient(correlationId);\n                        return redirectClient.acquireToken(request);\n                    }\n                    this.browserStorage.setInteractionInProgress(false);\n                    throw e;\n                });\n        } else {\n            const redirectClient = this.createRedirectClient(correlationId);\n            result = redirectClient.acquireToken(request);\n        }\n\n        return result.catch((e) => {\n            // If logged in, emit acquire token events\n            if (isLoggedIn) {\n                this.eventHandler.emitEvent(\n                    EventType.ACQUIRE_TOKEN_FAILURE,\n                    InteractionType.Redirect,\n                    null,\n                    e\n                );\n            } else {\n                this.eventHandler.emitEvent(\n                    EventType.LOGIN_FAILURE,\n                    InteractionType.Redirect,\n                    null,\n                    e\n                );\n            }\n            throw e;\n        });\n    }\n\n    // #endregion\n\n    // #region Popup Flow\n\n    /**\n     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser\n     *\n     * @param request\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    acquireTokenPopup(request: PopupRequest): Promise<AuthenticationResult> {\n        const correlationId = this.getRequestCorrelationId(request);\n        const atPopupMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.AcquireTokenPopup,\n            correlationId\n        );\n\n        try {\n            this.logger.verbose(\"acquireTokenPopup called\", correlationId);\n            BrowserUtils.preflightCheck(this.initialized);\n            this.browserStorage.setInteractionInProgress(true);\n        } catch (e) {\n            // Since this function is syncronous we need to reject\n            return Promise.reject(e);\n        }\n\n        // If logged in, emit acquire token events\n        const loggedInAccounts = this.getAllAccounts();\n        if (loggedInAccounts.length > 0) {\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_START,\n                InteractionType.Popup,\n                request\n            );\n        } else {\n            this.eventHandler.emitEvent(\n                EventType.LOGIN_START,\n                InteractionType.Popup,\n                request\n            );\n        }\n\n        let result: Promise<AuthenticationResult>;\n\n        if (this.canUseNative(request)) {\n            result = this.acquireTokenNative(\n                {\n                    ...request,\n                    correlationId,\n                },\n                ApiId.acquireTokenPopup\n            )\n                .then((response) => {\n                    this.browserStorage.setInteractionInProgress(false);\n                    atPopupMeasurement.end({\n                        success: true,\n                        isNativeBroker: true,\n                        requestId: response.requestId,\n                    });\n                    return response;\n                })\n                .catch((e: AuthError) => {\n                    if (\n                        e instanceof NativeAuthError &&\n                        isFatalNativeAuthError(e)\n                    ) {\n                        this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt\n                        const popupClient =\n                            this.createPopupClient(correlationId);\n                        return popupClient.acquireToken(request);\n                    } else if (e instanceof InteractionRequiredAuthError) {\n                        this.logger.verbose(\n                            \"acquireTokenPopup - Resolving interaction required error thrown by native broker by falling back to web flow\"\n                        );\n                        const popupClient =\n                            this.createPopupClient(correlationId);\n                        return popupClient.acquireToken(request);\n                    }\n                    this.browserStorage.setInteractionInProgress(false);\n                    throw e;\n                });\n        } else {\n            const popupClient = this.createPopupClient(correlationId);\n            result = popupClient.acquireToken(request);\n        }\n\n        return result\n            .then((result) => {\n                /*\n                 *  If logged in, emit acquire token events\n                 */\n                const isLoggingIn =\n                    loggedInAccounts.length < this.getAllAccounts().length;\n                if (isLoggingIn) {\n                    this.eventHandler.emitEvent(\n                        EventType.LOGIN_SUCCESS,\n                        InteractionType.Popup,\n                        result\n                    );\n                } else {\n                    this.eventHandler.emitEvent(\n                        EventType.ACQUIRE_TOKEN_SUCCESS,\n                        InteractionType.Popup,\n                        result\n                    );\n                }\n\n                atPopupMeasurement.add({\n                    accessTokenSize: result.accessToken.length,\n                    idTokenSize: result.idToken.length,\n                });\n                atPopupMeasurement.end({\n                    success: true,\n                    requestId: result.requestId,\n                });\n                return result;\n            })\n            .catch((e: Error) => {\n                if (loggedInAccounts.length > 0) {\n                    this.eventHandler.emitEvent(\n                        EventType.ACQUIRE_TOKEN_FAILURE,\n                        InteractionType.Popup,\n                        null,\n                        e\n                    );\n                } else {\n                    this.eventHandler.emitEvent(\n                        EventType.LOGIN_FAILURE,\n                        InteractionType.Popup,\n                        null,\n                        e\n                    );\n                }\n\n                atPopupMeasurement.end(\n                    {\n                        success: false,\n                    },\n                    e\n                );\n\n                // Since this function is syncronous we need to reject\n                return Promise.reject(e);\n            });\n    }\n\n    private trackPageVisibilityWithMeasurement(): void {\n        const measurement =\n            this.ssoSilentMeasurement ||\n            this.acquireTokenByCodeAsyncMeasurement;\n        if (!measurement) {\n            return;\n        }\n\n        this.logger.info(\n            \"Perf: Visibility change detected in \",\n            measurement.event.name\n        );\n        measurement.increment({\n            visibilityChangeCount: 1,\n        });\n    }\n    // #endregion\n\n    // #region Silent Flow\n\n    /**\n     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:\n     * - Any browser using a form of Intelligent Tracking Prevention\n     * - If there is not an established session with the service\n     *\n     * In these cases, the request must be done inside a popup or full frame redirect.\n     *\n     * For the cases where interaction is required, you cannot send a request with prompt=none.\n     *\n     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as\n     * you session on the server still exists.\n     * @param request {@link SsoSilentRequest}\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    async ssoSilent(request: SsoSilentRequest): Promise<AuthenticationResult> {\n        const correlationId = this.getRequestCorrelationId(request);\n        const validRequest = {\n            ...request,\n            // will be PromptValue.NONE or PromptValue.NO_SESSION\n            prompt: request.prompt,\n            correlationId: correlationId,\n        };\n        BrowserUtils.preflightCheck(this.initialized);\n        this.ssoSilentMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.SsoSilent,\n            correlationId\n        );\n        this.ssoSilentMeasurement?.increment({\n            visibilityChangeCount: 0,\n        });\n        document.addEventListener(\n            \"visibilitychange\",\n            this.trackPageVisibilityWithMeasurement\n        );\n        this.logger.verbose(\"ssoSilent called\", correlationId);\n        this.eventHandler.emitEvent(\n            EventType.SSO_SILENT_START,\n            InteractionType.Silent,\n            validRequest\n        );\n\n        let result: Promise<AuthenticationResult>;\n\n        if (this.canUseNative(validRequest)) {\n            result = this.acquireTokenNative(\n                validRequest,\n                ApiId.ssoSilent\n            ).catch((e: AuthError) => {\n                // If native token acquisition fails for availability reasons fallback to standard flow\n                if (e instanceof NativeAuthError && isFatalNativeAuthError(e)) {\n                    this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt\n                    const silentIframeClient = this.createSilentIframeClient(\n                        validRequest.correlationId\n                    );\n                    return silentIframeClient.acquireToken(validRequest);\n                }\n                throw e;\n            });\n        } else {\n            const silentIframeClient = this.createSilentIframeClient(\n                validRequest.correlationId\n            );\n            result = silentIframeClient.acquireToken(validRequest);\n        }\n\n        return result\n            .then((response) => {\n                this.eventHandler.emitEvent(\n                    EventType.SSO_SILENT_SUCCESS,\n                    InteractionType.Silent,\n                    response\n                );\n                this.ssoSilentMeasurement?.add({\n                    accessTokenSize: response.accessToken.length,\n                    idTokenSize: response.idToken.length,\n                });\n                this.ssoSilentMeasurement?.end({\n                    success: true,\n                    isNativeBroker: response.fromNativeBroker,\n                    requestId: response.requestId,\n                });\n                return response;\n            })\n            .catch((e: Error) => {\n                this.eventHandler.emitEvent(\n                    EventType.SSO_SILENT_FAILURE,\n                    InteractionType.Silent,\n                    null,\n                    e\n                );\n                this.ssoSilentMeasurement?.end(\n                    {\n                        success: false,\n                    },\n                    e\n                );\n                throw e;\n            })\n            .finally(() => {\n                document.removeEventListener(\n                    \"visibilitychange\",\n                    this.trackPageVisibilityWithMeasurement\n                );\n            });\n    }\n\n    /**\n     * This function redeems an authorization code (passed as code) from the eSTS token endpoint.\n     * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.\n     * This API is not indended for normal authorization code acquisition and redemption.\n     *\n     * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.\n     *\n     * @param request {@link AuthorizationCodeRequest}\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    async acquireTokenByCode(\n        request: AuthorizationCodeRequest\n    ): Promise<AuthenticationResult> {\n        const correlationId = this.getRequestCorrelationId(request);\n        this.logger.trace(\"acquireTokenByCode called\", correlationId);\n        BrowserUtils.preflightCheck(this.initialized);\n        this.eventHandler.emitEvent(\n            EventType.ACQUIRE_TOKEN_BY_CODE_START,\n            InteractionType.Silent,\n            request\n        );\n        const atbcMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.AcquireTokenByCode,\n            correlationId\n        );\n\n        try {\n            if (request.code && request.nativeAccountId) {\n                // Throw error in case server returns both spa_code and spa_accountid in exchange for auth code.\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.spaCodeAndNativeAccountIdPresent\n                );\n            } else if (request.code) {\n                const hybridAuthCode = request.code;\n                let response = this.hybridAuthCodeResponses.get(hybridAuthCode);\n                if (!response) {\n                    this.logger.verbose(\n                        \"Initiating new acquireTokenByCode request\",\n                        correlationId\n                    );\n                    response = this.acquireTokenByCodeAsync({\n                        ...request,\n                        correlationId,\n                    })\n                        .then((result: AuthenticationResult) => {\n                            this.eventHandler.emitEvent(\n                                EventType.ACQUIRE_TOKEN_BY_CODE_SUCCESS,\n                                InteractionType.Silent,\n                                result\n                            );\n                            this.hybridAuthCodeResponses.delete(hybridAuthCode);\n                            atbcMeasurement.add({\n                                accessTokenSize: result.accessToken.length,\n                                idTokenSize: result.idToken.length,\n                            });\n                            atbcMeasurement.end({\n                                success: true,\n                                isNativeBroker: result.fromNativeBroker,\n                                requestId: result.requestId,\n                            });\n                            return result;\n                        })\n                        .catch((error: Error) => {\n                            this.hybridAuthCodeResponses.delete(hybridAuthCode);\n                            this.eventHandler.emitEvent(\n                                EventType.ACQUIRE_TOKEN_BY_CODE_FAILURE,\n                                InteractionType.Silent,\n                                null,\n                                error\n                            );\n                            atbcMeasurement.end(\n                                {\n                                    success: false,\n                                },\n                                error\n                            );\n                            throw error;\n                        });\n                    this.hybridAuthCodeResponses.set(hybridAuthCode, response);\n                } else {\n                    this.logger.verbose(\n                        \"Existing acquireTokenByCode request found\",\n                        correlationId\n                    );\n                    atbcMeasurement.discard();\n                }\n                return await response;\n            } else if (request.nativeAccountId) {\n                if (this.canUseNative(request, request.nativeAccountId)) {\n                    return await this.acquireTokenNative(\n                        {\n                            ...request,\n                            correlationId,\n                        },\n                        ApiId.acquireTokenByCode,\n                        request.nativeAccountId\n                    ).catch((e: AuthError) => {\n                        // If native token acquisition fails for availability reasons fallback to standard flow\n                        if (\n                            e instanceof NativeAuthError &&\n                            isFatalNativeAuthError(e)\n                        ) {\n                            this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt\n                        }\n                        throw e;\n                    });\n                } else {\n                    throw createBrowserAuthError(\n                        BrowserAuthErrorCodes.unableToAcquireTokenFromNativePlatform\n                    );\n                }\n            } else {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.authCodeOrNativeAccountIdRequired\n                );\n            }\n        } catch (e) {\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_BY_CODE_FAILURE,\n                InteractionType.Silent,\n                null,\n                e as EventError\n            );\n            atbcMeasurement.end(\n                {\n                    success: false,\n                },\n                e\n            );\n            throw e;\n        }\n    }\n\n    /**\n     * Creates a SilentAuthCodeClient to redeem an authorization code.\n     * @param request\n     * @returns Result of the operation to redeem the authorization code\n     */\n    private async acquireTokenByCodeAsync(\n        request: AuthorizationCodeRequest\n    ): Promise<AuthenticationResult> {\n        this.logger.trace(\n            \"acquireTokenByCodeAsync called\",\n            request.correlationId\n        );\n        this.acquireTokenByCodeAsyncMeasurement =\n            this.performanceClient.startMeasurement(\n                PerformanceEvents.AcquireTokenByCodeAsync,\n                request.correlationId\n            );\n        this.acquireTokenByCodeAsyncMeasurement?.increment({\n            visibilityChangeCount: 0,\n        });\n        document.addEventListener(\n            \"visibilitychange\",\n            this.trackPageVisibilityWithMeasurement\n        );\n        const silentAuthCodeClient = this.createSilentAuthCodeClient(\n            request.correlationId\n        );\n        const silentTokenResult = await silentAuthCodeClient\n            .acquireToken(request)\n            .then((response) => {\n                this.acquireTokenByCodeAsyncMeasurement?.end({\n                    success: true,\n                    fromCache: response.fromCache,\n                    isNativeBroker: response.fromNativeBroker,\n                    requestId: response.requestId,\n                });\n                return response;\n            })\n            .catch((tokenRenewalError: Error) => {\n                this.acquireTokenByCodeAsyncMeasurement?.end(\n                    {\n                        success: false,\n                    },\n                    tokenRenewalError\n                );\n                throw tokenRenewalError;\n            })\n            .finally(() => {\n                document.removeEventListener(\n                    \"visibilitychange\",\n                    this.trackPageVisibilityWithMeasurement\n                );\n            });\n        return silentTokenResult;\n    }\n\n    /**\n     * Attempt to acquire an access token from the cache\n     * @param silentCacheClient SilentCacheClient\n     * @param commonRequest CommonSilentFlowRequest\n     * @param silentRequest SilentRequest\n     * @returns A promise that, when resolved, returns the access token\n     */\n    protected async acquireTokenFromCache(\n        commonRequest: CommonSilentFlowRequest,\n        cacheLookupPolicy: CacheLookupPolicy\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.AcquireTokenFromCache,\n            commonRequest.correlationId\n        );\n        switch (cacheLookupPolicy) {\n            case CacheLookupPolicy.Default:\n            case CacheLookupPolicy.AccessToken:\n            case CacheLookupPolicy.AccessTokenAndRefreshToken:\n                const silentCacheClient = this.createSilentCacheClient(\n                    commonRequest.correlationId\n                );\n                return invokeAsync(\n                    silentCacheClient.acquireToken.bind(silentCacheClient),\n                    PerformanceEvents.SilentCacheClientAcquireToken,\n                    this.logger,\n                    this.performanceClient,\n                    commonRequest.correlationId\n                )(commonRequest);\n            default:\n                throw createClientAuthError(\n                    ClientAuthErrorCodes.tokenRefreshRequired\n                );\n        }\n    }\n\n    /**\n     * Attempt to acquire an access token via a refresh token\n     * @param commonRequest CommonSilentFlowRequest\n     * @param cacheLookupPolicy CacheLookupPolicy\n     * @returns A promise that, when resolved, returns the access token\n     */\n    public async acquireTokenByRefreshToken(\n        commonRequest: CommonSilentFlowRequest,\n        cacheLookupPolicy: CacheLookupPolicy\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.AcquireTokenByRefreshToken,\n            commonRequest.correlationId\n        );\n        switch (cacheLookupPolicy) {\n            case CacheLookupPolicy.Default:\n            case CacheLookupPolicy.AccessTokenAndRefreshToken:\n            case CacheLookupPolicy.RefreshToken:\n            case CacheLookupPolicy.RefreshTokenAndNetwork:\n                const silentRefreshClient = this.createSilentRefreshClient(\n                    commonRequest.correlationId\n                );\n\n                return invokeAsync(\n                    silentRefreshClient.acquireToken.bind(silentRefreshClient),\n                    PerformanceEvents.SilentRefreshClientAcquireToken,\n                    this.logger,\n                    this.performanceClient,\n                    commonRequest.correlationId\n                )(commonRequest);\n            default:\n                throw createClientAuthError(\n                    ClientAuthErrorCodes.tokenRefreshRequired\n                );\n        }\n    }\n\n    /**\n     * Attempt to acquire an access token via an iframe\n     * @param request CommonSilentFlowRequest\n     * @returns A promise that, when resolved, returns the access token\n     */\n    protected async acquireTokenBySilentIframe(\n        request: CommonSilentFlowRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.AcquireTokenBySilentIframe,\n            request.correlationId\n        );\n\n        const silentIframeClient = this.createSilentIframeClient(\n            request.correlationId\n        );\n\n        return invokeAsync(\n            silentIframeClient.acquireToken.bind(silentIframeClient),\n            PerformanceEvents.SilentIframeClientAcquireToken,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request);\n    }\n\n    // #endregion\n\n    // #region Logout\n\n    /**\n     * Deprecated logout function. Use logoutRedirect or logoutPopup instead\n     * @param logoutRequest\n     * @deprecated\n     */\n    async logout(logoutRequest?: EndSessionRequest): Promise<void> {\n        const correlationId = this.getRequestCorrelationId(logoutRequest);\n        this.logger.warning(\n            \"logout API is deprecated and will be removed in msal-browser v3.0.0. Use logoutRedirect instead.\",\n            correlationId\n        );\n        return this.logoutRedirect({\n            correlationId,\n            ...logoutRequest,\n        });\n    }\n\n    /**\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param logoutRequest\n     */\n    async logoutRedirect(logoutRequest?: EndSessionRequest): Promise<void> {\n        const correlationId = this.getRequestCorrelationId(logoutRequest);\n        BrowserUtils.redirectPreflightCheck(this.initialized, this.config);\n        this.browserStorage.setInteractionInProgress(true);\n\n        const redirectClient = this.createRedirectClient(correlationId);\n        return redirectClient.logout(logoutRequest);\n    }\n\n    /**\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\n     * @param logoutRequest\n     */\n    logoutPopup(logoutRequest?: EndSessionPopupRequest): Promise<void> {\n        try {\n            const correlationId = this.getRequestCorrelationId(logoutRequest);\n            BrowserUtils.preflightCheck(this.initialized);\n            this.browserStorage.setInteractionInProgress(true);\n\n            const popupClient = this.createPopupClient(correlationId);\n            return popupClient.logout(logoutRequest);\n        } catch (e) {\n            // Since this function is syncronous we need to reject\n            return Promise.reject(e);\n        }\n    }\n\n    /**\n     * Creates a cache interaction client to clear broswer cache.\n     * @param logoutRequest\n     */\n    async clearCache(logoutRequest?: ClearCacheRequest): Promise<void> {\n        const correlationId = this.getRequestCorrelationId(logoutRequest);\n        const cacheClient = this.createSilentCacheClient(correlationId);\n        return cacheClient.logout(logoutRequest);\n    }\n\n    // #endregion\n\n    // #region Account APIs\n\n    /**\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\n     * @returns Array of AccountInfo objects in cache\n     */\n    getAllAccounts(accountFilter?: AccountFilter): AccountInfo[] {\n        this.logger.verbose(\"getAllAccounts called\");\n        return this.isBrowserEnvironment\n            ? this.browserStorage.getAllAccounts(accountFilter)\n            : [];\n    }\n\n    /**\n     * Returns the first account found in the cache that matches the account filter passed in.\n     * @param accountFilter\n     * @returns The first account found in the cache matching the provided filter or null if no account could be found.\n     */\n    getAccount(accountFilter: AccountFilter): AccountInfo | null {\n        this.logger.trace(\"getAccount called\");\n        if (Object.keys(accountFilter).length === 0) {\n            this.logger.warning(\"getAccount: No accountFilter provided\");\n            return null;\n        }\n\n        const account: AccountInfo | null =\n            this.browserStorage.getAccountInfoFilteredBy(accountFilter);\n\n        if (account) {\n            this.logger.verbose(\n                \"getAccount: Account matching provided filter found, returning\"\n            );\n            return account;\n        } else {\n            this.logger.verbose(\n                \"getAccount: No matching account found, returning null\"\n            );\n            return null;\n        }\n    }\n\n    /**\n     * Returns the signed in account matching username.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found.\n     * This API is provided for convenience but getAccountById should be used for best reliability\n     * @param username\n     * @returns The account object stored in MSAL\n     */\n    getAccountByUsername(username: string): AccountInfo | null {\n        this.logger.trace(\"getAccountByUsername called\");\n        if (!username) {\n            this.logger.warning(\"getAccountByUsername: No username provided\");\n            return null;\n        }\n\n        const account = this.browserStorage.getAccountInfoFilteredBy({\n            username,\n        });\n        if (account) {\n            this.logger.verbose(\n                \"getAccountByUsername: Account matching username found, returning\"\n            );\n            this.logger.verbosePii(\n                `getAccountByUsername: Returning signed-in accounts matching username: ${username}`\n            );\n            return account;\n        } else {\n            this.logger.verbose(\n                \"getAccountByUsername: No matching account found, returning null\"\n            );\n            return null;\n        }\n    }\n\n    /**\n     * Returns the signed in account matching homeAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param homeAccountId\n     * @returns The account object stored in MSAL\n     */\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null {\n        this.logger.trace(\"getAccountByHomeId called\");\n        if (!homeAccountId) {\n            this.logger.warning(\n                \"getAccountByHomeId: No homeAccountId provided\"\n            );\n            return null;\n        }\n\n        const account = this.browserStorage.getAccountInfoFilteredBy({\n            homeAccountId,\n        });\n        if (account) {\n            this.logger.verbose(\n                \"getAccountByHomeId: Account matching homeAccountId found, returning\"\n            );\n            this.logger.verbosePii(\n                `getAccountByHomeId: Returning signed-in accounts matching homeAccountId: ${homeAccountId}`\n            );\n            return account;\n        } else {\n            this.logger.verbose(\n                \"getAccountByHomeId: No matching account found, returning null\"\n            );\n            return null;\n        }\n    }\n\n    /**\n     * Returns the signed in account matching localAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param localAccountId\n     * @returns The account object stored in MSAL\n     */\n    getAccountByLocalId(localAccountId: string): AccountInfo | null {\n        this.logger.trace(\"getAccountByLocalId called\");\n        if (!localAccountId) {\n            this.logger.warning(\n                \"getAccountByLocalId: No localAccountId provided\"\n            );\n            return null;\n        }\n\n        const account = this.browserStorage.getAccountInfoFilteredBy({\n            localAccountId,\n        });\n        if (account) {\n            this.logger.verbose(\n                \"getAccountByLocalId: Account matching localAccountId found, returning\"\n            );\n            this.logger.verbosePii(\n                `getAccountByLocalId: Returning signed-in accounts matching localAccountId: ${localAccountId}`\n            );\n            return account;\n        } else {\n            this.logger.verbose(\n                \"getAccountByLocalId: No matching account found, returning null\"\n            );\n            return null;\n        }\n    }\n\n    /**\n     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\n     * @param account\n     */\n    setActiveAccount(account: AccountInfo | null): void {\n        this.browserStorage.setActiveAccount(account);\n    }\n\n    /**\n     * Gets the currently active account\n     */\n    getActiveAccount(): AccountInfo | null {\n        return this.browserStorage.getActiveAccount();\n    }\n\n    // #endregion\n\n    /**\n     * Hydrates the cache with the tokens from an AuthenticationResult\n     * @param result\n     * @param request\n     * @returns\n     */\n    async hydrateCache(\n        result: AuthenticationResult,\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void> {\n        this.logger.verbose(\"hydrateCache called\");\n\n        // Account gets saved to browser storage regardless of native or not\n        const accountEntity = AccountEntity.createFromAccountInfo(\n            result.account,\n            result.cloudGraphHostName,\n            result.msGraphHost\n        );\n        this.browserStorage.setAccount(accountEntity);\n\n        if (result.fromNativeBroker) {\n            this.logger.verbose(\n                \"Response was from native broker, storing in-memory\"\n            );\n            // Tokens from native broker are stored in-memory\n            return this.nativeInternalStorage.hydrateCache(result, request);\n        } else {\n            return this.browserStorage.hydrateCache(result, request);\n        }\n    }\n\n    // #region Helpers\n\n    /**\n     * Acquire a token from native device (e.g. WAM)\n     * @param request\n     */\n    public async acquireTokenNative(\n        request: PopupRequest | SilentRequest | SsoSilentRequest,\n        apiId: ApiId,\n        accountId?: string\n    ): Promise<AuthenticationResult> {\n        this.logger.trace(\"acquireTokenNative called\");\n        if (!this.nativeExtensionProvider) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.nativeConnectionNotEstablished\n            );\n        }\n\n        const nativeClient = new NativeInteractionClient(\n            this.config,\n            this.browserStorage,\n            this.browserCrypto,\n            this.logger,\n            this.eventHandler,\n            this.navigationClient,\n            apiId,\n            this.performanceClient,\n            this.nativeExtensionProvider,\n            accountId || this.getNativeAccountId(request),\n            this.nativeInternalStorage,\n            request.correlationId\n        );\n\n        return nativeClient.acquireToken(request);\n    }\n\n    /**\n     * Returns boolean indicating if this request can use the native broker\n     * @param request\n     */\n    public canUseNative(\n        request: RedirectRequest | PopupRequest | SsoSilentRequest,\n        accountId?: string\n    ): boolean {\n        this.logger.trace(\"canUseNative called\");\n        if (\n            !NativeMessageHandler.isNativeAvailable(\n                this.config,\n                this.logger,\n                this.nativeExtensionProvider,\n                request.authenticationScheme\n            )\n        ) {\n            this.logger.trace(\n                \"canUseNative: isNativeAvailable returned false, returning false\"\n            );\n            return false;\n        }\n\n        if (request.prompt) {\n            switch (request.prompt) {\n                case PromptValue.NONE:\n                case PromptValue.CONSENT:\n                case PromptValue.LOGIN:\n                    this.logger.trace(\n                        \"canUseNative: prompt is compatible with native flow\"\n                    );\n                    break;\n                default:\n                    this.logger.trace(\n                        `canUseNative: prompt = ${request.prompt} is not compatible with native flow, returning false`\n                    );\n                    return false;\n            }\n        }\n\n        if (!accountId && !this.getNativeAccountId(request)) {\n            this.logger.trace(\n                \"canUseNative: nativeAccountId is not available, returning false\"\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Get the native accountId from the account\n     * @param request\n     * @returns\n     */\n    public getNativeAccountId(\n        request: RedirectRequest | PopupRequest | SsoSilentRequest\n    ): string {\n        const account =\n            request.account ||\n            this.getAccount({\n                loginHint: request.loginHint,\n                sid: request.sid,\n            }) ||\n            this.getActiveAccount();\n\n        return (account && account.nativeAccountId) || \"\";\n    }\n\n    /**\n     * Returns new instance of the Popup Interaction Client\n     * @param correlationId\n     */\n    public createPopupClient(correlationId?: string): PopupClient {\n        return new PopupClient(\n            this.config,\n            this.browserStorage,\n            this.browserCrypto,\n            this.logger,\n            this.eventHandler,\n            this.navigationClient,\n            this.performanceClient,\n            this.nativeInternalStorage,\n            this.nativeExtensionProvider,\n            correlationId\n        );\n    }\n\n    /**\n     * Returns new instance of the Redirect Interaction Client\n     * @param correlationId\n     */\n    protected createRedirectClient(correlationId?: string): RedirectClient {\n        return new RedirectClient(\n            this.config,\n            this.browserStorage,\n            this.browserCrypto,\n            this.logger,\n            this.eventHandler,\n            this.navigationClient,\n            this.performanceClient,\n            this.nativeInternalStorage,\n            this.nativeExtensionProvider,\n            correlationId\n        );\n    }\n\n    /**\n     * Returns new instance of the Silent Iframe Interaction Client\n     * @param correlationId\n     */\n    public createSilentIframeClient(\n        correlationId?: string\n    ): SilentIframeClient {\n        return new SilentIframeClient(\n            this.config,\n            this.browserStorage,\n            this.browserCrypto,\n            this.logger,\n            this.eventHandler,\n            this.navigationClient,\n            ApiId.ssoSilent,\n            this.performanceClient,\n            this.nativeInternalStorage,\n            this.nativeExtensionProvider,\n            correlationId\n        );\n    }\n\n    /**\n     * Returns new instance of the Silent Cache Interaction Client\n     */\n    protected createSilentCacheClient(\n        correlationId?: string\n    ): SilentCacheClient {\n        return new SilentCacheClient(\n            this.config,\n            this.browserStorage,\n            this.browserCrypto,\n            this.logger,\n            this.eventHandler,\n            this.navigationClient,\n            this.performanceClient,\n            this.nativeExtensionProvider,\n            correlationId\n        );\n    }\n\n    /**\n     * Returns new instance of the Silent Refresh Interaction Client\n     */\n    protected createSilentRefreshClient(\n        correlationId?: string\n    ): SilentRefreshClient {\n        return new SilentRefreshClient(\n            this.config,\n            this.browserStorage,\n            this.browserCrypto,\n            this.logger,\n            this.eventHandler,\n            this.navigationClient,\n            this.performanceClient,\n            this.nativeExtensionProvider,\n            correlationId\n        );\n    }\n\n    /**\n     * Returns new instance of the Silent AuthCode Interaction Client\n     */\n    protected createSilentAuthCodeClient(\n        correlationId?: string\n    ): SilentAuthCodeClient {\n        return new SilentAuthCodeClient(\n            this.config,\n            this.browserStorage,\n            this.browserCrypto,\n            this.logger,\n            this.eventHandler,\n            this.navigationClient,\n            ApiId.acquireTokenByCode,\n            this.performanceClient,\n            this.nativeExtensionProvider,\n            correlationId\n        );\n    }\n\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     */\n    addEventCallback(callback: EventCallbackFunction): string | null {\n        return this.eventHandler.addEventCallback(callback);\n    }\n\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId: string): void {\n        this.eventHandler.removeEventCallback(callbackId);\n    }\n\n    /**\n     * Registers a callback to receive performance events.\n     *\n     * @param {PerformanceCallbackFunction} callback\n     * @returns {string}\n     */\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\n        return this.performanceClient.addPerformanceCallback(callback);\n    }\n\n    /**\n     * Removes a callback registered with addPerformanceCallback.\n     *\n     * @param {string} callbackId\n     * @returns {boolean}\n     */\n    removePerformanceCallback(callbackId: string): boolean {\n        return this.performanceClient.removePerformanceCallback(callbackId);\n    }\n\n    /**\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n     */\n    enableAccountStorageEvents(): void {\n        this.eventHandler.enableAccountStorageEvents();\n    }\n\n    /**\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n     */\n    disableAccountStorageEvents(): void {\n        this.eventHandler.disableAccountStorageEvents();\n    }\n\n    /**\n     * Gets the token cache for the application.\n     */\n    getTokenCache(): ITokenCache {\n        return this.tokenCache;\n    }\n\n    /**\n     * Returns the logger instance\n     */\n    public getLogger(): Logger {\n        return this.logger;\n    }\n\n    /**\n     * Replaces the default logger set in configurations with new Logger with new configurations\n     * @param logger Logger instance\n     */\n    setLogger(logger: Logger): void {\n        this.logger = logger;\n    }\n\n    /**\n     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.\n     * @param sku\n     * @param version\n     */\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void {\n        // Validate the SKU passed in is one we expect\n        this.browserStorage.setWrapperMetadata(sku, version);\n    }\n\n    /**\n     * Sets navigation client\n     * @param navigationClient\n     */\n    setNavigationClient(navigationClient: INavigationClient): void {\n        this.navigationClient = navigationClient;\n    }\n\n    /**\n     * Returns the configuration object\n     */\n    public getConfiguration(): BrowserConfiguration {\n        return this.config;\n    }\n\n    /**\n     * Returns the performance client\n     */\n    public getPerformanceClient(): IPerformanceClient {\n        return this.performanceClient;\n    }\n\n    /**\n     * Returns the browser env indicator\n     */\n    public isBrowserEnv(): boolean {\n        return this.isBrowserEnvironment;\n    }\n\n    /**\n     * Returns the event handler\n     */\n    getEventHandler(): EventHandler {\n        return this.eventHandler;\n    }\n\n    /**\n     * Generates a correlation id for a request if none is provided.\n     *\n     * @protected\n     * @param {?Partial<BaseAuthRequest>} [request]\n     * @returns {string}\n     */\n    protected getRequestCorrelationId(\n        request?: Partial<BaseAuthRequest>\n    ): string {\n        if (request?.correlationId) {\n            return request.correlationId;\n        }\n\n        if (this.isBrowserEnvironment) {\n            return createNewGuid();\n        }\n\n        /*\n         * Included for fallback for non-browser environments,\n         * and to ensure this method always returns a string.\n         */\n        return Constants.EMPTY_STRING;\n    }\n\n    // #endregion\n\n    /**\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\n     * any code that follows this function will not execute.\n     *\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\n     *\n     * @param request\n     */\n    async loginRedirect(request?: RedirectRequest): Promise<void> {\n        const correlationId: string = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginRedirect called\", correlationId);\n        return this.acquireTokenRedirect({\n            correlationId,\n            ...(request || DEFAULT_REQUEST),\n        });\n    }\n\n    /**\n     * Use when initiating the login process via opening a popup window in the user's browser\n     *\n     * @param request\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    loginPopup(request?: PopupRequest): Promise<AuthenticationResult> {\n        const correlationId: string = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginPopup called\", correlationId);\n        return this.acquireTokenPopup({\n            correlationId,\n            ...(request || DEFAULT_REQUEST),\n        });\n    }\n\n    /**\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\n     *\n     * @param {@link (SilentRequest:type)}\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\n     */\n    async acquireTokenSilent(\n        request: SilentRequest\n    ): Promise<AuthenticationResult> {\n        const correlationId = this.getRequestCorrelationId(request);\n        const atsMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.AcquireTokenSilent,\n            correlationId\n        );\n        atsMeasurement.add({\n            cacheLookupPolicy: request.cacheLookupPolicy,\n        });\n\n        BrowserUtils.preflightCheck(this.initialized);\n        this.logger.verbose(\"acquireTokenSilent called\", correlationId);\n\n        const account = request.account || this.getActiveAccount();\n        if (!account) {\n            throw createBrowserAuthError(BrowserAuthErrorCodes.noAccountError);\n        }\n\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.auth.clientId,\n            authority: request.authority || Constants.EMPTY_STRING,\n            scopes: request.scopes,\n            homeAccountIdentifier: account.homeAccountId,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid,\n            shrOptions: request.shrOptions,\n        };\n        const silentRequestKey = JSON.stringify(thumbprint);\n\n        const cachedResponse =\n            this.activeSilentTokenRequests.get(silentRequestKey);\n        if (typeof cachedResponse === \"undefined\") {\n            this.logger.verbose(\n                \"acquireTokenSilent called for the first time, storing active request\",\n                correlationId\n            );\n\n            const response = invokeAsync(\n                this.acquireTokenSilentAsync.bind(this),\n                PerformanceEvents.AcquireTokenSilentAsync,\n                this.logger,\n                this.performanceClient,\n                correlationId\n            )(\n                {\n                    ...request,\n                    correlationId,\n                },\n                account\n            )\n                .then((result) => {\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\n                    atsMeasurement.add({\n                        accessTokenSize: result.accessToken.length,\n                        idTokenSize: result.idToken.length,\n                    });\n                    atsMeasurement.end({\n                        success: true,\n                        fromCache: result.fromCache,\n                        isNativeBroker: result.fromNativeBroker,\n                        cacheLookupPolicy: request.cacheLookupPolicy,\n                        requestId: result.requestId,\n                    });\n                    return result;\n                })\n                .catch((error: Error) => {\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\n                    atsMeasurement.end(\n                        {\n                            success: false,\n                        },\n                        error\n                    );\n                    throw error;\n                });\n            this.activeSilentTokenRequests.set(silentRequestKey, response);\n            return {\n                ...(await response),\n                state: request.state,\n            };\n        } else {\n            this.logger.verbose(\n                \"acquireTokenSilent has been called previously, returning the result from the first call\",\n                correlationId\n            );\n            // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\n            atsMeasurement.discard();\n            return {\n                ...(await cachedResponse),\n                state: request.state,\n            };\n        }\n    }\n\n    /**\n     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\n     * @param {@link (SilentRequest:type)}\n     * @param {@link (AccountInfo:type)}\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\n     */\n    protected async acquireTokenSilentAsync(\n        request: SilentRequest & { correlationId: string },\n        account: AccountInfo\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.AcquireTokenSilentAsync,\n            request.correlationId\n        );\n\n        this.eventHandler.emitEvent(\n            EventType.ACQUIRE_TOKEN_START,\n            InteractionType.Silent,\n            request\n        );\n\n        if (request.correlationId) {\n            this.performanceClient.incrementFields(\n                { visibilityChangeCount: 0 },\n                request.correlationId\n            );\n        }\n\n        document.addEventListener(\"visibilitychange\", () =>\n            this.trackPageVisibility(request.correlationId)\n        );\n\n        const silentRequest = await invokeAsync(\n            initializeSilentRequest,\n            PerformanceEvents.InitializeSilentRequest,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request, account, this.config, this.performanceClient, this.logger);\n        const cacheLookupPolicy =\n            request.cacheLookupPolicy || CacheLookupPolicy.Default;\n\n        const result = this.acquireTokenSilentNoIframe(\n            silentRequest,\n            cacheLookupPolicy\n        ).catch(async (refreshTokenError: AuthError) => {\n            const shouldTryToResolveSilently =\n                checkIfRefreshTokenErrorCanBeResolvedSilently(\n                    refreshTokenError,\n                    cacheLookupPolicy\n                );\n\n            if (shouldTryToResolveSilently) {\n                if (!this.activeIframeRequest) {\n                    let _resolve: () => void,\n                        _reject: (reason?: AuthError | Error) => void;\n                    // Always set the active request tracker immediately after checking it to prevent races\n                    this.activeIframeRequest = [\n                        new Promise((resolve, reject) => {\n                            _resolve = resolve;\n                            _reject = reject;\n                        }),\n                        silentRequest.correlationId,\n                    ];\n                    this.logger.verbose(\n                        \"Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.\",\n                        silentRequest.correlationId\n                    );\n                    return invokeAsync(\n                        this.acquireTokenBySilentIframe.bind(this),\n                        PerformanceEvents.AcquireTokenBySilentIframe,\n                        this.logger,\n                        this.performanceClient,\n                        silentRequest.correlationId\n                    )(silentRequest)\n                        .then((iframeResult) => {\n                            _resolve();\n                            return iframeResult;\n                        })\n                        .catch((e) => {\n                            _reject(e);\n                            throw e;\n                        })\n                        .finally(() => {\n                            this.activeIframeRequest = undefined;\n                        });\n                } else if (cacheLookupPolicy !== CacheLookupPolicy.Skip) {\n                    const [activePromise, activeCorrelationId] =\n                        this.activeIframeRequest;\n                    this.logger.verbose(\n                        `Iframe request is already in progress, awaiting resolution for request with correlationId: ${activeCorrelationId}`,\n                        silentRequest.correlationId\n                    );\n                    const awaitConcurrentIframeMeasure =\n                        this.performanceClient.startMeasurement(\n                            PerformanceEvents.AwaitConcurrentIframe,\n                            silentRequest.correlationId\n                        );\n                    awaitConcurrentIframeMeasure.add({\n                        awaitIframeCorrelationId: activeCorrelationId,\n                    });\n\n                    // Await for errors first so we can distinguish errors thrown by activePromise versus errors thrown by .then below\n                    await activePromise.catch(() => {\n                        awaitConcurrentIframeMeasure.end({\n                            success: false,\n                        });\n                        this.logger.info(\n                            `Iframe request with correlationId: ${activeCorrelationId} failed. Interaction is required.`\n                        );\n                        // If previous iframe request failed, it's unlikely to succeed this time. Throw original error.\n                        throw refreshTokenError;\n                    });\n\n                    return activePromise.then(() => {\n                        awaitConcurrentIframeMeasure.end({ success: true });\n                        this.logger.verbose(\n                            `Parallel iframe request with correlationId: ${activeCorrelationId} succeeded. Retrying cache and/or RT redemption`,\n                            silentRequest.correlationId\n                        );\n                        // Retry cache lookup and/or RT exchange after iframe completes\n                        return this.acquireTokenSilentNoIframe(\n                            silentRequest,\n                            cacheLookupPolicy\n                        );\n                    });\n                } else {\n                    // Cache policy set to skip and another iframe request is already in progress\n                    this.logger.warning(\n                        \"Another iframe request is currently in progress and CacheLookupPolicy is set to Skip. This may result in degraded performance and/or reliability for both calls. Please consider changing the CacheLookupPolicy to take advantage of request queuing and token cache.\",\n                        silentRequest.correlationId\n                    );\n                    return invokeAsync(\n                        this.acquireTokenBySilentIframe.bind(this),\n                        PerformanceEvents.AcquireTokenBySilentIframe,\n                        this.logger,\n                        this.performanceClient,\n                        silentRequest.correlationId\n                    )(silentRequest);\n                }\n            } else {\n                // Error cannot be silently resolved or iframe renewal is not allowed, interaction required\n                throw refreshTokenError;\n            }\n        });\n\n        return result\n            .then((response) => {\n                this.eventHandler.emitEvent(\n                    EventType.ACQUIRE_TOKEN_SUCCESS,\n                    InteractionType.Silent,\n                    response\n                );\n                if (request.correlationId) {\n                    this.performanceClient.addFields(\n                        {\n                            fromCache: response.fromCache,\n                            isNativeBroker: response.fromNativeBroker,\n                            requestId: response.requestId,\n                        },\n                        request.correlationId\n                    );\n                }\n\n                return response;\n            })\n            .catch((tokenRenewalError: Error) => {\n                this.eventHandler.emitEvent(\n                    EventType.ACQUIRE_TOKEN_FAILURE,\n                    InteractionType.Silent,\n                    null,\n                    tokenRenewalError\n                );\n                throw tokenRenewalError;\n            })\n            .finally(() => {\n                document.removeEventListener(\"visibilitychange\", () =>\n                    this.trackPageVisibility(request.correlationId)\n                );\n            });\n    }\n\n    /**\n     * AcquireTokenSilent without the iframe fallback. This is used to enable the correct fallbacks in cases where there's a potential for multiple silent requests to be made in parallel and prevent those requests from making concurrent iframe requests.\n     * @param silentRequest\n     * @param cacheLookupPolicy\n     * @returns\n     */\n    private async acquireTokenSilentNoIframe(\n        silentRequest: CommonSilentFlowRequest,\n        cacheLookupPolicy: CacheLookupPolicy\n    ): Promise<AuthenticationResult> {\n        if (\n            NativeMessageHandler.isNativeAvailable(\n                this.config,\n                this.logger,\n                this.nativeExtensionProvider,\n                silentRequest.authenticationScheme\n            ) &&\n            silentRequest.account.nativeAccountId\n        ) {\n            this.logger.verbose(\n                \"acquireTokenSilent - attempting to acquire token from native platform\"\n            );\n            return this.acquireTokenNative(\n                silentRequest,\n                ApiId.acquireTokenSilent_silentFlow\n            ).catch(async (e: AuthError) => {\n                // If native token acquisition fails for availability reasons fallback to web flow\n                if (e instanceof NativeAuthError && isFatalNativeAuthError(e)) {\n                    this.logger.verbose(\n                        \"acquireTokenSilent - native platform unavailable, falling back to web flow\"\n                    );\n                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt\n\n                    // Cache will not contain tokens, given that previous WAM requests succeeded. Skip cache and RT renewal and go straight to iframe renewal\n                    throw createClientAuthError(\n                        ClientAuthErrorCodes.tokenRefreshRequired\n                    );\n                }\n                throw e;\n            });\n        } else {\n            this.logger.verbose(\n                \"acquireTokenSilent - attempting to acquire token from web flow\"\n            );\n            return invokeAsync(\n                this.acquireTokenFromCache.bind(this),\n                PerformanceEvents.AcquireTokenFromCache,\n                this.logger,\n                this.performanceClient,\n                silentRequest.correlationId\n            )(silentRequest, cacheLookupPolicy).catch(\n                (cacheError: AuthError) => {\n                    if (cacheLookupPolicy === CacheLookupPolicy.AccessToken) {\n                        throw cacheError;\n                    }\n\n                    this.eventHandler.emitEvent(\n                        EventType.ACQUIRE_TOKEN_NETWORK_START,\n                        InteractionType.Silent,\n                        silentRequest\n                    );\n\n                    return invokeAsync(\n                        this.acquireTokenByRefreshToken.bind(this),\n                        PerformanceEvents.AcquireTokenByRefreshToken,\n                        this.logger,\n                        this.performanceClient,\n                        silentRequest.correlationId\n                    )(silentRequest, cacheLookupPolicy);\n                }\n            );\n        }\n    }\n}\n\n/**\n * Determines whether an error thrown by the refresh token endpoint can be resolved without interaction\n * @param refreshTokenError\n * @param silentRequest\n * @param cacheLookupPolicy\n * @returns\n */\nfunction checkIfRefreshTokenErrorCanBeResolvedSilently(\n    refreshTokenError: AuthError,\n    cacheLookupPolicy: CacheLookupPolicy\n): boolean {\n    const noInteractionRequired = !(\n        refreshTokenError instanceof InteractionRequiredAuthError &&\n        // For refresh token errors, bad_token does not always require interaction (silently resolvable)\n        refreshTokenError.subError !==\n            InteractionRequiredAuthErrorCodes.badToken\n    );\n\n    // Errors that result when the refresh token needs to be replaced\n    const refreshTokenRefreshRequired =\n        refreshTokenError.errorCode === BrowserConstants.INVALID_GRANT_ERROR ||\n        refreshTokenError.errorCode ===\n            ClientAuthErrorCodes.tokenRefreshRequired;\n\n    // Errors that may be resolved before falling back to interaction (through iframe renewal)\n    const isSilentlyResolvable =\n        (noInteractionRequired && refreshTokenRefreshRequired) ||\n        refreshTokenError.errorCode ===\n            InteractionRequiredAuthErrorCodes.noTokensFound ||\n        refreshTokenError.errorCode ===\n            InteractionRequiredAuthErrorCodes.refreshTokenExpired;\n\n    // Only these policies allow for an iframe renewal attempt\n    const tryIframeRenewal = iFrameRenewalPolicies.includes(cacheLookupPolicy);\n\n    return isSilentlyResolvable && tryIframeRenewal;\n}\n"],
  "mappings": "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",
  "names": ["BrowserConfigurationAuthErrorCodes.storageNotSupported", "BrowserConfigurationAuthErrorCodes.stubbedPublicClientApplicationCalled", "BrowserConfigurationAuthErrorCodes.inMemRedirectUnavailable", "BrowserConfigurationAuthErrorCodes\n            .stubbedPublicClientApplicationCalled", "BrowserConfigurationAuthErrorCodes.storageNotSupported", "version", "name", "BrowserAuthErrorCodes.noTokenRequestCacheError", "BrowserAuthErrorCodes.unableToParseTokenRequestCacheError", "BrowserAuthErrorCodes.noCachedAuthorityError", "BrowserAuthErrorCodes.interactionInProgress", "e", "BrowserAuthErrorCodes.blockIframeReload", "BrowserAuthErrorCodes.redirectInIframe", "BrowserAuthErrorCodes.blockNestedPopups", "BrowserAuthErrorCodes.nonBrowserEnvironment", "BrowserAuthErrorCodes.uninitializedPublicClientApplication", "BrowserConfigurationAuthErrorCodes.inMemRedirectUnavailable", "BrowserCrypto.createNewGuid", "BrowserUtils.getCurrentUri", "BrowserAuthErrorCodes.pkceNotCreated", "BrowserUtils.getCurrentUri", "NativeAuthErrorCodes.userSwitch", "NativeStatusCodes.PERSISTENT_ERROR", "NativeStatusCodes.DISABLED", "NativeAuthErrorCodes.contentError", "NativeStatusCodes.ACCOUNT_UNAVAILABLE", "NativeStatusCodes.USER_INTERACTION_REQUIRED", "NativeStatusCodes.USER_CANCEL", "BrowserAuthErrorCodes.userCancelled", "NativeStatusCodes.NO_NETWORK", "BrowserAuthErrorCodes.noNetworkConnectivity", "BrowserAuthErrorCodes.cryptoKeyNotFound", "NativeAuthErrorCodes.userSwitch", "BrowserAuthErrorCodes.nativePromptNotSupported", "BrowserAuthErrorCodes.nativeHandshakeTimeout", "BrowserAuthErrorCodes.nativeExtensionNotInstalled", "BrowserAuthErrorCodes.userCancelled", "BrowserAuthErrorCodes.hashEmptyError", "BrowserAuthErrorCodes.hashDoesNotContainKnownProperties", "BrowserAuthErrorCodes.noStateInHash", "BrowserAuthErrorCodes.unableToParseState", "BrowserAuthErrorCodes.stateInteractionTypeMismatch", "BrowserUtils.preconnect", "ResponseHandler.deserializeResponse", "BrowserAuthErrorCodes.nativeConnectionNotEstablished", "BrowserUtils.getCurrentUri", "BrowserAuthErrorCodes.emptyNavigateUri", "BrowserAuthErrorCodes.userCancelled", "BrowserAuthErrorCodes.emptyWindowError", "BrowserAuthErrorCodes.popupWindowError", "BrowserAuthErrorCodes.emptyNavigateUri", "BrowserAuthErrorCodes.userCancelled", "BrowserUtils.replaceHash", "BrowserUtils.isInIframe", "BrowserUtils.getHomepage", "ResponseHandler.validateInteractionType", "BrowserUtils.clearHash", "BrowserAuthErrorCodes.noStateInHash", "BrowserAuthErrorCodes.nativeConnectionNotEstablished", "BrowserAuthErrorCodes.noCachedAuthorityError", "BrowserUtils.getCurrentUri", "BrowserAuthErrorCodes.getRequestFailed", "BrowserAuthErrorCodes.noNetworkConnectivity", "BrowserAuthErrorCodes.failedToParseResponse", "BrowserAuthErrorCodes.postRequestFailed", "BrowserAuthErrorCodes.emptyNavigateUri", "BrowserAuthErrorCodes.monitorWindowTimeout", "BrowserUtils.preconnect", "BrowserAuthErrorCodes.silentLogoutUnsupported", "ResponseHandler.deserializeResponse", "BrowserAuthErrorCodes.nativeConnectionNotEstablished", "BrowserAuthErrorCodes.silentLogoutUnsupported", "BrowserAuthErrorCodes.unableToLoadToken", "BrowserCrypto.createNewGuid", "BrowserAuthErrorCodes.authCodeRequired", "BrowserAuthErrorCodes.silentLogoutUnsupported", "BrowserUtils.blockAPICallsBeforeInitialize", "BrowserUtils.redirectPreflightCheck", "BrowserUtils.preflightCheck", "result", "_a", "BrowserAuthErrorCodes.spaCodeAndNativeAccountIdPresent", "BrowserAuthErrorCodes.unableToAcquireTokenFromNativePlatform", "BrowserAuthErrorCodes.authCodeOrNativeAccountIdRequired", "BrowserAuthErrorCodes.nativeConnectionNotEstablished", "version", "BrowserAuthErrorCodes.noAccountError"]
}
